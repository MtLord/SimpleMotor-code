
SympleMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee0  08005ee0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee0  08005ee0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005f58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005f58  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e6d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003071  00000000  00000000  00033f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00037ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fce9  00000000  00000000  00038d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f124  00000000  00000000  00058a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a90fe  00000000  00000000  00067b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  00110cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dc0 	.word	0x08005dc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005dc0 	.word	0x08005dc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_ZN3App11RestoreDataEi>:
extern bool CanRxFlag;

long tempID[20]={0,};
long count=0;
float App::RestoreData(int until)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	float temp_data=0;
 800027a:	f04f 0300 	mov.w	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<until;i++){
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	da0c      	bge.n	80002a6 <_ZN3App11RestoreDataEi+0x36>
		((unsigned char*)&temp_data)[i]=RxFIFO_Data[i];
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f107 0208 	add.w	r2, r7, #8
 8000292:	4413      	add	r3, r2
 8000294:	4909      	ldr	r1, [pc, #36]	; (80002bc <_ZN3App11RestoreDataEi+0x4c>)
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	440a      	add	r2, r1
 800029a:	7812      	ldrb	r2, [r2, #0]
 800029c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<until;i++){
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e7ee      	b.n	8000284 <_ZN3App11RestoreDataEi+0x14>
	}
	return temp_data;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	ee07 3a90 	vmov	s15, r3
}
 80002ac:	eeb0 0a67 	vmov.f32	s0, s15
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <_ZN3App7SetDutyEf>:


void App::SetDuty(float duty)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	ed87 0a00 	vstr	s0, [r7]
	switch(node_id)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	889b      	ldrh	r3, [r3, #4]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d843      	bhi.n	800035e <_ZN3App7SetDutyEf+0x9e>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <_ZN3App7SetDutyEf+0x1c>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080002f5 	.word	0x080002f5
 80002e0:	08000305 	.word	0x08000305
 80002e4:	08000317 	.word	0x08000317
 80002e8:	08000329 	.word	0x08000329
 80002ec:	0800033b 	.word	0x0800033b
 80002f0:	0800034d 	.word	0x0800034d
	{
	case 1:
		plow->M1.setDuty(duty);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	ed97 0a00 	vldr	s0, [r7]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f8f4 	bl	80004ea <_ZN5Motor7setDutyEf>
		break;
 8000302:	e02c      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 2:
			plow->M2.setDuty(duty);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3314      	adds	r3, #20
 800030a:	ed97 0a00 	vldr	s0, [r7]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8eb 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000314:	e023      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 3:
			plow->M3.setDuty(duty);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3328      	adds	r3, #40	; 0x28
 800031c:	ed97 0a00 	vldr	s0, [r7]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f8e2 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000326:	e01a      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 4:
			plow->M4.setDuty(duty);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	333c      	adds	r3, #60	; 0x3c
 800032e:	ed97 0a00 	vldr	s0, [r7]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f8d9 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000338:	e011      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 5:
			plow->BL1.setDuty(duty);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3350      	adds	r3, #80	; 0x50
 8000340:	ed97 0a00 	vldr	s0, [r7]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f8d0 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 800034a:	e008      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 6:
			plow->BL2.setDuty(duty);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	336c      	adds	r3, #108	; 0x6c
 8000352:	ed97 0a00 	vldr	s0, [r7]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f8c7 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 800035c:	bf00      	nop

	}
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop

08000368 <_ZN3App9TaskShiftEv>:

void App::TaskShift()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if(CanRxFlag)
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_ZN3App9TaskShiftEv+0x50>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d01a      	beq.n	80003ae <_ZN3App9TaskShiftEv+0x46>
	{
		if(RXmsg.ExtId>>ORDER_BIT_Pos==SET_DUTY)//����ID��SET_DUTY�Ɉ�v������
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <_ZN3App9TaskShiftEv+0x54>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	2b02      	cmp	r3, #2
 8000380:	d112      	bne.n	80003a8 <_ZN3App9TaskShiftEv+0x40>
		{
			this->node_id=RXmsg.ExtId&0xF;//�m�[�hID����
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <_ZN3App9TaskShiftEv+0x54>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	b29b      	uxth	r3, r3
 8000388:	f003 030f 	and.w	r3, r3, #15
 800038c:	b29a      	uxth	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	809a      	strh	r2, [r3, #4]
			SetDuty(RestoreData(4));//4�o�C�g�ɕ����Ă����f�[�^�𕜌����ăf���[�e�B�Ƃ��ăZ�b�g
 8000392:	2104      	movs	r1, #4
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff6b 	bl	8000270 <_ZN3App11RestoreDataEi>
 800039a:	eef0 7a40 	vmov.f32	s15, s0
 800039e:	eeb0 0a67 	vmov.f32	s0, s15
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f7ff ff8c 	bl	80002c0 <_ZN3App7SetDutyEf>
		}


		CanRxFlag=false;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <_ZN3App9TaskShiftEv+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
	}

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000b4 	.word	0x200000b4
 80003bc:	20000094 	.word	0x20000094

080003c0 <_Z12FilterConfigv>:
#define SET_ERROR_LED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
#define RESET_ERRORLED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);

bool CanRxFlag=false;
void FilterConfig()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterIdHigh=0x0000;
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0x0000;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;//stdid�̃f�[�^�t���[��������M
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;//��M�t�B���^��FIFO0�ɐݒ�
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank=0; //�t�B���^�o���N�ԍ���� 0-13
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //�t�B���^�X�P�[��ExtId�܂�
 80003de:	2301      	movs	r3, #1
 80003e0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK; //�}�X�N���[�h
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation=ENABLE; //�t�B���^�L��
 80003e6:	2301      	movs	r3, #1
 80003e8:	623b      	str	r3, [r7, #32]
//	sFilterConfig.SlaveStartFilterBank=14;

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK)
 80003ea:	463b      	mov	r3, r7
 80003ec:	4619      	mov	r1, r3
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <_Z12FilterConfigv+0x60>)
 80003f0:	f001 f9e1 	bl	80017b6 <HAL_CAN_ConfigFilter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	bf14      	ite	ne
 80003fa:	2301      	movne	r3, #1
 80003fc:	2300      	moveq	r3, #0
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <_Z12FilterConfigv+0x4a>
		{
			printf("filter config error!");
 8000404:	4807      	ldr	r0, [pc, #28]	; (8000424 <_Z12FilterConfigv+0x64>)
 8000406:	f004 fe9f 	bl	8005148 <iprintf>
		}
	HAL_CAN_Start(&hcan);
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <_Z12FilterConfigv+0x60>)
 800040c:	f001 fa9d 	bl	800194a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000410:	2102      	movs	r1, #2
 8000412:	4803      	ldr	r0, [pc, #12]	; (8000420 <_Z12FilterConfigv+0x60>)
 8000414:	f001 fbef 	bl	8001bf6 <HAL_CAN_ActivateNotification>
}
 8000418:	bf00      	nop
 800041a:	3728      	adds	r7, #40	; 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000c4 	.word	0x200000c4
 8000424:	08005dd8 	.word	0x08005dd8

08000428 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000434:	2100      	movs	r1, #0
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 facb 	bl	80019d2 <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	   if(rx_led>20){
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b14      	cmp	r3, #20
 8000448:	dd07      	ble.n	800045a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		   TOGGLE_RX_LED;
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	480b      	ldr	r0, [pc, #44]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800044e:	f002 f8bd 	bl	80025cc <HAL_GPIO_TogglePin>
		   rx_led=0;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
	   }
	   else{
		   rx_led++;
	   }

 }
 8000458:	e004      	b.n	8000464 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		   rx_led++;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000462:	6013      	str	r3, [r2, #0]
 }
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000008c 	.word	0x2000008c
 8000470:	20000094 	.word	0x20000094
 8000474:	200000b4 	.word	0x200000b4
 8000478:	200000b0 	.word	0x200000b0
 800047c:	48000400 	.word	0x48000400

08000480 <_ZN5Motor3mapEfllll>:
	TIM_HandleTypeDef *Mhandler;
	GPIO_TypeDef *GPIOx;
	unsigned short pin;
	unsigned int channel;
	void HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre);
	long map(float x, long in_min, long in_max, long out_min, long out_max)
 8000480:	b480      	push	{r7}
 8000482:	b087      	sub	sp, #28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6178      	str	r0, [r7, #20]
 8000488:	ed87 0a04 	vstr	s0, [r7, #16]
 800048c:	60f9      	str	r1, [r7, #12]
 800048e:	60ba      	str	r2, [r7, #8]
 8000490:	607b      	str	r3, [r7, #4]
		{
			return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	ee07 3a90 	vmov	s15, r3
 8000498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800049c:	ed97 7a04 	vldr	s14, [r7, #16]
 80004a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80004a4:	6a3a      	ldr	r2, [r7, #32]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	ee07 3a90 	vmov	s15, r3
 80004ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	ee07 3a90 	vmov	s15, r3
 80004c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	ee07 3a90 	vmov	s15, r3
 80004ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004da:	ee17 3a90 	vmov	r3, s15
		}
 80004de:	4618      	mov	r0, r3
 80004e0:	371c      	adds	r7, #28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <_ZN5Motor7setDutyEf>:




void Motor::setDuty(float d)
{
 80004ea:	b5b0      	push	{r4, r5, r7, lr}
 80004ec:	b084      	sub	sp, #16
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	ed87 0a00 	vstr	s0, [r7]
		if(d>=0)
 80004f6:	edd7 7a00 	vldr	s15, [r7]
 80004fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	db20      	blt.n	8000546 <_ZN5Motor7setDutyEf+0x5c>
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	899b      	ldrh	r3, [r3, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	f002 f844 	bl	800259c <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(d,0,100,0,Mhandler->Instance->ARR));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685c      	ldr	r4, [r3, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	461d      	mov	r5, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2300      	movs	r3, #0
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	2100      	movs	r1, #0
 800052e:	ed97 0a00 	vldr	s0, [r7]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ffa4 	bl	8000480 <_ZN5Motor3mapEfllll>
 8000538:	4603      	mov	r3, r0
 800053a:	462a      	mov	r2, r5
 800053c:	4621      	mov	r1, r4
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f8ac 	bl	800069c <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
		else if(d<0)
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
		}
}
 8000544:	e02b      	b.n	800059e <_ZN5Motor7setDutyEf+0xb4>
		else if(d<0)
 8000546:	edd7 7a00 	vldr	s15, [r7]
 800054a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000552:	d400      	bmi.n	8000556 <_ZN5Motor7setDutyEf+0x6c>
}
 8000554:	e023      	b.n	800059e <_ZN5Motor7setDutyEf+0xb4>
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6898      	ldr	r0, [r3, #8]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	899b      	ldrh	r3, [r3, #12]
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	f002 f81b 	bl	800259c <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685c      	ldr	r4, [r3, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	461d      	mov	r5, r3
 8000570:	edd7 7a00 	vldr	s15, [r7]
 8000574:	eef1 7a67 	vneg.f32	s15, s15
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	2264      	movs	r2, #100	; 0x64
 8000586:	2100      	movs	r1, #0
 8000588:	eeb0 0a67 	vmov.f32	s0, s15
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff77 	bl	8000480 <_ZN5Motor3mapEfllll>
 8000592:	4603      	mov	r3, r0
 8000594:	462a      	mov	r2, r5
 8000596:	4621      	mov	r1, r4
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f87f 	bl	800069c <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}

080005a6 <_ZN5Motor5BeginEv>:
}



void Motor::Begin()
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(Mhandler,channel) ;       //HAL�̎d�l
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f003 fadd 	bl	8003b78 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6898      	ldr	r0, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	899b      	ldrh	r3, [r3, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 ffe7 	bl	800259c <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_ZN5Motor12SetFrequencyEl>:

void Motor::SetFrequency(long freq)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
		float freqency=freq;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ea:	edc7 7a03 	vstr	s15, [r7, #12]
		unsigned short counterperiod=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	82fb      	strh	r3, [r7, #22]
		unsigned short Prescaler=0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	82bb      	strh	r3, [r7, #20]
		float ajustfreq=0;
 80005f6:	f04f 0300 	mov.w	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
		long sysclock=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
			sysclock=HAL_RCC_GetPCLK1Freq();
 8000600:	f003 f8f8 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8000604:	4603      	mov	r3, r0
 8000606:	60bb      	str	r3, [r7, #8]

		while(ajustfreq!=freqency)
 8000608:	ed97 7a04 	vldr	s14, [r7, #16]
 800060c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000610:	eeb4 7a67 	vcmp.f32	s14, s15
 8000614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000618:	d031      	beq.n	800067e <_ZN5Motor12SetFrequencyEl+0xa8>
				{
					Prescaler++;
 800061a:	8abb      	ldrh	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	82bb      	strh	r3, [r7, #20]
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 8000620:	2300      	movs	r3, #0
 8000622:	82fb      	strh	r3, [r7, #22]
 8000624:	8afb      	ldrh	r3, [r7, #22]
 8000626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800062a:	4293      	cmp	r3, r2
 800062c:	d0ec      	beq.n	8000608 <_ZN5Motor12SetFrequencyEl+0x32>
				{
					ajustfreq=(float)sysclock/((float)Prescaler*((float)counterperiod+1));
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000638:	8abb      	ldrh	r3, [r7, #20]
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000642:	8afb      	ldrh	r3, [r7, #22]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000650:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065c:	edc7 7a04 	vstr	s15, [r7, #16]
					if(ajustfreq==freqency)
 8000660:	ed97 7a04 	vldr	s14, [r7, #16]
 8000664:	edd7 7a03 	vldr	s15, [r7, #12]
 8000668:	eeb4 7a67 	vcmp.f32	s14, s15
 800066c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000670:	d003      	beq.n	800067a <_ZN5Motor12SetFrequencyEl+0xa4>
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 8000672:	8afb      	ldrh	r3, [r7, #22]
 8000674:	3301      	adds	r3, #1
 8000676:	82fb      	strh	r3, [r7, #22]
 8000678:	e7d4      	b.n	8000624 <_ZN5Motor12SetFrequencyEl+0x4e>
					{
						break;
 800067a:	bf00      	nop
		while(ajustfreq!=freqency)
 800067c:	e7c4      	b.n	8000608 <_ZN5Motor12SetFrequencyEl+0x32>
					}
				}

				}
		Mhandler->Instance->PSC=(unsigned short)Prescaler-1;
 800067e:	8abb      	ldrh	r3, [r7, #20]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
		Mhandler->Instance->ARR=(unsigned short)counterperiod;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	8afa      	ldrh	r2, [r7, #22]
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>:

void Motor::HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
	switch(channel)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b14      	cmp	r3, #20
 80006ae:	d84b      	bhi.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0x1c>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	0800070d 	.word	0x0800070d
 80006bc:	08000749 	.word	0x08000749
 80006c0:	08000749 	.word	0x08000749
 80006c4:	08000749 	.word	0x08000749
 80006c8:	08000717 	.word	0x08000717
 80006cc:	08000749 	.word	0x08000749
 80006d0:	08000749 	.word	0x08000749
 80006d4:	08000749 	.word	0x08000749
 80006d8:	08000721 	.word	0x08000721
 80006dc:	08000749 	.word	0x08000749
 80006e0:	08000749 	.word	0x08000749
 80006e4:	08000749 	.word	0x08000749
 80006e8:	0800072b 	.word	0x0800072b
 80006ec:	08000749 	.word	0x08000749
 80006f0:	08000749 	.word	0x08000749
 80006f4:	08000749 	.word	0x08000749
 80006f8:	08000735 	.word	0x08000735
 80006fc:	08000749 	.word	0x08000749
 8000700:	08000749 	.word	0x08000749
 8000704:	08000749 	.word	0x08000749
 8000708:	0800073f 	.word	0x0800073f
	{
	case TIM_CHANNEL_1:
		htim->Instance->CCR1=compre;
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000714:	e018      	b.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_2:
			htim->Instance->CCR2=compre;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800071e:	e013      	b.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_3:
			htim->Instance->CCR3=compre;
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000728:	e00e      	b.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_4:
			htim->Instance->CCR4=compre;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000732:	e009      	b.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_5:
			htim->Instance->CCR5=compre;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 800073c:	e004      	b.n	8000748 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_6:
			htim->Instance->CCR6=compre;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 8000746:	bf00      	nop

	}

}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_CAN_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_CAN_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_CAN_Init+0x64>)
 8000760:	2204      	movs	r2, #4
 8000762:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_CAN_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_CAN_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_CAN_Init+0x64>)
 8000772:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000776:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_CAN_Init+0x64>)
 800077a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800077e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_CAN_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_CAN_Init+0x64>)
 8000788:	2201      	movs	r2, #1
 800078a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_CAN_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_CAN_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_CAN_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_CAN_Init+0x64>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_CAN_Init+0x64>)
 80007a6:	f000 ff0b 	bl	80015c0 <HAL_CAN_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 fafc 	bl	8000dac <Error_Handler>
  }

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000c4 	.word	0x200000c4
 80007bc:	40006400 	.word	0x40006400

080007c0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a24      	ldr	r2, [pc, #144]	; (8000870 <HAL_CAN_MspInit+0xb0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d141      	bne.n	8000866 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 80007e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_CAN_MspInit+0xb4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000824:	2309      	movs	r3, #9
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 fd41 	bl	80022b8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2014      	movs	r0, #20
 800083c:	f001 fd05 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000840:	2014      	movs	r0, #20
 8000842:	f001 fd1e 	bl	8002282 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2015      	movs	r0, #21
 800084c:	f001 fcfd 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000850:	2015      	movs	r0, #21
 8000852:	f001 fd16 	bl	8002282 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2016      	movs	r0, #22
 800085c:	f001 fcf5 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000860:	2016      	movs	r0, #22
 8000862:	f001 fd0e 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40006400 	.word	0x40006400
 8000874:	40021000 	.word	0x40021000

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0xbc>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_GPIO_Init+0xbc>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0xbc>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a22      	ldr	r2, [pc, #136]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f001 fe5c 	bl	800259c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2133      	movs	r1, #51	; 0x33
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008ea:	f001 fe57 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 PA8 PA9 
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80008ee:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 80008f2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f001 fcd5 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800090e:	2333      	movs	r3, #51	; 0x33
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0xc0>)
 8000926:	f001 fcc7 	bl	80022b8 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>:
public:
	Motor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,unsigned short _pin,unsigned int _channel):
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	807b      	strh	r3, [r7, #2]
		Mhandler(Mhand),GPIOx(_GPIOx),pin(_pin),channel(_channel)
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj+0x3c>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	819a      	strh	r2, [r3, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	611a      	str	r2, [r3, #16]
	{

	}
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	08005e08 	.word	0x08005e08

0800097c <_ZN5MotorD1Ev>:
	virtual ~Motor(){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <_ZN5MotorD1Ev+0x1c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
	}
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	08005e08 	.word	0x08005e08

0800099c <_ZN5MotorD0Ev>:
	virtual ~Motor(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	}
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ffe9 	bl	800097c <_ZN5MotorD1Ev>
 80009aa:	2114      	movs	r1, #20
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f004 fae4 	bl	8004f7a <_ZdlPvj>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>:
{
private:
	GPIO_TypeDef *coast;
	unsigned short coastpin;
public:
	BLMotor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,GPIO_TypeDef *_coast,unsigned short _pin,unsigned short _coastpin,unsigned int _channel):
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
		Motor(Mhand,_GPIOx,_pin,_channel),coast(_coast),coastpin(_coastpin)
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	8b3a      	ldrh	r2, [r7, #24]
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4613      	mov	r3, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	f7ff ffb0 	bl	800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj+0x3c>)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	8bba      	ldrh	r2, [r7, #28]
 80009ec:	831a      	strh	r2, [r3, #24]
	{

	}
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08005df8 	.word	0x08005df8

080009fc <_ZN6CanBusC1Emm>:
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
	void SetError();
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3318      	adds	r3, #24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	631a      	str	r2, [r3, #48]	; 0x30

	}
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4618      	mov	r0, r3
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_ZN21LowlayerHandelTypedefC1Ev>:

	Motor M1,M2,M3,M4;
	BLMotor BL1,BL2;
	CanBus extcan;
	CanBus stdcan;
	LowlayerHandelTypedef():
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af04      	add	r7, sp, #16
 8000a56:	6078      	str	r0, [r7, #4]
	M2(&htim2,GPIOA,GPIO_PIN_7,TIM_CHANNEL_2),
	M3(&htim2,GPIOB,GPIO_PIN_0,TIM_CHANNEL_3),
	M4(&htim2,GPIOB,GPIO_PIN_1,TIM_CHANNEL_4),
	BL1(&htim3,GPIOA,GPIOA,GPIO_PIN_8,GPIO_PIN_9,TIM_CHANNEL_1),
	BL2(&htim3,GPIOA,GPIOB,GPIO_PIN_10,GPIO_PIN_4,TIM_CHANNEL_2),
	extcan(CAN_ID_EXT,CAN_RTR_DATA),stdcan(CAN_ID_STD,CAN_RTR_DATA)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2320      	movs	r3, #32
 8000a60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a64:	492b      	ldr	r1, [pc, #172]	; (8000b14 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a66:	f7ff ff69 	bl	800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f103 0014 	add.w	r0, r3, #20
 8000a70:	2304      	movs	r3, #4
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a7a:	4926      	ldr	r1, [pc, #152]	; (8000b14 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a7c:	f7ff ff5e 	bl	800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8000a86:	2308      	movs	r3, #8
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000a8e:	4921      	ldr	r1, [pc, #132]	; (8000b14 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a90:	f7ff ff54 	bl	800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000aa2:	491c      	ldr	r1, [pc, #112]	; (8000b14 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000aa4:	f7ff ff4a 	bl	800093c <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ac6:	4915      	ldr	r1, [pc, #84]	; (8000b1c <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000ac8:	f7ff ff78 	bl	80009bc <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	9302      	str	r3, [sp, #8]
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000ae2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000ae8:	f7ff ff68 	bl	80009bc <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3388      	adds	r3, #136	; 0x88
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff81 	bl	80009fc <_ZN6CanBusC1Emm>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	33bc      	adds	r3, #188	; 0xbc
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff7a 	bl	80009fc <_ZN6CanBusC1Emm>
	{

	}
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000138 	.word	0x20000138
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	200000ec 	.word	0x200000ec

08000b20 <_ZN21LowlayerHandelTypedef10DebugMotorEif>:
	void LedCheck()
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
		HAL_Delay(500);
	}
	void DebugMotor(int num,float duty)
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	ed87 0a01 	vstr	s0, [r7, #4]
	{
		switch(num)
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d832      	bhi.n	8000b9c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
 8000b36:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x1c>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000b5d 	.word	0x08000b5d
 8000b40:	08000b6b 	.word	0x08000b6b
 8000b44:	08000b7b 	.word	0x08000b7b
 8000b48:	08000b8b 	.word	0x08000b8b
 8000b4c:	08000b9b 	.word	0x08000b9b
 8000b50:	08000b9b 	.word	0x08000b9b
 8000b54:	08000b9b 	.word	0x08000b9b
 8000b58:	08000b9b 	.word	0x08000b9b
		{
		case 1:
			M1.setDuty(duty);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fcc1 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000b68:	e018      	b.n	8000b9c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 2:
			M2.setDuty(duty);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3314      	adds	r3, #20
 8000b6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fcb9 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000b78:	e010      	b.n	8000b9c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 3:
			M3.setDuty(duty);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3328      	adds	r3, #40	; 0x28
 8000b7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fcb1 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000b88:	e008      	b.n	8000b9c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 4:
			M4.setDuty(duty);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	333c      	adds	r3, #60	; 0x3c
 8000b8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fca9 	bl	80004ea <_ZN5Motor7setDutyEf>
			break;
 8000b98:	e000      	b.n	8000b9c <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 5:

			break;
 8000b9a:	bf00      	nop
			break;
		case 8:

			break;
		}
	}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_ZN3AppC1EP21LowlayerHandelTypedef>:

	float RestoreData(int until);
	//long  RestoreData(int until);
	unsigned short node_id=0;
public:
	App(LowlayerHandelTypedef *_plow):plow(_plow)
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	809a      	strh	r2, [r3, #4]
	{
	}
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0be      	sub	sp, #248	; 0xf8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fc6f 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f87d 	bl	8000cd0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f7ff fe4f 	bl	8000878 <MX_GPIO_Init>
  MX_CAN_Init();
 8000bda:	f7ff fdbb 	bl	8000754 <MX_CAN_Init>
  MX_TIM2_Init();
 8000bde:	f000 fa5f 	bl	80010a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be2:	f000 fad7 	bl	8001194 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000be6:	f000 fbc5 	bl	8001374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LowlayerHandelTypedef hlow;
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff2e 	bl	8000a50 <_ZN21LowlayerHandelTypedefC1Ev>

  hlow.M1.SetFrequency(25000);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcea 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  hlow.M2.SetFrequency(25000);
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	3314      	adds	r3, #20
 8000c08:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fce2 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  hlow.M3.SetFrequency(25000);
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	3328      	adds	r3, #40	; 0x28
 8000c18:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fcda 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  hlow.M4.SetFrequency(25000);
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	333c      	adds	r3, #60	; 0x3c
 8000c28:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fcd2 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  hlow.BL1.SetFrequency(40000);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	3350      	adds	r3, #80	; 0x50
 8000c38:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcca 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  hlow.BL2.SetFrequency(40000);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	336c      	adds	r3, #108	; 0x6c
 8000c48:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fcc2 	bl	80005d6 <_ZN5Motor12SetFrequencyEl>
  HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f000 fc92 	bl	800157c <HAL_Delay>

  hlow.M1.Begin();
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fca2 	bl	80005a6 <_ZN5Motor5BeginEv>
  hlow.M2.Begin();
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	3314      	adds	r3, #20
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc9c 	bl	80005a6 <_ZN5Motor5BeginEv>
  hlow.M3.Begin();
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	3328      	adds	r3, #40	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc96 	bl	80005a6 <_ZN5Motor5BeginEv>
  hlow.M4.Begin();
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	333c      	adds	r3, #60	; 0x3c
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc90 	bl	80005a6 <_ZN5Motor5BeginEv>
  hlow.BL1.Begin();
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	3350      	adds	r3, #80	; 0x50
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc8a 	bl	80005a6 <_ZN5Motor5BeginEv>
  hlow.BL2.Begin();
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	336c      	adds	r3, #108	; 0x6c
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc84 	bl	80005a6 <_ZN5Motor5BeginEv>

  App app(&hlow);
 8000c9e:	f107 0208 	add.w	r2, r7, #8
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff7c 	bl	8000ba4 <_ZN3AppC1EP21LowlayerHandelTypedef>
  FilterConfig();
 8000cac:	f7ff fb88 	bl	80003c0 <_Z12FilterConfigv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RUN
	  app.TaskShift();
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fb58 	bl	8000368 <_ZN3App9TaskShiftEv>
#endif
#ifdef DEBUG
	  hlow.DebugMotor(1,-90);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000ccc <main+0x104>
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff2c 	bl	8000b20 <_ZN21LowlayerHandelTypedef10DebugMotorEif>
	  app.TaskShift();
 8000cc8:	e7f2      	b.n	8000cb0 <main+0xe8>
 8000cca:	bf00      	nop
 8000ccc:	c2b40000 	.word	0xc2b40000

08000cd0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b096      	sub	sp, #88	; 0x58
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f982 	bl	8004fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d12:	2301      	movs	r3, #1
 8000d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fc68 	bl	8002600 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000d40:	f000 f834 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 fb55 	bl	8003410 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf14      	ite	ne
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	2300      	moveq	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000d76:	f000 f819 	bl	8000dac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000d7a:	f241 0301 	movw	r3, #4097	; 0x1001
 8000d7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fd76 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000da0:	f000 f804 	bl	8000dac <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3758      	adds	r7, #88	; 0x58
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <_ZN7BLMotorD1Ev>:
class BLMotor:public Motor
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_ZN7BLMotorD1Ev+0x20>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fdd5 	bl	800097c <_ZN5MotorD1Ev>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	08005df8 	.word	0x08005df8

08000de0 <_ZN7BLMotorD0Ev>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffe7 	bl	8000dbc <_ZN7BLMotorD1Ev>
 8000dee:	211c      	movs	r1, #28
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f004 f8c2 	bl	8004f7a <_ZdlPvj>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <__io_putchar+0x20>)
 8000e12:	f003 fcad 	bl	8004770 <HAL_UART_Transmit>

  return ch;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000184 	.word	0x20000184

08000e24 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint8_t ch = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 8000e30:	f107 010f 	add.w	r1, r7, #15
 8000e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e38:	2201      	movs	r2, #1
 8000e3a:	480a      	ldr	r0, [pc, #40]	; (8000e64 <__io_getchar+0x40>)
 8000e3c:	f003 fd2c 	bl	8004898 <HAL_UART_Receive>

  if (ch == '\r')
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b0d      	cmp	r3, #13
 8000e44:	d104      	bne.n	8000e50 <__io_getchar+0x2c>
  {
      __io_putchar('\r');
 8000e46:	200d      	movs	r0, #13
 8000e48:	f7ff ffda 	bl	8000e00 <__io_putchar>
      ch = '\n';
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  return __io_putchar(ch);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffd4 	bl	8000e00 <__io_putchar>
 8000e58:	4603      	mov	r3, r0
//  return ch;
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000184 	.word	0x20000184

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x44>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x44>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x44>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 fb1a 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <CAN_RX0_IRQHandler+0x10>)
 8000f12:	f000 fe96 	bl	8001c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000c4 	.word	0x200000c4

08000f20 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <CAN_RX1_IRQHandler+0x10>)
 8000f26:	f000 fe8c 	bl	8001c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c4 	.word	0x200000c4

08000f34 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <CAN_SCE_IRQHandler+0x10>)
 8000f3a:	f000 fe82 	bl	8001c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000c4 	.word	0x200000c4

08000f48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f5a:	f7ff ff63 	bl	8000e24 <__io_getchar>
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
	}

return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff2f 	bl	8000e00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
	}
	return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_isatty>:

int _isatty(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x50>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x16>
		heap_end = &end;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_sbrk+0x50>)
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <_sbrk+0x54>)
 8001038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <_sbrk+0x50>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <_sbrk+0x50>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	466a      	mov	r2, sp
 800104a:	4293      	cmp	r3, r2
 800104c:	d907      	bls.n	800105e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800104e:	f003 ff99 	bl	8004f84 <__errno>
 8001052:	4602      	mov	r2, r0
 8001054:	230c      	movs	r3, #12
 8001056:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105c:	e006      	b.n	800106c <_sbrk+0x48>
	}

	heap_end += incr;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <_sbrk+0x50>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <_sbrk+0x50>)
 8001068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000b8 	.word	0x200000b8
 8001078:	20000210 	.word	0x20000210

0800107c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ea:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_TIM2_Init+0xf0>)
 80010ec:	f002 fcec 	bl	8003ac8 <HAL_TIM_PWM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010f6:	f7ff fe59 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_TIM2_Init+0xf0>)
 800110a:	f003 fa75 	bl	80045f8 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001114:	f7ff fe4a 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4818      	ldr	r0, [pc, #96]	; (8001190 <MX_TIM2_Init+0xf0>)
 8001130:	f002 fe0e 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800113a:	f7ff fe37 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2204      	movs	r2, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <MX_TIM2_Init+0xf0>)
 8001146:	f002 fe03 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001150:	f7ff fe2c 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2208      	movs	r2, #8
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM2_Init+0xf0>)
 800115c:	f002 fdf8 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001166:	f7ff fe21 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	220c      	movs	r2, #12
 800116e:	4619      	mov	r1, r3
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM2_Init+0xf0>)
 8001172:	f002 fded 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800117c:	f7ff fe16 	bl	8000dac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM2_Init+0xf0>)
 8001182:	f000 f89d 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000138 	.word	0x20000138

08001194 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011ba:	4a27      	ldr	r2, [pc, #156]	; (8001258 <MX_TIM3_Init+0xc4>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011de:	f002 fc73 	bl	8003ac8 <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011e8:	f7ff fde0 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011fc:	f003 f9fc 	bl	80045f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001206:	f7ff fdd1 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	; 0x60
 800120c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001222:	f002 fd95 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800122c:	f7ff fdbe 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	2204      	movs	r2, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001238:	f002 fd8a 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001242:	f7ff fdb3 	bl	8000dac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001248:	f000 f83a 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000ec 	.word	0x200000ec
 8001258:	40000400 	.word	0x40000400

0800125c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126c:	d10c      	bne.n	8001288 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001286:	e010      	b.n	80012aa <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_TIM_PWM_MspInit+0x60>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10b      	bne.n	80012aa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_TIM_PWM_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40000400 	.word	0x40000400

080012c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e0:	d11d      	bne.n	800131e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012fa:	230f      	movs	r3, #15
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f000 ffce 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800131c:	e021      	b.n	8001362 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d11c      	bne.n	8001362 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 800132e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001332:	6153      	str	r3, [r2, #20]
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0xac>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001340:	2350      	movs	r3, #80	; 0x50
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001350:	2302      	movs	r3, #2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 ffab 	bl	80022b8 <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40000400 	.word	0x40000400

08001374 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART1_UART_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_USART1_UART_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART1_UART_Init+0x58>)
 8001380:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USART1_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART1_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART1_UART_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART1_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART1_UART_Init+0x58>)
 80013b8:	f003 f98c 	bl	80046d4 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013c2:	f7ff fcf3 	bl	8000dac <Error_Handler>
  }

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000184 	.word	0x20000184
 80013d0:	40013800 	.word	0x40013800

080013d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_UART_MspInit+0x7c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d127      	bne.n	8001446 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_UART_MspInit+0x80>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_UART_MspInit+0x80>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_UART_MspInit+0x80>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_UART_MspInit+0x80>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_UART_MspInit+0x80>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6153      	str	r3, [r2, #20]
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_UART_MspInit+0x80>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_UART_MspInit+0x84>)
 8001442:	f000 ff39 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40013800 	.word	0x40013800
 8001454:	40021000 	.word	0x40021000
 8001458:	48000400 	.word	0x48000400

0800145c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001486:	f7ff fdf9 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f003 fd81 	bl	8004f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148e:	f7ff fb9b 	bl	8000bc8 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001494:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014a0:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 80014a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014a8:	20000210 	.word	0x20000210

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 feb7 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fccc 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fecf 	bl	800229e <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f000 fe97 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000208 	.word	0x20000208

08001564 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;  
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000208 	.word	0x20000208

0800157c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_Delay+0x40>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0ed      	b.n	80017ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff f8ee 	bl	80007c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0202 	bic.w	r2, r2, #2
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff ffb6 	bl	8001564 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fa:	e012      	b.n	8001622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015fc:	f7ff ffb2 	bl	8001564 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b0a      	cmp	r3, #10
 8001608:	d90b      	bls.n	8001622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0c5      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e5      	bne.n	80015fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001640:	f7ff ff90 	bl	8001564 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001646:	e012      	b.n	800166e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001648:	f7ff ff8c 	bl	8001564 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d90b      	bls.n	800166e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e09f      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e5      	beq.n	8001648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e007      	b.n	80016a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7e5b      	ldrb	r3, [r3, #25]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e007      	b.n	80016d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e9b      	ldrb	r3, [r3, #26]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e007      	b.n	80016fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0220 	bic.w	r2, r2, #32
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7edb      	ldrb	r3, [r3, #27]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0210 	bic.w	r2, r2, #16
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e007      	b.n	8001724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0210 	orr.w	r2, r2, #16
 8001722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7f1b      	ldrb	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0208 	orr.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7f5b      	ldrb	r3, [r3, #29]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e007      	b.n	8001778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	ea42 0103 	orr.w	r1, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b087      	sub	sp, #28
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ce:	7cfb      	ldrb	r3, [r7, #19]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_ConfigFilter+0x26>
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 80aa 	bne.w	8001930 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2201      	movs	r2, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d123      	bne.n	800185e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001838:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3248      	adds	r2, #72	; 0x48
 800183e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001852:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001854:	6979      	ldr	r1, [r7, #20]
 8001856:	3348      	adds	r3, #72	; 0x48
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d122      	bne.n	80018ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	431a      	orrs	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001886:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3248      	adds	r2, #72	; 0x48
 800188c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a2:	6979      	ldr	r1, [r7, #20]
 80018a4:	3348      	adds	r3, #72	; 0x48
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018c6:	e007      	b.n	80018d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018f2:	e007      	b.n	8001904 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001922:	f023 0201 	bic.w	r2, r3, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e006      	b.n	800193e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d12e      	bne.n	80019bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001976:	f7ff fdf5 	bl	8001564 <HAL_GetTick>
 800197a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800197c:	e012      	b.n	80019a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800197e:	f7ff fdf1 	bl	8001564 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d90b      	bls.n	80019a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2205      	movs	r2, #5
 800199c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e012      	b.n	80019ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1e5      	bne.n	800197e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e006      	b.n	80019ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d003      	beq.n	80019f6 <HAL_CAN_GetRxMessage+0x24>
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	f040 80f3 	bne.w	8001bdc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10e      	bne.n	8001a1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0e7      	b.n	8001bea <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d8      	b.n	8001bea <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	331b      	adds	r3, #27
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0204 	and.w	r2, r3, #4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	331b      	adds	r3, #27
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0d5b      	lsrs	r3, r3, #21
 8001a66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	331b      	adds	r3, #27
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	331b      	adds	r3, #27
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0202 	and.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	331b      	adds	r3, #27
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	331b      	adds	r3, #27
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	331b      	adds	r3, #27
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0a1a      	lsrs	r2, r3, #8
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0c1a      	lsrs	r2, r3, #16
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e1a      	lsrs	r2, r3, #24
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3303      	adds	r3, #3
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0a1a      	lsrs	r2, r3, #8
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	3305      	adds	r3, #5
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0c1a      	lsrs	r2, r3, #16
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3306      	adds	r3, #6
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e1a      	lsrs	r2, r3, #24
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	3307      	adds	r3, #7
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e006      	b.n	8001bea <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d002      	beq.n	8001c14 <HAL_CAN_ActivateNotification+0x1e>
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6959      	ldr	r1, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e006      	b.n	8001c36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b08a      	sub	sp, #40	; 0x28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07c      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f97d 	bl	8001fa4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001caa:	e016      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e00c      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e002      	b.n	8001cda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f983 	bl	8001fe0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d024      	beq.n	8001d2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f95d 	bl	8001fb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cfe:	e016      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e00c      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e002      	b.n	8001d2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f963 	bl	8001ff4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d024      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f93d 	bl	8001fcc <HAL_CAN_TxMailbox2CompleteCallback>
 8001d52:	e016      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e00c      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e002      	b.n	8001d82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f943 	bl	8002008 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f92a 	bl	800201c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fb21 	bl	8000428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00c      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2210      	movs	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f90c 	bl	8002044 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8f3 	bl	8002030 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8f6 	bl	8002058 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2208      	movs	r2, #8
 8001e86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8ef 	bl	800206c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d075      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03d      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d038      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f10:	2b30      	cmp	r3, #48	; 0x30
 8001f12:	d017      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x302>
 8001f14:	2b30      	cmp	r3, #48	; 0x30
 8001f16:	d804      	bhi.n	8001f22 <HAL_CAN_IRQHandler+0x2e0>
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d009      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x2ee>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d00c      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f20:	e024      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f22:	2b50      	cmp	r3, #80	; 0x50
 8001f24:	d018      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x316>
 8001f26:	2b60      	cmp	r3, #96	; 0x60
 8001f28:	d01b      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x320>
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d00f      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f2e:	e01d      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f38:	e018      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f42:	e013      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f4c:	e00e      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f56:	e009      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f60:	e004      	b.n	8001f6c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2204      	movs	r2, #4
 8001f82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f872 	bl	8002080 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c6:	e14e      	b.n	8002566 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8140 	beq.w	8002560 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d00b      	beq.n	8002300 <HAL_GPIO_Init+0x48>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f4:	2b11      	cmp	r3, #17
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b12      	cmp	r3, #18
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0xea>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d123      	bne.n	80023ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0203 	and.w	r2, r3, #3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 809a 	beq.w	8002560 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242c:	4b55      	ldr	r3, [pc, #340]	; (8002584 <HAL_GPIO_Init+0x2cc>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a54      	ldr	r2, [pc, #336]	; (8002584 <HAL_GPIO_Init+0x2cc>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b52      	ldr	r3, [pc, #328]	; (8002584 <HAL_GPIO_Init+0x2cc>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002444:	4a50      	ldr	r2, [pc, #320]	; (8002588 <HAL_GPIO_Init+0x2d0>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1e0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_GPIO_Init+0x2d4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1dc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a45      	ldr	r2, [pc, #276]	; (8002590 <HAL_GPIO_Init+0x2d8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1d8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a44      	ldr	r2, [pc, #272]	; (8002594 <HAL_GPIO_Init+0x2dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1d4>
 8002488:	2303      	movs	r3, #3
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 800248c:	2305      	movs	r3, #5
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1e2>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024aa:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_GPIO_Init+0x2d0>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024dc:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002506:	4a24      	ldr	r2, [pc, #144]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f aea9 	bne.w	80022c8 <HAL_GPIO_Init+0x10>
  }
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	48000400 	.word	0x48000400
 8002590:	48000800 	.word	0x48000800
 8002594:	48000c00 	.word	0x48000c00
 8002598:	40010400 	.word	0x40010400

0800259c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4013      	ands	r3, r2
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43d9      	mvns	r1, r3
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	400b      	ands	r3, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002606:	af00      	add	r7, sp, #0
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f000 bef4 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 816a 	beq.w	80028fe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800262a:	4bb3      	ldr	r3, [pc, #716]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002636:	4bb0      	ldr	r3, [pc, #704]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d159      	bne.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 8002642:	4bad      	ldr	r3, [pc, #692]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264e:	d152      	bne.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002664:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x82>
 800267c:	4b9e      	ldr	r3, [pc, #632]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0xae>
 8002682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002686:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800269e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026aa:	4b93      	ldr	r3, [pc, #588]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 810c 	beq.w	80028fc <HAL_RCC_OscConfig+0x2fc>
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8106 	bne.w	80028fc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f000 be86 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x110>
 8002702:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e030      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x134>
 800271a:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800272c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e01e      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x15a>
 8002740:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a69      	ldr	r2, [pc, #420]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x172>
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a66      	ldr	r2, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	495d      	ldr	r1, [pc, #372]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d059      	beq.n	8002844 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fee8 	bl	8001564 <HAL_GetTick>
 8002794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279a:	f7fe fee3 	bl	8001564 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d902      	bls.n	80027b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	f000 be29 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 80027b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_OscConfig+0x1e2>
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x20e>
 80027e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002812:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002816:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002822:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ab      	beq.n	800279a <HAL_RCC_OscConfig+0x19a>
 8002842:	e05c      	b.n	80028fe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fe8e 	bl	8001564 <HAL_GetTick>
 8002848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284e:	f7fe fe89 	bl	8001564 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d902      	bls.n	8002864 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	f000 bdcf 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002868:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002878:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d102      	bne.n	8002896 <HAL_RCC_OscConfig+0x296>
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x2c2>
 8002896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_RCC_OscConfig+0x2f8>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028ce:	fa92 f2a2 	rbit	r2, r2
 80028d2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0220 	orr.w	r2, r2, #32
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ab      	bne.n	800284e <HAL_RCC_OscConfig+0x24e>
 80028f6:	e002      	b.n	80028fe <HAL_RCC_OscConfig+0x2fe>
 80028f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 816f 	beq.w	8002bec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800290e:	4bd0      	ldr	r3, [pc, #832]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800291a:	4bcd      	ldr	r3, [pc, #820]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d16c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x400>
 8002926:	4bca      	ldr	r3, [pc, #808]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d166      	bne.n	8002a00 <HAL_RCC_OscConfig+0x400>
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002944:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0x362>
 800295c:	4bbc      	ldr	r3, [pc, #752]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e013      	b.n	800298a <HAL_RCC_OscConfig+0x38a>
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800297a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002986:	4bb2      	ldr	r3, [pc, #712]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2202      	movs	r2, #2
 800298c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002990:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800299c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x3cc>
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f000 bd1b 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	21f8      	movs	r1, #248	; 0xf8
 80029dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029e4:	fa91 f1a1 	rbit	r1, r1
 80029e8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029f0:	fab1 f181 	clz	r1, r1
 80029f4:	b2c9      	uxtb	r1, r1
 80029f6:	408b      	lsls	r3, r1
 80029f8:	4995      	ldr	r1, [pc, #596]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e0f5      	b.n	8002bec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8085 	beq.w	8002b16 <HAL_RCC_OscConfig+0x516>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fd94 	bl	8001564 <HAL_GetTick>
 8002a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fd8f 	bl	8001564 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f000 bcd5 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0x488>
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e013      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4b0>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002aa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ab6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aba:	fa92 f2a2 	rbit	r2, r2
 8002abe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ac2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0af      	beq.n	8002a42 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	21f8      	movs	r1, #248	; 0xf8
 8002af2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002afa:	fa91 f1a1 	rbit	r1, r1
 8002afe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b02:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b06:	fab1 f181 	clz	r1, r1
 8002b0a:	b2c9      	uxtb	r1, r1
 8002b0c:	408b      	lsls	r3, r1
 8002b0e:	4950      	ldr	r1, [pc, #320]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e06a      	b.n	8002bec <HAL_RCC_OscConfig+0x5ec>
 8002b16:	2301      	movs	r3, #1
 8002b18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd0f 	bl	8001564 <HAL_GetTick>
 8002b46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fd0a 	bl	8001564 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f000 bc50 	b.w	8003402 <HAL_RCC_OscConfig+0xe02>
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x592>
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e013      	b.n	8002bba <HAL_RCC_OscConfig+0x5ba>
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002baa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x650>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bc0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bc4:	fa92 f2a2 	rbit	r2, r2
 8002bc8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bcc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bd0:	fab2 f282 	clz	r2, r2
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f002 021f 	and.w	r2, r2, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1af      	bne.n	8002b4c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80da 	beq.w	8002db0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d069      	beq.n	8002cda <HAL_RCC_OscConfig+0x6da>
 8002c06:	2301      	movs	r3, #1
 8002c08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x654>)
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fc98 	bl	8001564 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fc93 	bl	8001564 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d906      	bls.n	8002c58 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e3d9      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	10908120 	.word	0x10908120
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4ba5      	ldr	r3, [pc, #660]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f1a3 	rbit	r1, r3
 8002cb0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cb4:	6019      	str	r1, [r3, #0]
  return result;
 8002cb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0b0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x63a>
 8002cd8:	e06a      	b.n	8002db0 <HAL_RCC_OscConfig+0x7b0>
 8002cda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cf0:	601a      	str	r2, [r3, #0]
  return result;
 8002cf2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cf6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fc2a 	bl	8001564 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d16:	f7fe fc25 	bl	8001564 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e36b      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002d2a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6019      	str	r1, [r3, #0]
 8002d7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f1a3 	rbit	r1, r3
 8002d88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d8c:	6019      	str	r1, [r3, #0]
  return result;
 8002d8e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1b2      	bne.n	8002d16 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8158 	beq.w	8003070 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d112      	bne.n	8002df8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11a      	bne.n	8002e3a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fba8 	bl	8001564 <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe fba3 	bl	8001564 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2e9      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ef      	beq.n	8002e1a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x852>
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e02f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x876>
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e01d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x89a>
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	e00b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8b2>
 8002e9a:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d06b      	beq.n	8002f94 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fb52 	bl	8001564 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe fb4d 	bl	8001564 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e291      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002ede:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f0c:	601a      	str	r2, [r3, #0]
  return result;
 8002f0e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d109      	bne.n	8002f3c <HAL_RCC_OscConfig+0x93c>
 8002f28:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HAL_RCC_OscConfig+0x930>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x958>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	10908120 	.word	0x10908120
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f40:	2202      	movs	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4bbb      	ldr	r3, [pc, #748]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	6011      	str	r1, [r2, #0]
 8002f60:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	fa92 f1a2 	rbit	r1, r2
 8002f6a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f6e:	6011      	str	r1, [r2, #0]
  return result;
 8002f70:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	fab2 f282 	clz	r2, r2
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f002 021f 	and.w	r2, r2, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d099      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x8c6>
 8002f92:	e063      	b.n	800305c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fe fae6 	bl	8001564 <HAL_GetTick>
 8002f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fae1 	bl	8001564 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e225      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8002fb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fba:	2202      	movs	r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fe4:	601a      	str	r2, [r3, #0]
  return result;
 8002fe6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0xa06>
 8003000:	4b90      	ldr	r3, [pc, #576]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	e00d      	b.n	8003022 <HAL_RCC_OscConfig+0xa22>
 8003006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003026:	2102      	movs	r1, #2
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fa92 f1a2 	rbit	r1, r2
 8003034:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003038:	6011      	str	r1, [r2, #0]
  return result;
 800303a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1a0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800305c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b77      	ldr	r3, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a76      	ldr	r2, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 81c2 	beq.w	8003400 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307c:	4b71      	ldr	r3, [pc, #452]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	f000 819c 	beq.w	80033c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b02      	cmp	r3, #2
 8003092:	f040 8114 	bne.w	80032be <HAL_RCC_OscConfig+0xcbe>
 8003096:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800309a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030ae:	601a      	str	r2, [r3, #0]
  return result;
 80030b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fa4a 	bl	8001564 <HAL_GetTick>
 80030d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fa45 	bl	8001564 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e18b      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 80030ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003102:	601a      	str	r2, [r3, #0]
  return result;
 8003104:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003108:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0xb24>
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0xb5c>
 8003124:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fa92 f1a2 	rbit	r1, r2
 8003170:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003174:	6011      	str	r1, [r2, #0]
  return result;
 8003176:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d19e      	bne.n	80030d6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	4925      	ldr	r1, [pc, #148]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031cc:	601a      	str	r2, [r3, #0]
  return result;
 80031ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe f9bb 	bl	8001564 <HAL_GetTick>
 80031ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f2:	e009      	b.n	8003208 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe f9b6 	bl	8001564 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0fc      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8003208:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800320c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003220:	601a      	str	r2, [r3, #0]
  return result;
 8003222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003226:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0xc48>
 800323c:	4b01      	ldr	r3, [pc, #4]	; (8003244 <HAL_RCC_OscConfig+0xc44>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e01e      	b.n	8003280 <HAL_RCC_OscConfig+0xc80>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800324c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003288:	6011      	str	r1, [r2, #0]
 800328a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	fa92 f1a2 	rbit	r1, r2
 8003294:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003298:	6011      	str	r1, [r2, #0]
  return result;
 800329a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	fab2 f282 	clz	r2, r2
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f002 021f 	and.w	r2, r2, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f202 	lsl.w	r2, r1, r2
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d09b      	beq.n	80031f4 <HAL_RCC_OscConfig+0xbf4>
 80032bc:	e0a0      	b.n	8003400 <HAL_RCC_OscConfig+0xe00>
 80032be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d6:	601a      	str	r2, [r3, #0]
  return result;
 80032d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f936 	bl	8001564 <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe f931 	bl	8001564 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e077      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fa93 f2a3 	rbit	r2, r3
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003330:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0xd4c>
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e01b      	b.n	8003384 <HAL_RCC_OscConfig+0xd84>
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f107 0318 	add.w	r3, r7, #24
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f107 0210 	add.w	r2, r7, #16
 8003388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	f107 0210 	add.w	r2, r7, #16
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	fa92 f1a2 	rbit	r1, r2
 8003398:	f107 020c 	add.w	r2, r7, #12
 800339c:	6011      	str	r1, [r2, #0]
  return result;
 800339e:	f107 020c 	add.w	r2, r7, #12
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f002 021f 	and.w	r2, r2, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d19e      	bne.n	80032fe <HAL_RCC_OscConfig+0xcfe>
 80033c0:	e01e      	b.n	8003400 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e018      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_RCC_OscConfig+0xe0c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b09e      	sub	sp, #120	; 0x78
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e162      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b90      	ldr	r3, [pc, #576]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	498b      	ldr	r1, [pc, #556]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e14a      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	497f      	ldr	r1, [pc, #508]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80dc 	beq.w	800363c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d13c      	bne.n	8003506 <HAL_RCC_ClockConfig+0xf6>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xa6>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	e00f      	b.n	80034d6 <HAL_RCC_ClockConfig+0xc6>
 80034b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
 80034c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034da:	65ba      	str	r2, [r7, #88]	; 0x58
 80034dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034de:	fa92 f2a2 	rbit	r2, r2
 80034e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034e6:	fab2 f282 	clz	r2, r2
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f042 0220 	orr.w	r2, r2, #32
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f002 021f 	and.w	r2, r2, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f202 	lsl.w	r2, r1, r2
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d17b      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0f3      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d13c      	bne.n	8003588 <HAL_RCC_ClockConfig+0x178>
 800350e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_RCC_ClockConfig+0x128>
 8003532:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e00f      	b.n	8003558 <HAL_RCC_ClockConfig+0x148>
 8003538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
 8003546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355c:	63ba      	str	r2, [r7, #56]	; 0x38
 800355e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0220 	orr.w	r2, r2, #32
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d13a      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b2      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
 8003588:	2302      	movs	r3, #2
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x1a0>
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	e00d      	b.n	80035cc <HAL_RCC_ClockConfig+0x1bc>
 80035b0:	2302      	movs	r3, #2
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	2302      	movs	r3, #2
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2202      	movs	r2, #2
 80035ce:	61ba      	str	r2, [r7, #24]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	fa92 f2a2 	rbit	r2, r2
 80035d6:	617a      	str	r2, [r7, #20]
  return result;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0220 	orr.w	r2, r2, #32
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e079      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	491a      	ldr	r1, [pc, #104]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800360c:	f7fd ffaa 	bl	8001564 <HAL_GetTick>
 8003610:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fd ffa6 	bl	8001564 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e061      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_ClockConfig+0x260>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d214      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0207 	bic.w	r2, r3, #7
 8003652:	4906      	ldr	r1, [pc, #24]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_RCC_ClockConfig+0x25c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e040      	b.n	80036ee <HAL_RCC_ClockConfig+0x2de>
 800366c:	40022000 	.word	0x40022000
 8003670:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	491a      	ldr	r1, [pc, #104]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4912      	ldr	r1, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b2:	f000 f829 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_ClockConfig+0x2e8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	22f0      	movs	r2, #240	; 0xf0
 80036c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fa92 f2a2 	rbit	r2, r2
 80036ca:	60fa      	str	r2, [r7, #12]
  return result;
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	40d3      	lsrs	r3, r2
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x2ec>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	fa21 f303 	lsr.w	r3, r1, r3
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_ClockConfig+0x2f0>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_RCC_ClockConfig+0x2f4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fef8 	bl	80014dc <HAL_InitTick>
  
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3778      	adds	r7, #120	; 0x78
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08005e10 	.word	0x08005e10
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b08b      	sub	sp, #44	; 0x2c
 800370c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b04      	cmp	r3, #4
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x30>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x36>
 8003736:	e03c      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800373a:	623b      	str	r3, [r7, #32]
      break;
 800373c:	e03c      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003744:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003748:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	607a      	str	r2, [r7, #4]
  return result;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	40d3      	lsrs	r3, r2
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	220f      	movs	r2, #15
 800376c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	fa92 f2a2 	rbit	r2, r2
 8003774:	60fa      	str	r2, [r7, #12]
  return result;
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	40d3      	lsrs	r3, r2
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	e004      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	623b      	str	r3, [r7, #32]
      break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b4:	623b      	str	r3, [r7, #32]
      break;
 80037b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	372c      	adds	r7, #44	; 0x2c
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	007a1200 	.word	0x007a1200
 80037d0:	08005e28 	.word	0x08005e28
 80037d4:	08005e38 	.word	0x08005e38
 80037d8:	003d0900 	.word	0x003d0900

080037dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037fa:	f7ff ffef 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fe:	4601      	mov	r1, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003808:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800380c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	fa92 f2a2 	rbit	r2, r2
 8003814:	603a      	str	r2, [r7, #0]
  return result;
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	fab2 f282 	clz	r2, r2
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	40d3      	lsrs	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	08005e20 	.word	0x08005e20

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800383e:	f7ff ffcd 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800384c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003850:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	fa92 f2a2 	rbit	r2, r2
 8003858:	603a      	str	r2, [r7, #0]
  return result;
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	40d3      	lsrs	r3, r2
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08005e20 	.word	0x08005e20

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b092      	sub	sp, #72	; 0x48
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80cd 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a0:	4b86      	ldr	r3, [pc, #536]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10e      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b83      	ldr	r3, [pc, #524]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4a82      	ldr	r2, [pc, #520]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	61d3      	str	r3, [r2, #28]
 80038b8:	4b80      	ldr	r3, [pc, #512]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ca:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d118      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d6:	4b7a      	ldr	r3, [pc, #488]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e2:	f7fd fe3f 	bl	8001564 <HAL_GetTick>
 80038e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fd fe3b 	bl	8001564 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0db      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	4b70      	ldr	r3, [pc, #448]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003922:	429a      	cmp	r2, r3
 8003924:	d076      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003978:	4a50      	ldr	r2, [pc, #320]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d045      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd fdec 	bl	8001564 <HAL_GetTick>
 800398c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd fde8 	bl	8001564 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e086      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039a6:	2302      	movs	r3, #2
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	2302      	movs	r3, #2
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	61fb      	str	r3, [r7, #28]
  return result;
 80039be:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d102      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	e007      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2202      	movs	r2, #2
 80039ec:	613a      	str	r2, [r7, #16]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	60fa      	str	r2, [r7, #12]
  return result;
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	fab2 f282 	clz	r2, r2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f002 021f 	and.w	r2, r2, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0bd      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4926      	ldr	r1, [pc, #152]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0210 	bic.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4912      	ldr	r1, [pc, #72]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	490b      	ldr	r1, [pc, #44]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3748      	adds	r7, #72	; 0x48
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	10908100 	.word	0x10908100

08003ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e049      	b.n	8003b6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fbb4 	bl	800125c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 fa32 	bl	8003f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start+0x24>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e03c      	b.n	8003c16 <HAL_TIM_PWM_Start+0x9e>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d109      	bne.n	8003bb6 <HAL_TIM_PWM_Start+0x3e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e02f      	b.n	8003c16 <HAL_TIM_PWM_Start+0x9e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d109      	bne.n	8003bd0 <HAL_TIM_PWM_Start+0x58>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e022      	b.n	8003c16 <HAL_TIM_PWM_Start+0x9e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d109      	bne.n	8003bea <HAL_TIM_PWM_Start+0x72>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	e015      	b.n	8003c16 <HAL_TIM_PWM_Start+0x9e>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x8c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e008      	b.n	8003c16 <HAL_TIM_PWM_Start+0x9e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e088      	b.n	8003d30 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <HAL_TIM_PWM_Start+0xb6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2c:	e023      	b.n	8003c76 <HAL_TIM_PWM_Start+0xfe>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Start+0xc6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	e01b      	b.n	8003c76 <HAL_TIM_PWM_Start+0xfe>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start+0xd6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4c:	e013      	b.n	8003c76 <HAL_TIM_PWM_Start+0xfe>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start+0xe6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c5c:	e00b      	b.n	8003c76 <HAL_TIM_PWM_Start+0xfe>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_PWM_Start+0xf6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	e003      	b.n	8003c76 <HAL_TIM_PWM_Start+0xfe>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fc94 	bl	80045ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2b      	ldr	r2, [pc, #172]	; (8003d38 <HAL_TIM_PWM_Start+0x1c0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_PWM_Start+0x134>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <HAL_TIM_PWM_Start+0x1c4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_PWM_Start+0x134>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <HAL_TIM_PWM_Start+0x1c8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_PWM_Start+0x134>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <HAL_TIM_PWM_Start+0x1cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0x138>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x13a>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_TIM_PWM_Start+0x1c0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIM_PWM_Start+0x176>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d009      	beq.n	8003cee <HAL_TIM_PWM_Start+0x176>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <HAL_TIM_PWM_Start+0x1d0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIM_PWM_Start+0x176>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_TIM_PWM_Start+0x1c4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d115      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_TIM_PWM_Start+0x1d4>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d015      	beq.n	8003d2c <HAL_TIM_PWM_Start+0x1b4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d011      	beq.n	8003d2c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d18:	e008      	b.n	8003d2c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	00010007 	.word	0x00010007

08003d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0fd      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b14      	cmp	r3, #20
 8003d76:	f200 80f0 	bhi.w	8003f5a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003f5b 	.word	0x08003f5b
 8003d88:	08003f5b 	.word	0x08003f5b
 8003d8c:	08003f5b 	.word	0x08003f5b
 8003d90:	08003e15 	.word	0x08003e15
 8003d94:	08003f5b 	.word	0x08003f5b
 8003d98:	08003f5b 	.word	0x08003f5b
 8003d9c:	08003f5b 	.word	0x08003f5b
 8003da0:	08003e57 	.word	0x08003e57
 8003da4:	08003f5b 	.word	0x08003f5b
 8003da8:	08003f5b 	.word	0x08003f5b
 8003dac:	08003f5b 	.word	0x08003f5b
 8003db0:	08003e97 	.word	0x08003e97
 8003db4:	08003f5b 	.word	0x08003f5b
 8003db8:	08003f5b 	.word	0x08003f5b
 8003dbc:	08003f5b 	.word	0x08003f5b
 8003dc0:	08003ed9 	.word	0x08003ed9
 8003dc4:	08003f5b 	.word	0x08003f5b
 8003dc8:	08003f5b 	.word	0x08003f5b
 8003dcc:	08003f5b 	.word	0x08003f5b
 8003dd0:	08003f19 	.word	0x08003f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f940 	bl	8004060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0204 	bic.w	r2, r2, #4
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
      break;
 8003e12:	e0a3      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f9a6 	bl	800416c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6999      	ldr	r1, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	619a      	str	r2, [r3, #24]
      break;
 8003e54:	e082      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa05 	bl	800426c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0208 	orr.w	r2, r2, #8
 8003e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
      break;
 8003e94:	e062      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fa63 	bl	8004368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
      break;
 8003ed6:	e041      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 faa6 	bl	8004430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0204 	bic.w	r2, r2, #4
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f16:	e021      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fae4 	bl	80044ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003f5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a32      	ldr	r2, [pc, #200]	; (800404c <TIM_Base_SetConfig+0xdc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_Base_SetConfig+0x28>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0x28>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <TIM_Base_SetConfig+0xe0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d108      	bne.n	8003faa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <TIM_Base_SetConfig+0xdc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <TIM_Base_SetConfig+0x6a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d00f      	beq.n	8003fda <TIM_Base_SetConfig+0x6a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_Base_SetConfig+0x6a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_Base_SetConfig+0x6a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <TIM_Base_SetConfig+0xe8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_Base_SetConfig+0x6a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a21      	ldr	r2, [pc, #132]	; (800405c <TIM_Base_SetConfig+0xec>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d108      	bne.n	8003fec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0e      	ldr	r2, [pc, #56]	; (800404c <TIM_Base_SetConfig+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0xc0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <TIM_Base_SetConfig+0xe4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0xc0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <TIM_Base_SetConfig+0xe8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0xc0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0c      	ldr	r2, [pc, #48]	; (800405c <TIM_Base_SetConfig+0xec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d103      	bne.n	8004038 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	615a      	str	r2, [r3, #20]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0302 	bic.w	r3, r3, #2
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <TIM_OC1_SetConfig+0xfc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_OC1_SetConfig+0x78>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a27      	ldr	r2, [pc, #156]	; (8004160 <TIM_OC1_SetConfig+0x100>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_OC1_SetConfig+0x78>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a26      	ldr	r2, [pc, #152]	; (8004164 <TIM_OC1_SetConfig+0x104>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_OC1_SetConfig+0x78>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a25      	ldr	r2, [pc, #148]	; (8004168 <TIM_OC1_SetConfig+0x108>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10c      	bne.n	80040f2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0308 	bic.w	r3, r3, #8
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a19      	ldr	r2, [pc, #100]	; (800415c <TIM_OC1_SetConfig+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_OC1_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <TIM_OC1_SetConfig+0x100>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_OC1_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC1_SetConfig+0x104>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_OC1_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC1_SetConfig+0x108>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800

0800416c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0320 	bic.w	r3, r3, #32
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a24      	ldr	r2, [pc, #144]	; (800425c <TIM_OC2_SetConfig+0xf0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <TIM_OC2_SetConfig+0xf0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00b      	beq.n	800420c <TIM_OC2_SetConfig+0xa0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <TIM_OC2_SetConfig+0xf4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_OC2_SetConfig+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a19      	ldr	r2, [pc, #100]	; (8004264 <TIM_OC2_SetConfig+0xf8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC2_SetConfig+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <TIM_OC2_SetConfig+0xfc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d113      	bne.n	8004234 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004212:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800421a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800

0800426c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <TIM_OC3_SetConfig+0xec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10d      	bne.n	80042ea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <TIM_OC3_SetConfig+0xec>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_OC3_SetConfig+0x9e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a19      	ldr	r2, [pc, #100]	; (800435c <TIM_OC3_SetConfig+0xf0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_OC3_SetConfig+0x9e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a18      	ldr	r2, [pc, #96]	; (8004360 <TIM_OC3_SetConfig+0xf4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0x9e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <TIM_OC3_SetConfig+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <TIM_OC4_SetConfig+0xb8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_OC4_SetConfig+0x7c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <TIM_OC4_SetConfig+0xbc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_OC4_SetConfig+0x7c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <TIM_OC4_SetConfig+0xc0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC4_SetConfig+0x7c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <TIM_OC4_SetConfig+0xc4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <TIM_OC5_SetConfig+0xac>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00b      	beq.n	80044a2 <TIM_OC5_SetConfig+0x72>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <TIM_OC5_SetConfig+0xb0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_OC5_SetConfig+0x72>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <TIM_OC5_SetConfig+0xb4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC5_SetConfig+0x72>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <TIM_OC5_SetConfig+0xb8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d109      	bne.n	80044b6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	051b      	lsls	r3, r3, #20
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a16      	ldr	r2, [pc, #88]	; (800459c <TIM_OC6_SetConfig+0xb0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_OC6_SetConfig+0x74>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <TIM_OC6_SetConfig+0xb4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_OC6_SetConfig+0x74>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <TIM_OC6_SetConfig+0xb8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC6_SetConfig+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <TIM_OC6_SetConfig+0xbc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d109      	bne.n	8004574 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2201      	movs	r2, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	401a      	ands	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800460c:	2302      	movs	r3, #2
 800460e:	e054      	b.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004640:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d009      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10c      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40014000 	.word	0x40014000

080046d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e040      	b.n	8004768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fe6c 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f992 	bl	8004a3c <UART_SetConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e022      	b.n	8004768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fabe 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fb45 	bl	8004df0 <UART_CheckIdleState>
 8004766:	4603      	mov	r3, r0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004784:	2b20      	cmp	r3, #32
 8004786:	f040 8082 	bne.w	800488e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_UART_Transmit+0x26>
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07a      	b.n	8004890 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UART_Transmit+0x38>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e073      	b.n	8004890 <HAL_UART_Transmit+0x120>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2221      	movs	r2, #33	; 0x21
 80047bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047be:	f7fc fed1 	bl	8001564 <HAL_GetTick>
 80047c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d108      	bne.n	80047f0 <HAL_UART_Transmit+0x80>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	e003      	b.n	80047f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004800:	e02d      	b.n	800485e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fb38 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e039      	b.n	8004890 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482e:	b292      	uxth	r2, r2
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e008      	b.n	800484c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b292      	uxth	r2, r2
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3301      	adds	r3, #1
 800484a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1cb      	bne.n	8004802 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fb04 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e005      	b.n	8004890 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	f040 80bf 	bne.w	8004a30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_Receive+0x26>
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0b7      	b.n	8004a32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_UART_Receive+0x38>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0b0      	b.n	8004a32 <HAL_UART_Receive+0x19a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2222      	movs	r2, #34	; 0x22
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ec:	f7fc fe3a 	bl	8001564 <HAL_GetTick>
 80048f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	d10e      	bne.n	800492a <HAL_UART_Receive+0x92>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_UART_Receive+0x88>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f240 12ff 	movw	r2, #511	; 0x1ff
 800491a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800491e:	e02d      	b.n	800497c <HAL_UART_Receive+0xe4>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	22ff      	movs	r2, #255	; 0xff
 8004924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004928:	e028      	b.n	800497c <HAL_UART_Receive+0xe4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_UART_Receive+0xb6>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Receive+0xac>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004942:	e01b      	b.n	800497c <HAL_UART_Receive+0xe4>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	227f      	movs	r2, #127	; 0x7f
 8004948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800494c:	e016      	b.n	800497c <HAL_UART_Receive+0xe4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004956:	d10d      	bne.n	8004974 <HAL_UART_Receive+0xdc>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_UART_Receive+0xd2>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	227f      	movs	r2, #127	; 0x7f
 8004964:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004968:	e008      	b.n	800497c <HAL_UART_Receive+0xe4>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	223f      	movs	r2, #63	; 0x3f
 800496e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004972:	e003      	b.n	800497c <HAL_UART_Receive+0xe4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004982:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498c:	d108      	bne.n	80049a0 <HAL_UART_Receive+0x108>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e003      	b.n	80049a8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049b0:	e033      	b.n	8004a1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2120      	movs	r1, #32
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fa60 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e032      	b.n	8004a32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10c      	bne.n	80049ec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049d8:	b29a      	uxth	r2, r3
 80049da:	8a7b      	ldrh	r3, [r7, #18]
 80049dc:	4013      	ands	r3, r2
 80049de:	b29a      	uxth	r2, r3
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3302      	adds	r3, #2
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e00d      	b.n	8004a08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	8a7b      	ldrh	r3, [r7, #18]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4013      	ands	r3, r2
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1c5      	bne.n	80049b2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <UART_SetConfig+0x258>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a79      	ldr	r2, [pc, #484]	; (8004c98 <UART_SetConfig+0x25c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d121      	bne.n	8004afc <UART_SetConfig+0xc0>
 8004ab8:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <UART_SetConfig+0x260>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d817      	bhi.n	8004af4 <UART_SetConfig+0xb8>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x90>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004aef 	.word	0x08004aef
 8004ad8:	08004ae3 	.word	0x08004ae3
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e01e      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e01b      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e018      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004aee:	2308      	movs	r3, #8
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e015      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	bf00      	nop
 8004afa:	e011      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a67      	ldr	r2, [pc, #412]	; (8004ca0 <UART_SetConfig+0x264>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d102      	bne.n	8004b0c <UART_SetConfig+0xd0>
 8004b06:	2300      	movs	r3, #0
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e009      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a64      	ldr	r2, [pc, #400]	; (8004ca4 <UART_SetConfig+0x268>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d102      	bne.n	8004b1c <UART_SetConfig+0xe0>
 8004b16:	2300      	movs	r3, #0
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e001      	b.n	8004b20 <UART_SetConfig+0xe4>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b28:	d15c      	bne.n	8004be4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004b2a:	7ffb      	ldrb	r3, [r7, #31]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d828      	bhi.n	8004b82 <UART_SetConfig+0x146>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0xfc>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b83 	.word	0x08004b83
 8004b48:	08004b73 	.word	0x08004b73
 8004b4c:	08004b83 	.word	0x08004b83
 8004b50:	08004b83 	.word	0x08004b83
 8004b54:	08004b83 	.word	0x08004b83
 8004b58:	08004b7b 	.word	0x08004b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fe4a 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8004b60:	61b8      	str	r0, [r7, #24]
        break;
 8004b62:	e013      	b.n	8004b8c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7fe fe68 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8004b68:	61b8      	str	r0, [r7, #24]
        break;
 8004b6a:	e00f      	b.n	8004b8c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ca8 <UART_SetConfig+0x26c>)
 8004b6e:	61bb      	str	r3, [r7, #24]
        break;
 8004b70:	e00c      	b.n	8004b8c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b72:	f7fe fdc9 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 8004b76:	61b8      	str	r0, [r7, #24]
        break;
 8004b78:	e008      	b.n	8004b8c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	61bb      	str	r3, [r7, #24]
        break;
 8004b80:	e004      	b.n	8004b8c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	77bb      	strb	r3, [r7, #30]
        break;
 8004b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d074      	beq.n	8004c7c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	005a      	lsls	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	441a      	add	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d916      	bls.n	8004bde <UART_SetConfig+0x1a2>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb6:	d212      	bcs.n	8004bde <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f023 030f 	bic.w	r3, r3, #15
 8004bc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	89fb      	ldrh	r3, [r7, #14]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	60da      	str	r2, [r3, #12]
 8004bdc:	e04e      	b.n	8004c7c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77bb      	strb	r3, [r7, #30]
 8004be2:	e04b      	b.n	8004c7c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d827      	bhi.n	8004c3a <UART_SetConfig+0x1fe>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0x1b4>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c3b 	.word	0x08004c3b
 8004c00:	08004c2b 	.word	0x08004c2b
 8004c04:	08004c3b 	.word	0x08004c3b
 8004c08:	08004c3b 	.word	0x08004c3b
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c33 	.word	0x08004c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c14:	f7fe fdee 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8004c18:	61b8      	str	r0, [r7, #24]
        break;
 8004c1a:	e013      	b.n	8004c44 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7fe fe0c 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8004c20:	61b8      	str	r0, [r7, #24]
        break;
 8004c22:	e00f      	b.n	8004c44 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <UART_SetConfig+0x26c>)
 8004c26:	61bb      	str	r3, [r7, #24]
        break;
 8004c28:	e00c      	b.n	8004c44 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fe fd6d 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 8004c2e:	61b8      	str	r0, [r7, #24]
        break;
 8004c30:	e008      	b.n	8004c44 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e004      	b.n	8004c44 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	77bb      	strb	r3, [r7, #30]
        break;
 8004c42:	bf00      	nop
    }

    if (pclk != 0U)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d018      	beq.n	8004c7c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	085a      	lsrs	r2, r3, #1
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	441a      	add	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d908      	bls.n	8004c78 <UART_SetConfig+0x23c>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d204      	bcs.n	8004c78 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e001      	b.n	8004c7c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c88:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	efff69f3 	.word	0xefff69f3
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	40004800 	.word	0x40004800
 8004ca8:	007a1200 	.word	0x007a1200

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004daa:	d10a      	bne.n	8004dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e00:	f7fc fbb0 	bl	8001564 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10e      	bne.n	8004e32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f82d 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e023      	b.n	8004e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d10e      	bne.n	8004e5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f817 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e00d      	b.n	8004e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	e05e      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9a:	d05a      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7fc fb62 	bl	8001564 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11b      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e043      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02c      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f06:	d124      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e00f      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d091      	beq.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZdlPvj>:
 8004f7a:	f000 b800 	b.w	8004f7e <_ZdlPv>

08004f7e <_ZdlPv>:
 8004f7e:	f000 b82b 	b.w	8004fd8 <free>
	...

08004f84 <__errno>:
 8004f84:	4b01      	ldr	r3, [pc, #4]	; (8004f8c <__errno+0x8>)
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <__libc_init_array>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4e0d      	ldr	r6, [pc, #52]	; (8004fc8 <__libc_init_array+0x38>)
 8004f94:	4c0d      	ldr	r4, [pc, #52]	; (8004fcc <__libc_init_array+0x3c>)
 8004f96:	1ba4      	subs	r4, r4, r6
 8004f98:	10a4      	asrs	r4, r4, #2
 8004f9a:	2500      	movs	r5, #0
 8004f9c:	42a5      	cmp	r5, r4
 8004f9e:	d109      	bne.n	8004fb4 <__libc_init_array+0x24>
 8004fa0:	4e0b      	ldr	r6, [pc, #44]	; (8004fd0 <__libc_init_array+0x40>)
 8004fa2:	4c0c      	ldr	r4, [pc, #48]	; (8004fd4 <__libc_init_array+0x44>)
 8004fa4:	f000 ff0c 	bl	8005dc0 <_init>
 8004fa8:	1ba4      	subs	r4, r4, r6
 8004faa:	10a4      	asrs	r4, r4, #2
 8004fac:	2500      	movs	r5, #0
 8004fae:	42a5      	cmp	r5, r4
 8004fb0:	d105      	bne.n	8004fbe <__libc_init_array+0x2e>
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fb8:	4798      	blx	r3
 8004fba:	3501      	adds	r5, #1
 8004fbc:	e7ee      	b.n	8004f9c <__libc_init_array+0xc>
 8004fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fc2:	4798      	blx	r3
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7f2      	b.n	8004fae <__libc_init_array+0x1e>
 8004fc8:	08005ee0 	.word	0x08005ee0
 8004fcc:	08005ee0 	.word	0x08005ee0
 8004fd0:	08005ee0 	.word	0x08005ee0
 8004fd4:	08005ee4 	.word	0x08005ee4

08004fd8 <free>:
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <free+0xc>)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f000 b80b 	b.w	8004ff8 <_free_r>
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c

08004fe8 <memset>:
 8004fe8:	4402      	add	r2, r0
 8004fea:	4603      	mov	r3, r0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <memset+0xa>
 8004ff0:	4770      	bx	lr
 8004ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff6:	e7f9      	b.n	8004fec <memset+0x4>

08004ff8 <_free_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d045      	beq.n	800508c <_free_r+0x94>
 8005000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005004:	1f0c      	subs	r4, r1, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfb8      	it	lt
 800500a:	18e4      	addlt	r4, r4, r3
 800500c:	f000 f98e 	bl	800532c <__malloc_lock>
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <_free_r+0x98>)
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	4610      	mov	r0, r2
 8005016:	b933      	cbnz	r3, 8005026 <_free_r+0x2e>
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6014      	str	r4, [r2, #0]
 800501c:	4628      	mov	r0, r5
 800501e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005022:	f000 b984 	b.w	800532e <__malloc_unlock>
 8005026:	42a3      	cmp	r3, r4
 8005028:	d90c      	bls.n	8005044 <_free_r+0x4c>
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	1862      	adds	r2, r4, r1
 800502e:	4293      	cmp	r3, r2
 8005030:	bf04      	itt	eq
 8005032:	681a      	ldreq	r2, [r3, #0]
 8005034:	685b      	ldreq	r3, [r3, #4]
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	bf04      	itt	eq
 800503a:	1852      	addeq	r2, r2, r1
 800503c:	6022      	streq	r2, [r4, #0]
 800503e:	6004      	str	r4, [r0, #0]
 8005040:	e7ec      	b.n	800501c <_free_r+0x24>
 8005042:	4613      	mov	r3, r2
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	b10a      	cbz	r2, 800504c <_free_r+0x54>
 8005048:	42a2      	cmp	r2, r4
 800504a:	d9fa      	bls.n	8005042 <_free_r+0x4a>
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	1858      	adds	r0, r3, r1
 8005050:	42a0      	cmp	r0, r4
 8005052:	d10b      	bne.n	800506c <_free_r+0x74>
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	4401      	add	r1, r0
 8005058:	1858      	adds	r0, r3, r1
 800505a:	4282      	cmp	r2, r0
 800505c:	6019      	str	r1, [r3, #0]
 800505e:	d1dd      	bne.n	800501c <_free_r+0x24>
 8005060:	6810      	ldr	r0, [r2, #0]
 8005062:	6852      	ldr	r2, [r2, #4]
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	4401      	add	r1, r0
 8005068:	6019      	str	r1, [r3, #0]
 800506a:	e7d7      	b.n	800501c <_free_r+0x24>
 800506c:	d902      	bls.n	8005074 <_free_r+0x7c>
 800506e:	230c      	movs	r3, #12
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	e7d3      	b.n	800501c <_free_r+0x24>
 8005074:	6820      	ldr	r0, [r4, #0]
 8005076:	1821      	adds	r1, r4, r0
 8005078:	428a      	cmp	r2, r1
 800507a:	bf04      	itt	eq
 800507c:	6811      	ldreq	r1, [r2, #0]
 800507e:	6852      	ldreq	r2, [r2, #4]
 8005080:	6062      	str	r2, [r4, #4]
 8005082:	bf04      	itt	eq
 8005084:	1809      	addeq	r1, r1, r0
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	605c      	str	r4, [r3, #4]
 800508a:	e7c7      	b.n	800501c <_free_r+0x24>
 800508c:	bd38      	pop	{r3, r4, r5, pc}
 800508e:	bf00      	nop
 8005090:	200000bc 	.word	0x200000bc

08005094 <_malloc_r>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	1ccd      	adds	r5, r1, #3
 8005098:	f025 0503 	bic.w	r5, r5, #3
 800509c:	3508      	adds	r5, #8
 800509e:	2d0c      	cmp	r5, #12
 80050a0:	bf38      	it	cc
 80050a2:	250c      	movcc	r5, #12
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	4606      	mov	r6, r0
 80050a8:	db01      	blt.n	80050ae <_malloc_r+0x1a>
 80050aa:	42a9      	cmp	r1, r5
 80050ac:	d903      	bls.n	80050b6 <_malloc_r+0x22>
 80050ae:	230c      	movs	r3, #12
 80050b0:	6033      	str	r3, [r6, #0]
 80050b2:	2000      	movs	r0, #0
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	f000 f939 	bl	800532c <__malloc_lock>
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <_malloc_r+0xac>)
 80050bc:	6814      	ldr	r4, [r2, #0]
 80050be:	4621      	mov	r1, r4
 80050c0:	b991      	cbnz	r1, 80050e8 <_malloc_r+0x54>
 80050c2:	4c20      	ldr	r4, [pc, #128]	; (8005144 <_malloc_r+0xb0>)
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	b91b      	cbnz	r3, 80050d0 <_malloc_r+0x3c>
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f855 	bl	8005178 <_sbrk_r>
 80050ce:	6020      	str	r0, [r4, #0]
 80050d0:	4629      	mov	r1, r5
 80050d2:	4630      	mov	r0, r6
 80050d4:	f000 f850 	bl	8005178 <_sbrk_r>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d124      	bne.n	8005126 <_malloc_r+0x92>
 80050dc:	230c      	movs	r3, #12
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f924 	bl	800532e <__malloc_unlock>
 80050e6:	e7e4      	b.n	80050b2 <_malloc_r+0x1e>
 80050e8:	680b      	ldr	r3, [r1, #0]
 80050ea:	1b5b      	subs	r3, r3, r5
 80050ec:	d418      	bmi.n	8005120 <_malloc_r+0x8c>
 80050ee:	2b0b      	cmp	r3, #11
 80050f0:	d90f      	bls.n	8005112 <_malloc_r+0x7e>
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	50cd      	str	r5, [r1, r3]
 80050f6:	18cc      	adds	r4, r1, r3
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f918 	bl	800532e <__malloc_unlock>
 80050fe:	f104 000b 	add.w	r0, r4, #11
 8005102:	1d23      	adds	r3, r4, #4
 8005104:	f020 0007 	bic.w	r0, r0, #7
 8005108:	1ac3      	subs	r3, r0, r3
 800510a:	d0d3      	beq.n	80050b4 <_malloc_r+0x20>
 800510c:	425a      	negs	r2, r3
 800510e:	50e2      	str	r2, [r4, r3]
 8005110:	e7d0      	b.n	80050b4 <_malloc_r+0x20>
 8005112:	428c      	cmp	r4, r1
 8005114:	684b      	ldr	r3, [r1, #4]
 8005116:	bf16      	itet	ne
 8005118:	6063      	strne	r3, [r4, #4]
 800511a:	6013      	streq	r3, [r2, #0]
 800511c:	460c      	movne	r4, r1
 800511e:	e7eb      	b.n	80050f8 <_malloc_r+0x64>
 8005120:	460c      	mov	r4, r1
 8005122:	6849      	ldr	r1, [r1, #4]
 8005124:	e7cc      	b.n	80050c0 <_malloc_r+0x2c>
 8005126:	1cc4      	adds	r4, r0, #3
 8005128:	f024 0403 	bic.w	r4, r4, #3
 800512c:	42a0      	cmp	r0, r4
 800512e:	d005      	beq.n	800513c <_malloc_r+0xa8>
 8005130:	1a21      	subs	r1, r4, r0
 8005132:	4630      	mov	r0, r6
 8005134:	f000 f820 	bl	8005178 <_sbrk_r>
 8005138:	3001      	adds	r0, #1
 800513a:	d0cf      	beq.n	80050dc <_malloc_r+0x48>
 800513c:	6025      	str	r5, [r4, #0]
 800513e:	e7db      	b.n	80050f8 <_malloc_r+0x64>
 8005140:	200000bc 	.word	0x200000bc
 8005144:	200000c0 	.word	0x200000c0

08005148 <iprintf>:
 8005148:	b40f      	push	{r0, r1, r2, r3}
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <iprintf+0x2c>)
 800514c:	b513      	push	{r0, r1, r4, lr}
 800514e:	681c      	ldr	r4, [r3, #0]
 8005150:	b124      	cbz	r4, 800515c <iprintf+0x14>
 8005152:	69a3      	ldr	r3, [r4, #24]
 8005154:	b913      	cbnz	r3, 800515c <iprintf+0x14>
 8005156:	4620      	mov	r0, r4
 8005158:	f000 f85e 	bl	8005218 <__sinit>
 800515c:	ab05      	add	r3, sp, #20
 800515e:	9a04      	ldr	r2, [sp, #16]
 8005160:	68a1      	ldr	r1, [r4, #8]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	4620      	mov	r0, r4
 8005166:	f000 f90d 	bl	8005384 <_vfiprintf_r>
 800516a:	b002      	add	sp, #8
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	b004      	add	sp, #16
 8005172:	4770      	bx	lr
 8005174:	2000000c 	.word	0x2000000c

08005178 <_sbrk_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4c06      	ldr	r4, [pc, #24]	; (8005194 <_sbrk_r+0x1c>)
 800517c:	2300      	movs	r3, #0
 800517e:	4605      	mov	r5, r0
 8005180:	4608      	mov	r0, r1
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	f7fb ff4e 	bl	8001024 <_sbrk>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_sbrk_r+0x1a>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	b103      	cbz	r3, 8005192 <_sbrk_r+0x1a>
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	2000020c 	.word	0x2000020c

08005198 <std>:
 8005198:	2300      	movs	r3, #0
 800519a:	b510      	push	{r4, lr}
 800519c:	4604      	mov	r4, r0
 800519e:	e9c0 3300 	strd	r3, r3, [r0]
 80051a2:	6083      	str	r3, [r0, #8]
 80051a4:	8181      	strh	r1, [r0, #12]
 80051a6:	6643      	str	r3, [r0, #100]	; 0x64
 80051a8:	81c2      	strh	r2, [r0, #14]
 80051aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ae:	6183      	str	r3, [r0, #24]
 80051b0:	4619      	mov	r1, r3
 80051b2:	2208      	movs	r2, #8
 80051b4:	305c      	adds	r0, #92	; 0x5c
 80051b6:	f7ff ff17 	bl	8004fe8 <memset>
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std+0x38>)
 80051bc:	6263      	str	r3, [r4, #36]	; 0x24
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <std+0x3c>)
 80051c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <std+0x40>)
 80051c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <std+0x44>)
 80051c8:	6224      	str	r4, [r4, #32]
 80051ca:	6323      	str	r3, [r4, #48]	; 0x30
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	080058c1 	.word	0x080058c1
 80051d4:	080058e3 	.word	0x080058e3
 80051d8:	0800591b 	.word	0x0800591b
 80051dc:	0800593f 	.word	0x0800593f

080051e0 <_cleanup_r>:
 80051e0:	4901      	ldr	r1, [pc, #4]	; (80051e8 <_cleanup_r+0x8>)
 80051e2:	f000 b885 	b.w	80052f0 <_fwalk_reent>
 80051e6:	bf00      	nop
 80051e8:	08005c19 	.word	0x08005c19

080051ec <__sfmoreglue>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	1e4a      	subs	r2, r1, #1
 80051f0:	2568      	movs	r5, #104	; 0x68
 80051f2:	4355      	muls	r5, r2
 80051f4:	460e      	mov	r6, r1
 80051f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051fa:	f7ff ff4b 	bl	8005094 <_malloc_r>
 80051fe:	4604      	mov	r4, r0
 8005200:	b140      	cbz	r0, 8005214 <__sfmoreglue+0x28>
 8005202:	2100      	movs	r1, #0
 8005204:	e9c0 1600 	strd	r1, r6, [r0]
 8005208:	300c      	adds	r0, #12
 800520a:	60a0      	str	r0, [r4, #8]
 800520c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005210:	f7ff feea 	bl	8004fe8 <memset>
 8005214:	4620      	mov	r0, r4
 8005216:	bd70      	pop	{r4, r5, r6, pc}

08005218 <__sinit>:
 8005218:	6983      	ldr	r3, [r0, #24]
 800521a:	b510      	push	{r4, lr}
 800521c:	4604      	mov	r4, r0
 800521e:	bb33      	cbnz	r3, 800526e <__sinit+0x56>
 8005220:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005224:	6503      	str	r3, [r0, #80]	; 0x50
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <__sinit+0x58>)
 8005228:	4a12      	ldr	r2, [pc, #72]	; (8005274 <__sinit+0x5c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6282      	str	r2, [r0, #40]	; 0x28
 800522e:	4298      	cmp	r0, r3
 8005230:	bf04      	itt	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	6183      	streq	r3, [r0, #24]
 8005236:	f000 f81f 	bl	8005278 <__sfp>
 800523a:	6060      	str	r0, [r4, #4]
 800523c:	4620      	mov	r0, r4
 800523e:	f000 f81b 	bl	8005278 <__sfp>
 8005242:	60a0      	str	r0, [r4, #8]
 8005244:	4620      	mov	r0, r4
 8005246:	f000 f817 	bl	8005278 <__sfp>
 800524a:	2200      	movs	r2, #0
 800524c:	60e0      	str	r0, [r4, #12]
 800524e:	2104      	movs	r1, #4
 8005250:	6860      	ldr	r0, [r4, #4]
 8005252:	f7ff ffa1 	bl	8005198 <std>
 8005256:	2201      	movs	r2, #1
 8005258:	2109      	movs	r1, #9
 800525a:	68a0      	ldr	r0, [r4, #8]
 800525c:	f7ff ff9c 	bl	8005198 <std>
 8005260:	2202      	movs	r2, #2
 8005262:	2112      	movs	r1, #18
 8005264:	68e0      	ldr	r0, [r4, #12]
 8005266:	f7ff ff97 	bl	8005198 <std>
 800526a:	2301      	movs	r3, #1
 800526c:	61a3      	str	r3, [r4, #24]
 800526e:	bd10      	pop	{r4, pc}
 8005270:	08005e48 	.word	0x08005e48
 8005274:	080051e1 	.word	0x080051e1

08005278 <__sfp>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <__sfp+0x70>)
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	69b3      	ldr	r3, [r6, #24]
 8005280:	4607      	mov	r7, r0
 8005282:	b913      	cbnz	r3, 800528a <__sfp+0x12>
 8005284:	4630      	mov	r0, r6
 8005286:	f7ff ffc7 	bl	8005218 <__sinit>
 800528a:	3648      	adds	r6, #72	; 0x48
 800528c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005290:	3b01      	subs	r3, #1
 8005292:	d503      	bpl.n	800529c <__sfp+0x24>
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	b133      	cbz	r3, 80052a6 <__sfp+0x2e>
 8005298:	6836      	ldr	r6, [r6, #0]
 800529a:	e7f7      	b.n	800528c <__sfp+0x14>
 800529c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052a0:	b16d      	cbz	r5, 80052be <__sfp+0x46>
 80052a2:	3468      	adds	r4, #104	; 0x68
 80052a4:	e7f4      	b.n	8005290 <__sfp+0x18>
 80052a6:	2104      	movs	r1, #4
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7ff ff9f 	bl	80051ec <__sfmoreglue>
 80052ae:	6030      	str	r0, [r6, #0]
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d1f1      	bne.n	8005298 <__sfp+0x20>
 80052b4:	230c      	movs	r3, #12
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4604      	mov	r4, r0
 80052ba:	4620      	mov	r0, r4
 80052bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <__sfp+0x74>)
 80052c0:	6665      	str	r5, [r4, #100]	; 0x64
 80052c2:	e9c4 5500 	strd	r5, r5, [r4]
 80052c6:	60a5      	str	r5, [r4, #8]
 80052c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80052cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80052d0:	2208      	movs	r2, #8
 80052d2:	4629      	mov	r1, r5
 80052d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052d8:	f7ff fe86 	bl	8004fe8 <memset>
 80052dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052e4:	e7e9      	b.n	80052ba <__sfp+0x42>
 80052e6:	bf00      	nop
 80052e8:	08005e48 	.word	0x08005e48
 80052ec:	ffff0001 	.word	0xffff0001

080052f0 <_fwalk_reent>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	4680      	mov	r8, r0
 80052f6:	4689      	mov	r9, r1
 80052f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052fc:	2600      	movs	r6, #0
 80052fe:	b914      	cbnz	r4, 8005306 <_fwalk_reent+0x16>
 8005300:	4630      	mov	r0, r6
 8005302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005306:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800530a:	3f01      	subs	r7, #1
 800530c:	d501      	bpl.n	8005312 <_fwalk_reent+0x22>
 800530e:	6824      	ldr	r4, [r4, #0]
 8005310:	e7f5      	b.n	80052fe <_fwalk_reent+0xe>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d907      	bls.n	8005328 <_fwalk_reent+0x38>
 8005318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800531c:	3301      	adds	r3, #1
 800531e:	d003      	beq.n	8005328 <_fwalk_reent+0x38>
 8005320:	4629      	mov	r1, r5
 8005322:	4640      	mov	r0, r8
 8005324:	47c8      	blx	r9
 8005326:	4306      	orrs	r6, r0
 8005328:	3568      	adds	r5, #104	; 0x68
 800532a:	e7ee      	b.n	800530a <_fwalk_reent+0x1a>

0800532c <__malloc_lock>:
 800532c:	4770      	bx	lr

0800532e <__malloc_unlock>:
 800532e:	4770      	bx	lr

08005330 <__sfputc_r>:
 8005330:	6893      	ldr	r3, [r2, #8]
 8005332:	3b01      	subs	r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	b410      	push	{r4}
 8005338:	6093      	str	r3, [r2, #8]
 800533a:	da08      	bge.n	800534e <__sfputc_r+0x1e>
 800533c:	6994      	ldr	r4, [r2, #24]
 800533e:	42a3      	cmp	r3, r4
 8005340:	db01      	blt.n	8005346 <__sfputc_r+0x16>
 8005342:	290a      	cmp	r1, #10
 8005344:	d103      	bne.n	800534e <__sfputc_r+0x1e>
 8005346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534a:	f000 bafd 	b.w	8005948 <__swbuf_r>
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	1c58      	adds	r0, r3, #1
 8005352:	6010      	str	r0, [r2, #0]
 8005354:	7019      	strb	r1, [r3, #0]
 8005356:	4608      	mov	r0, r1
 8005358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535c:	4770      	bx	lr

0800535e <__sfputs_r>:
 800535e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005360:	4606      	mov	r6, r0
 8005362:	460f      	mov	r7, r1
 8005364:	4614      	mov	r4, r2
 8005366:	18d5      	adds	r5, r2, r3
 8005368:	42ac      	cmp	r4, r5
 800536a:	d101      	bne.n	8005370 <__sfputs_r+0x12>
 800536c:	2000      	movs	r0, #0
 800536e:	e007      	b.n	8005380 <__sfputs_r+0x22>
 8005370:	463a      	mov	r2, r7
 8005372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005376:	4630      	mov	r0, r6
 8005378:	f7ff ffda 	bl	8005330 <__sfputc_r>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d1f3      	bne.n	8005368 <__sfputs_r+0xa>
 8005380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005384 <_vfiprintf_r>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	b09d      	sub	sp, #116	; 0x74
 800538c:	4617      	mov	r7, r2
 800538e:	461d      	mov	r5, r3
 8005390:	4606      	mov	r6, r0
 8005392:	b118      	cbz	r0, 800539c <_vfiprintf_r+0x18>
 8005394:	6983      	ldr	r3, [r0, #24]
 8005396:	b90b      	cbnz	r3, 800539c <_vfiprintf_r+0x18>
 8005398:	f7ff ff3e 	bl	8005218 <__sinit>
 800539c:	4b7c      	ldr	r3, [pc, #496]	; (8005590 <_vfiprintf_r+0x20c>)
 800539e:	429c      	cmp	r4, r3
 80053a0:	d158      	bne.n	8005454 <_vfiprintf_r+0xd0>
 80053a2:	6874      	ldr	r4, [r6, #4]
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	0718      	lsls	r0, r3, #28
 80053a8:	d55e      	bpl.n	8005468 <_vfiprintf_r+0xe4>
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <_vfiprintf_r+0xe4>
 80053b0:	2300      	movs	r3, #0
 80053b2:	9309      	str	r3, [sp, #36]	; 0x24
 80053b4:	2320      	movs	r3, #32
 80053b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ba:	2330      	movs	r3, #48	; 0x30
 80053bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053c0:	9503      	str	r5, [sp, #12]
 80053c2:	f04f 0b01 	mov.w	fp, #1
 80053c6:	46b8      	mov	r8, r7
 80053c8:	4645      	mov	r5, r8
 80053ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053ce:	b10b      	cbz	r3, 80053d4 <_vfiprintf_r+0x50>
 80053d0:	2b25      	cmp	r3, #37	; 0x25
 80053d2:	d154      	bne.n	800547e <_vfiprintf_r+0xfa>
 80053d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80053d8:	d00b      	beq.n	80053f2 <_vfiprintf_r+0x6e>
 80053da:	4653      	mov	r3, sl
 80053dc:	463a      	mov	r2, r7
 80053de:	4621      	mov	r1, r4
 80053e0:	4630      	mov	r0, r6
 80053e2:	f7ff ffbc 	bl	800535e <__sfputs_r>
 80053e6:	3001      	adds	r0, #1
 80053e8:	f000 80c2 	beq.w	8005570 <_vfiprintf_r+0x1ec>
 80053ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ee:	4453      	add	r3, sl
 80053f0:	9309      	str	r3, [sp, #36]	; 0x24
 80053f2:	f898 3000 	ldrb.w	r3, [r8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80ba 	beq.w	8005570 <_vfiprintf_r+0x1ec>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	9307      	str	r3, [sp, #28]
 800540a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800540e:	931a      	str	r3, [sp, #104]	; 0x68
 8005410:	46a8      	mov	r8, r5
 8005412:	2205      	movs	r2, #5
 8005414:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005418:	485e      	ldr	r0, [pc, #376]	; (8005594 <_vfiprintf_r+0x210>)
 800541a:	f7fa fed9 	bl	80001d0 <memchr>
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	bb78      	cbnz	r0, 8005482 <_vfiprintf_r+0xfe>
 8005422:	06d9      	lsls	r1, r3, #27
 8005424:	bf44      	itt	mi
 8005426:	2220      	movmi	r2, #32
 8005428:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800542c:	071a      	lsls	r2, r3, #28
 800542e:	bf44      	itt	mi
 8005430:	222b      	movmi	r2, #43	; 0x2b
 8005432:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005436:	782a      	ldrb	r2, [r5, #0]
 8005438:	2a2a      	cmp	r2, #42	; 0x2a
 800543a:	d02a      	beq.n	8005492 <_vfiprintf_r+0x10e>
 800543c:	9a07      	ldr	r2, [sp, #28]
 800543e:	46a8      	mov	r8, r5
 8005440:	2000      	movs	r0, #0
 8005442:	250a      	movs	r5, #10
 8005444:	4641      	mov	r1, r8
 8005446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800544a:	3b30      	subs	r3, #48	; 0x30
 800544c:	2b09      	cmp	r3, #9
 800544e:	d969      	bls.n	8005524 <_vfiprintf_r+0x1a0>
 8005450:	b360      	cbz	r0, 80054ac <_vfiprintf_r+0x128>
 8005452:	e024      	b.n	800549e <_vfiprintf_r+0x11a>
 8005454:	4b50      	ldr	r3, [pc, #320]	; (8005598 <_vfiprintf_r+0x214>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d101      	bne.n	800545e <_vfiprintf_r+0xda>
 800545a:	68b4      	ldr	r4, [r6, #8]
 800545c:	e7a2      	b.n	80053a4 <_vfiprintf_r+0x20>
 800545e:	4b4f      	ldr	r3, [pc, #316]	; (800559c <_vfiprintf_r+0x218>)
 8005460:	429c      	cmp	r4, r3
 8005462:	bf08      	it	eq
 8005464:	68f4      	ldreq	r4, [r6, #12]
 8005466:	e79d      	b.n	80053a4 <_vfiprintf_r+0x20>
 8005468:	4621      	mov	r1, r4
 800546a:	4630      	mov	r0, r6
 800546c:	f000 fad0 	bl	8005a10 <__swsetup_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	d09d      	beq.n	80053b0 <_vfiprintf_r+0x2c>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005478:	b01d      	add	sp, #116	; 0x74
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547e:	46a8      	mov	r8, r5
 8005480:	e7a2      	b.n	80053c8 <_vfiprintf_r+0x44>
 8005482:	4a44      	ldr	r2, [pc, #272]	; (8005594 <_vfiprintf_r+0x210>)
 8005484:	1a80      	subs	r0, r0, r2
 8005486:	fa0b f000 	lsl.w	r0, fp, r0
 800548a:	4318      	orrs	r0, r3
 800548c:	9004      	str	r0, [sp, #16]
 800548e:	4645      	mov	r5, r8
 8005490:	e7be      	b.n	8005410 <_vfiprintf_r+0x8c>
 8005492:	9a03      	ldr	r2, [sp, #12]
 8005494:	1d11      	adds	r1, r2, #4
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	9103      	str	r1, [sp, #12]
 800549a:	2a00      	cmp	r2, #0
 800549c:	db01      	blt.n	80054a2 <_vfiprintf_r+0x11e>
 800549e:	9207      	str	r2, [sp, #28]
 80054a0:	e004      	b.n	80054ac <_vfiprintf_r+0x128>
 80054a2:	4252      	negs	r2, r2
 80054a4:	f043 0302 	orr.w	r3, r3, #2
 80054a8:	9207      	str	r2, [sp, #28]
 80054aa:	9304      	str	r3, [sp, #16]
 80054ac:	f898 3000 	ldrb.w	r3, [r8]
 80054b0:	2b2e      	cmp	r3, #46	; 0x2e
 80054b2:	d10e      	bne.n	80054d2 <_vfiprintf_r+0x14e>
 80054b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054b8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ba:	d138      	bne.n	800552e <_vfiprintf_r+0x1aa>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9203      	str	r2, [sp, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfb8      	it	lt
 80054c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054cc:	f108 0802 	add.w	r8, r8, #2
 80054d0:	9305      	str	r3, [sp, #20]
 80054d2:	4d33      	ldr	r5, [pc, #204]	; (80055a0 <_vfiprintf_r+0x21c>)
 80054d4:	f898 1000 	ldrb.w	r1, [r8]
 80054d8:	2203      	movs	r2, #3
 80054da:	4628      	mov	r0, r5
 80054dc:	f7fa fe78 	bl	80001d0 <memchr>
 80054e0:	b140      	cbz	r0, 80054f4 <_vfiprintf_r+0x170>
 80054e2:	2340      	movs	r3, #64	; 0x40
 80054e4:	1b40      	subs	r0, r0, r5
 80054e6:	fa03 f000 	lsl.w	r0, r3, r0
 80054ea:	9b04      	ldr	r3, [sp, #16]
 80054ec:	4303      	orrs	r3, r0
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	f898 1000 	ldrb.w	r1, [r8]
 80054f8:	482a      	ldr	r0, [pc, #168]	; (80055a4 <_vfiprintf_r+0x220>)
 80054fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054fe:	2206      	movs	r2, #6
 8005500:	f108 0701 	add.w	r7, r8, #1
 8005504:	f7fa fe64 	bl	80001d0 <memchr>
 8005508:	2800      	cmp	r0, #0
 800550a:	d037      	beq.n	800557c <_vfiprintf_r+0x1f8>
 800550c:	4b26      	ldr	r3, [pc, #152]	; (80055a8 <_vfiprintf_r+0x224>)
 800550e:	bb1b      	cbnz	r3, 8005558 <_vfiprintf_r+0x1d4>
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	3307      	adds	r3, #7
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	3308      	adds	r3, #8
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551e:	444b      	add	r3, r9
 8005520:	9309      	str	r3, [sp, #36]	; 0x24
 8005522:	e750      	b.n	80053c6 <_vfiprintf_r+0x42>
 8005524:	fb05 3202 	mla	r2, r5, r2, r3
 8005528:	2001      	movs	r0, #1
 800552a:	4688      	mov	r8, r1
 800552c:	e78a      	b.n	8005444 <_vfiprintf_r+0xc0>
 800552e:	2300      	movs	r3, #0
 8005530:	f108 0801 	add.w	r8, r8, #1
 8005534:	9305      	str	r3, [sp, #20]
 8005536:	4619      	mov	r1, r3
 8005538:	250a      	movs	r5, #10
 800553a:	4640      	mov	r0, r8
 800553c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005540:	3a30      	subs	r2, #48	; 0x30
 8005542:	2a09      	cmp	r2, #9
 8005544:	d903      	bls.n	800554e <_vfiprintf_r+0x1ca>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0c3      	beq.n	80054d2 <_vfiprintf_r+0x14e>
 800554a:	9105      	str	r1, [sp, #20]
 800554c:	e7c1      	b.n	80054d2 <_vfiprintf_r+0x14e>
 800554e:	fb05 2101 	mla	r1, r5, r1, r2
 8005552:	2301      	movs	r3, #1
 8005554:	4680      	mov	r8, r0
 8005556:	e7f0      	b.n	800553a <_vfiprintf_r+0x1b6>
 8005558:	ab03      	add	r3, sp, #12
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4622      	mov	r2, r4
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <_vfiprintf_r+0x228>)
 8005560:	a904      	add	r1, sp, #16
 8005562:	4630      	mov	r0, r6
 8005564:	f3af 8000 	nop.w
 8005568:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800556c:	4681      	mov	r9, r0
 800556e:	d1d5      	bne.n	800551c <_vfiprintf_r+0x198>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	065b      	lsls	r3, r3, #25
 8005574:	f53f af7e 	bmi.w	8005474 <_vfiprintf_r+0xf0>
 8005578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800557a:	e77d      	b.n	8005478 <_vfiprintf_r+0xf4>
 800557c:	ab03      	add	r3, sp, #12
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	4622      	mov	r2, r4
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <_vfiprintf_r+0x228>)
 8005584:	a904      	add	r1, sp, #16
 8005586:	4630      	mov	r0, r6
 8005588:	f000 f888 	bl	800569c <_printf_i>
 800558c:	e7ec      	b.n	8005568 <_vfiprintf_r+0x1e4>
 800558e:	bf00      	nop
 8005590:	08005e6c 	.word	0x08005e6c
 8005594:	08005eac 	.word	0x08005eac
 8005598:	08005e8c 	.word	0x08005e8c
 800559c:	08005e4c 	.word	0x08005e4c
 80055a0:	08005eb2 	.word	0x08005eb2
 80055a4:	08005eb6 	.word	0x08005eb6
 80055a8:	00000000 	.word	0x00000000
 80055ac:	0800535f 	.word	0x0800535f

080055b0 <_printf_common>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	4691      	mov	r9, r2
 80055b6:	461f      	mov	r7, r3
 80055b8:	688a      	ldr	r2, [r1, #8]
 80055ba:	690b      	ldr	r3, [r1, #16]
 80055bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bfb8      	it	lt
 80055c4:	4613      	movlt	r3, r2
 80055c6:	f8c9 3000 	str.w	r3, [r9]
 80055ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ce:	4606      	mov	r6, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	b112      	cbz	r2, 80055da <_printf_common+0x2a>
 80055d4:	3301      	adds	r3, #1
 80055d6:	f8c9 3000 	str.w	r3, [r9]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	0699      	lsls	r1, r3, #26
 80055de:	bf42      	ittt	mi
 80055e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80055e4:	3302      	addmi	r3, #2
 80055e6:	f8c9 3000 	strmi.w	r3, [r9]
 80055ea:	6825      	ldr	r5, [r4, #0]
 80055ec:	f015 0506 	ands.w	r5, r5, #6
 80055f0:	d107      	bne.n	8005602 <_printf_common+0x52>
 80055f2:	f104 0a19 	add.w	sl, r4, #25
 80055f6:	68e3      	ldr	r3, [r4, #12]
 80055f8:	f8d9 2000 	ldr.w	r2, [r9]
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	42ab      	cmp	r3, r5
 8005600:	dc28      	bgt.n	8005654 <_printf_common+0xa4>
 8005602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	3300      	adds	r3, #0
 800560a:	bf18      	it	ne
 800560c:	2301      	movne	r3, #1
 800560e:	0692      	lsls	r2, r2, #26
 8005610:	d42d      	bmi.n	800566e <_printf_common+0xbe>
 8005612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005616:	4639      	mov	r1, r7
 8005618:	4630      	mov	r0, r6
 800561a:	47c0      	blx	r8
 800561c:	3001      	adds	r0, #1
 800561e:	d020      	beq.n	8005662 <_printf_common+0xb2>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	68e5      	ldr	r5, [r4, #12]
 8005624:	f8d9 2000 	ldr.w	r2, [r9]
 8005628:	f003 0306 	and.w	r3, r3, #6
 800562c:	2b04      	cmp	r3, #4
 800562e:	bf08      	it	eq
 8005630:	1aad      	subeq	r5, r5, r2
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	6922      	ldr	r2, [r4, #16]
 8005636:	bf0c      	ite	eq
 8005638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800563c:	2500      	movne	r5, #0
 800563e:	4293      	cmp	r3, r2
 8005640:	bfc4      	itt	gt
 8005642:	1a9b      	subgt	r3, r3, r2
 8005644:	18ed      	addgt	r5, r5, r3
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	341a      	adds	r4, #26
 800564c:	454d      	cmp	r5, r9
 800564e:	d11a      	bne.n	8005686 <_printf_common+0xd6>
 8005650:	2000      	movs	r0, #0
 8005652:	e008      	b.n	8005666 <_printf_common+0xb6>
 8005654:	2301      	movs	r3, #1
 8005656:	4652      	mov	r2, sl
 8005658:	4639      	mov	r1, r7
 800565a:	4630      	mov	r0, r6
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d103      	bne.n	800566a <_printf_common+0xba>
 8005662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	3501      	adds	r5, #1
 800566c:	e7c3      	b.n	80055f6 <_printf_common+0x46>
 800566e:	18e1      	adds	r1, r4, r3
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	2030      	movs	r0, #48	; 0x30
 8005674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005678:	4422      	add	r2, r4
 800567a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800567e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005682:	3302      	adds	r3, #2
 8005684:	e7c5      	b.n	8005612 <_printf_common+0x62>
 8005686:	2301      	movs	r3, #1
 8005688:	4622      	mov	r2, r4
 800568a:	4639      	mov	r1, r7
 800568c:	4630      	mov	r0, r6
 800568e:	47c0      	blx	r8
 8005690:	3001      	adds	r0, #1
 8005692:	d0e6      	beq.n	8005662 <_printf_common+0xb2>
 8005694:	f109 0901 	add.w	r9, r9, #1
 8005698:	e7d8      	b.n	800564c <_printf_common+0x9c>
	...

0800569c <_printf_i>:
 800569c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056a4:	460c      	mov	r4, r1
 80056a6:	7e09      	ldrb	r1, [r1, #24]
 80056a8:	b085      	sub	sp, #20
 80056aa:	296e      	cmp	r1, #110	; 0x6e
 80056ac:	4617      	mov	r7, r2
 80056ae:	4606      	mov	r6, r0
 80056b0:	4698      	mov	r8, r3
 80056b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056b4:	f000 80b3 	beq.w	800581e <_printf_i+0x182>
 80056b8:	d822      	bhi.n	8005700 <_printf_i+0x64>
 80056ba:	2963      	cmp	r1, #99	; 0x63
 80056bc:	d036      	beq.n	800572c <_printf_i+0x90>
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x3a>
 80056c0:	2900      	cmp	r1, #0
 80056c2:	f000 80b9 	beq.w	8005838 <_printf_i+0x19c>
 80056c6:	2958      	cmp	r1, #88	; 0x58
 80056c8:	f000 8083 	beq.w	80057d2 <_printf_i+0x136>
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056d4:	e032      	b.n	800573c <_printf_i+0xa0>
 80056d6:	2964      	cmp	r1, #100	; 0x64
 80056d8:	d001      	beq.n	80056de <_printf_i+0x42>
 80056da:	2969      	cmp	r1, #105	; 0x69
 80056dc:	d1f6      	bne.n	80056cc <_printf_i+0x30>
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	0605      	lsls	r5, r0, #24
 80056e4:	f103 0104 	add.w	r1, r3, #4
 80056e8:	d52a      	bpl.n	8005740 <_printf_i+0xa4>
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da03      	bge.n	80056fa <_printf_i+0x5e>
 80056f2:	222d      	movs	r2, #45	; 0x2d
 80056f4:	425b      	negs	r3, r3
 80056f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056fa:	486f      	ldr	r0, [pc, #444]	; (80058b8 <_printf_i+0x21c>)
 80056fc:	220a      	movs	r2, #10
 80056fe:	e039      	b.n	8005774 <_printf_i+0xd8>
 8005700:	2973      	cmp	r1, #115	; 0x73
 8005702:	f000 809d 	beq.w	8005840 <_printf_i+0x1a4>
 8005706:	d808      	bhi.n	800571a <_printf_i+0x7e>
 8005708:	296f      	cmp	r1, #111	; 0x6f
 800570a:	d020      	beq.n	800574e <_printf_i+0xb2>
 800570c:	2970      	cmp	r1, #112	; 0x70
 800570e:	d1dd      	bne.n	80056cc <_printf_i+0x30>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	f043 0320 	orr.w	r3, r3, #32
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	e003      	b.n	8005722 <_printf_i+0x86>
 800571a:	2975      	cmp	r1, #117	; 0x75
 800571c:	d017      	beq.n	800574e <_printf_i+0xb2>
 800571e:	2978      	cmp	r1, #120	; 0x78
 8005720:	d1d4      	bne.n	80056cc <_printf_i+0x30>
 8005722:	2378      	movs	r3, #120	; 0x78
 8005724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005728:	4864      	ldr	r0, [pc, #400]	; (80058bc <_printf_i+0x220>)
 800572a:	e055      	b.n	80057d8 <_printf_i+0x13c>
 800572c:	6813      	ldr	r3, [r2, #0]
 800572e:	1d19      	adds	r1, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6011      	str	r1, [r2, #0]
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800573c:	2301      	movs	r3, #1
 800573e:	e08c      	b.n	800585a <_printf_i+0x1be>
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6011      	str	r1, [r2, #0]
 8005744:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005748:	bf18      	it	ne
 800574a:	b21b      	sxthne	r3, r3
 800574c:	e7cf      	b.n	80056ee <_printf_i+0x52>
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	6825      	ldr	r5, [r4, #0]
 8005752:	1d18      	adds	r0, r3, #4
 8005754:	6010      	str	r0, [r2, #0]
 8005756:	0628      	lsls	r0, r5, #24
 8005758:	d501      	bpl.n	800575e <_printf_i+0xc2>
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	e002      	b.n	8005764 <_printf_i+0xc8>
 800575e:	0668      	lsls	r0, r5, #25
 8005760:	d5fb      	bpl.n	800575a <_printf_i+0xbe>
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	4854      	ldr	r0, [pc, #336]	; (80058b8 <_printf_i+0x21c>)
 8005766:	296f      	cmp	r1, #111	; 0x6f
 8005768:	bf14      	ite	ne
 800576a:	220a      	movne	r2, #10
 800576c:	2208      	moveq	r2, #8
 800576e:	2100      	movs	r1, #0
 8005770:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005774:	6865      	ldr	r5, [r4, #4]
 8005776:	60a5      	str	r5, [r4, #8]
 8005778:	2d00      	cmp	r5, #0
 800577a:	f2c0 8095 	blt.w	80058a8 <_printf_i+0x20c>
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	f021 0104 	bic.w	r1, r1, #4
 8005784:	6021      	str	r1, [r4, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d13d      	bne.n	8005806 <_printf_i+0x16a>
 800578a:	2d00      	cmp	r5, #0
 800578c:	f040 808e 	bne.w	80058ac <_printf_i+0x210>
 8005790:	4665      	mov	r5, ip
 8005792:	2a08      	cmp	r2, #8
 8005794:	d10b      	bne.n	80057ae <_printf_i+0x112>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d508      	bpl.n	80057ae <_printf_i+0x112>
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	6862      	ldr	r2, [r4, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bfde      	ittt	le
 80057a4:	2330      	movle	r3, #48	; 0x30
 80057a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057ae:	ebac 0305 	sub.w	r3, ip, r5
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	f8cd 8000 	str.w	r8, [sp]
 80057b8:	463b      	mov	r3, r7
 80057ba:	aa03      	add	r2, sp, #12
 80057bc:	4621      	mov	r1, r4
 80057be:	4630      	mov	r0, r6
 80057c0:	f7ff fef6 	bl	80055b0 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d14d      	bne.n	8005864 <_printf_i+0x1c8>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057cc:	b005      	add	sp, #20
 80057ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d2:	4839      	ldr	r0, [pc, #228]	; (80058b8 <_printf_i+0x21c>)
 80057d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	6821      	ldr	r1, [r4, #0]
 80057dc:	1d1d      	adds	r5, r3, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6015      	str	r5, [r2, #0]
 80057e2:	060a      	lsls	r2, r1, #24
 80057e4:	d50b      	bpl.n	80057fe <_printf_i+0x162>
 80057e6:	07ca      	lsls	r2, r1, #31
 80057e8:	bf44      	itt	mi
 80057ea:	f041 0120 	orrmi.w	r1, r1, #32
 80057ee:	6021      	strmi	r1, [r4, #0]
 80057f0:	b91b      	cbnz	r3, 80057fa <_printf_i+0x15e>
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	f022 0220 	bic.w	r2, r2, #32
 80057f8:	6022      	str	r2, [r4, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	e7b7      	b.n	800576e <_printf_i+0xd2>
 80057fe:	064d      	lsls	r5, r1, #25
 8005800:	bf48      	it	mi
 8005802:	b29b      	uxthmi	r3, r3
 8005804:	e7ef      	b.n	80057e6 <_printf_i+0x14a>
 8005806:	4665      	mov	r5, ip
 8005808:	fbb3 f1f2 	udiv	r1, r3, r2
 800580c:	fb02 3311 	mls	r3, r2, r1, r3
 8005810:	5cc3      	ldrb	r3, [r0, r3]
 8005812:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005816:	460b      	mov	r3, r1
 8005818:	2900      	cmp	r1, #0
 800581a:	d1f5      	bne.n	8005808 <_printf_i+0x16c>
 800581c:	e7b9      	b.n	8005792 <_printf_i+0xf6>
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	6825      	ldr	r5, [r4, #0]
 8005822:	6961      	ldr	r1, [r4, #20]
 8005824:	1d18      	adds	r0, r3, #4
 8005826:	6010      	str	r0, [r2, #0]
 8005828:	0628      	lsls	r0, r5, #24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	d501      	bpl.n	8005832 <_printf_i+0x196>
 800582e:	6019      	str	r1, [r3, #0]
 8005830:	e002      	b.n	8005838 <_printf_i+0x19c>
 8005832:	066a      	lsls	r2, r5, #25
 8005834:	d5fb      	bpl.n	800582e <_printf_i+0x192>
 8005836:	8019      	strh	r1, [r3, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	4665      	mov	r5, ip
 800583e:	e7b9      	b.n	80057b4 <_printf_i+0x118>
 8005840:	6813      	ldr	r3, [r2, #0]
 8005842:	1d19      	adds	r1, r3, #4
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	681d      	ldr	r5, [r3, #0]
 8005848:	6862      	ldr	r2, [r4, #4]
 800584a:	2100      	movs	r1, #0
 800584c:	4628      	mov	r0, r5
 800584e:	f7fa fcbf 	bl	80001d0 <memchr>
 8005852:	b108      	cbz	r0, 8005858 <_printf_i+0x1bc>
 8005854:	1b40      	subs	r0, r0, r5
 8005856:	6060      	str	r0, [r4, #4]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	2300      	movs	r3, #0
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	e7a7      	b.n	80057b4 <_printf_i+0x118>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	462a      	mov	r2, r5
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	47c0      	blx	r8
 800586e:	3001      	adds	r0, #1
 8005870:	d0aa      	beq.n	80057c8 <_printf_i+0x12c>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	d413      	bmi.n	80058a0 <_printf_i+0x204>
 8005878:	68e0      	ldr	r0, [r4, #12]
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	4298      	cmp	r0, r3
 800587e:	bfb8      	it	lt
 8005880:	4618      	movlt	r0, r3
 8005882:	e7a3      	b.n	80057cc <_printf_i+0x130>
 8005884:	2301      	movs	r3, #1
 8005886:	464a      	mov	r2, r9
 8005888:	4639      	mov	r1, r7
 800588a:	4630      	mov	r0, r6
 800588c:	47c0      	blx	r8
 800588e:	3001      	adds	r0, #1
 8005890:	d09a      	beq.n	80057c8 <_printf_i+0x12c>
 8005892:	3501      	adds	r5, #1
 8005894:	68e3      	ldr	r3, [r4, #12]
 8005896:	9a03      	ldr	r2, [sp, #12]
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	42ab      	cmp	r3, r5
 800589c:	dcf2      	bgt.n	8005884 <_printf_i+0x1e8>
 800589e:	e7eb      	b.n	8005878 <_printf_i+0x1dc>
 80058a0:	2500      	movs	r5, #0
 80058a2:	f104 0919 	add.w	r9, r4, #25
 80058a6:	e7f5      	b.n	8005894 <_printf_i+0x1f8>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ac      	bne.n	8005806 <_printf_i+0x16a>
 80058ac:	7803      	ldrb	r3, [r0, #0]
 80058ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b6:	e76c      	b.n	8005792 <_printf_i+0xf6>
 80058b8:	08005ebd 	.word	0x08005ebd
 80058bc:	08005ece 	.word	0x08005ece

080058c0 <__sread>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	f000 fa46 	bl	8005d58 <_read_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	bfab      	itete	ge
 80058d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058d2:	89a3      	ldrhlt	r3, [r4, #12]
 80058d4:	181b      	addge	r3, r3, r0
 80058d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058da:	bfac      	ite	ge
 80058dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80058de:	81a3      	strhlt	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__swrite>:
 80058e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	461f      	mov	r7, r3
 80058e8:	898b      	ldrh	r3, [r1, #12]
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4616      	mov	r6, r2
 80058f2:	d505      	bpl.n	8005900 <__swrite+0x1e>
 80058f4:	2302      	movs	r3, #2
 80058f6:	2200      	movs	r2, #0
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	f000 f9b6 	bl	8005c6c <_lseek_r>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	4628      	mov	r0, r5
 8005912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	f000 b869 	b.w	80059ec <_write_r>

0800591a <__sseek>:
 800591a:	b510      	push	{r4, lr}
 800591c:	460c      	mov	r4, r1
 800591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005922:	f000 f9a3 	bl	8005c6c <_lseek_r>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	bf15      	itete	ne
 800592c:	6560      	strne	r0, [r4, #84]	; 0x54
 800592e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005936:	81a3      	strheq	r3, [r4, #12]
 8005938:	bf18      	it	ne
 800593a:	81a3      	strhne	r3, [r4, #12]
 800593c:	bd10      	pop	{r4, pc}

0800593e <__sclose>:
 800593e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005942:	f000 b8d3 	b.w	8005aec <_close_r>
	...

08005948 <__swbuf_r>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	460e      	mov	r6, r1
 800594c:	4614      	mov	r4, r2
 800594e:	4605      	mov	r5, r0
 8005950:	b118      	cbz	r0, 800595a <__swbuf_r+0x12>
 8005952:	6983      	ldr	r3, [r0, #24]
 8005954:	b90b      	cbnz	r3, 800595a <__swbuf_r+0x12>
 8005956:	f7ff fc5f 	bl	8005218 <__sinit>
 800595a:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <__swbuf_r+0x98>)
 800595c:	429c      	cmp	r4, r3
 800595e:	d12a      	bne.n	80059b6 <__swbuf_r+0x6e>
 8005960:	686c      	ldr	r4, [r5, #4]
 8005962:	69a3      	ldr	r3, [r4, #24]
 8005964:	60a3      	str	r3, [r4, #8]
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	071a      	lsls	r2, r3, #28
 800596a:	d52e      	bpl.n	80059ca <__swbuf_r+0x82>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	b363      	cbz	r3, 80059ca <__swbuf_r+0x82>
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1ac0      	subs	r0, r0, r3
 8005976:	6963      	ldr	r3, [r4, #20]
 8005978:	b2f6      	uxtb	r6, r6
 800597a:	4283      	cmp	r3, r0
 800597c:	4637      	mov	r7, r6
 800597e:	dc04      	bgt.n	800598a <__swbuf_r+0x42>
 8005980:	4621      	mov	r1, r4
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f948 	bl	8005c18 <_fflush_r>
 8005988:	bb28      	cbnz	r0, 80059d6 <__swbuf_r+0x8e>
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	3b01      	subs	r3, #1
 800598e:	60a3      	str	r3, [r4, #8]
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	6022      	str	r2, [r4, #0]
 8005996:	701e      	strb	r6, [r3, #0]
 8005998:	6963      	ldr	r3, [r4, #20]
 800599a:	3001      	adds	r0, #1
 800599c:	4283      	cmp	r3, r0
 800599e:	d004      	beq.n	80059aa <__swbuf_r+0x62>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	07db      	lsls	r3, r3, #31
 80059a4:	d519      	bpl.n	80059da <__swbuf_r+0x92>
 80059a6:	2e0a      	cmp	r6, #10
 80059a8:	d117      	bne.n	80059da <__swbuf_r+0x92>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f933 	bl	8005c18 <_fflush_r>
 80059b2:	b190      	cbz	r0, 80059da <__swbuf_r+0x92>
 80059b4:	e00f      	b.n	80059d6 <__swbuf_r+0x8e>
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <__swbuf_r+0x9c>)
 80059b8:	429c      	cmp	r4, r3
 80059ba:	d101      	bne.n	80059c0 <__swbuf_r+0x78>
 80059bc:	68ac      	ldr	r4, [r5, #8]
 80059be:	e7d0      	b.n	8005962 <__swbuf_r+0x1a>
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <__swbuf_r+0xa0>)
 80059c2:	429c      	cmp	r4, r3
 80059c4:	bf08      	it	eq
 80059c6:	68ec      	ldreq	r4, [r5, #12]
 80059c8:	e7cb      	b.n	8005962 <__swbuf_r+0x1a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f81f 	bl	8005a10 <__swsetup_r>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d0cc      	beq.n	8005970 <__swbuf_r+0x28>
 80059d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059da:	4638      	mov	r0, r7
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059de:	bf00      	nop
 80059e0:	08005e6c 	.word	0x08005e6c
 80059e4:	08005e8c 	.word	0x08005e8c
 80059e8:	08005e4c 	.word	0x08005e4c

080059ec <_write_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4c07      	ldr	r4, [pc, #28]	; (8005a0c <_write_r+0x20>)
 80059f0:	4605      	mov	r5, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fb fac1 	bl	8000f82 <_write>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_write_r+0x1e>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_write_r+0x1e>
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	2000020c 	.word	0x2000020c

08005a10 <__swsetup_r>:
 8005a10:	4b32      	ldr	r3, [pc, #200]	; (8005adc <__swsetup_r+0xcc>)
 8005a12:	b570      	push	{r4, r5, r6, lr}
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	4606      	mov	r6, r0
 8005a18:	460c      	mov	r4, r1
 8005a1a:	b125      	cbz	r5, 8005a26 <__swsetup_r+0x16>
 8005a1c:	69ab      	ldr	r3, [r5, #24]
 8005a1e:	b913      	cbnz	r3, 8005a26 <__swsetup_r+0x16>
 8005a20:	4628      	mov	r0, r5
 8005a22:	f7ff fbf9 	bl	8005218 <__sinit>
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <__swsetup_r+0xd0>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d10f      	bne.n	8005a4c <__swsetup_r+0x3c>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	0715      	lsls	r5, r2, #28
 8005a36:	d42c      	bmi.n	8005a92 <__swsetup_r+0x82>
 8005a38:	06d0      	lsls	r0, r2, #27
 8005a3a:	d411      	bmi.n	8005a60 <__swsetup_r+0x50>
 8005a3c:	2209      	movs	r2, #9
 8005a3e:	6032      	str	r2, [r6, #0]
 8005a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a4a:	e03e      	b.n	8005aca <__swsetup_r+0xba>
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <__swsetup_r+0xd4>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d101      	bne.n	8005a56 <__swsetup_r+0x46>
 8005a52:	68ac      	ldr	r4, [r5, #8]
 8005a54:	e7eb      	b.n	8005a2e <__swsetup_r+0x1e>
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <__swsetup_r+0xd8>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	bf08      	it	eq
 8005a5c:	68ec      	ldreq	r4, [r5, #12]
 8005a5e:	e7e6      	b.n	8005a2e <__swsetup_r+0x1e>
 8005a60:	0751      	lsls	r1, r2, #29
 8005a62:	d512      	bpl.n	8005a8a <__swsetup_r+0x7a>
 8005a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a66:	b141      	cbz	r1, 8005a7a <__swsetup_r+0x6a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__swsetup_r+0x66>
 8005a70:	4630      	mov	r0, r6
 8005a72:	f7ff fac1 	bl	8004ff8 <_free_r>
 8005a76:	2300      	movs	r3, #0
 8005a78:	6363      	str	r3, [r4, #52]	; 0x34
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0308 	orr.w	r3, r3, #8
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b94b      	cbnz	r3, 8005aaa <__swsetup_r+0x9a>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa0:	d003      	beq.n	8005aaa <__swsetup_r+0x9a>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 f917 	bl	8005cd8 <__smakebuf_r>
 8005aaa:	89a2      	ldrh	r2, [r4, #12]
 8005aac:	f012 0301 	ands.w	r3, r2, #1
 8005ab0:	d00c      	beq.n	8005acc <__swsetup_r+0xbc>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	6963      	ldr	r3, [r4, #20]
 8005ab8:	425b      	negs	r3, r3
 8005aba:	61a3      	str	r3, [r4, #24]
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	b953      	cbnz	r3, 8005ad6 <__swsetup_r+0xc6>
 8005ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ac8:	d1ba      	bne.n	8005a40 <__swsetup_r+0x30>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	0792      	lsls	r2, r2, #30
 8005ace:	bf58      	it	pl
 8005ad0:	6963      	ldrpl	r3, [r4, #20]
 8005ad2:	60a3      	str	r3, [r4, #8]
 8005ad4:	e7f2      	b.n	8005abc <__swsetup_r+0xac>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e7f7      	b.n	8005aca <__swsetup_r+0xba>
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c
 8005ae0:	08005e6c 	.word	0x08005e6c
 8005ae4:	08005e8c 	.word	0x08005e8c
 8005ae8:	08005e4c 	.word	0x08005e4c

08005aec <_close_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4c06      	ldr	r4, [pc, #24]	; (8005b08 <_close_r+0x1c>)
 8005af0:	2300      	movs	r3, #0
 8005af2:	4605      	mov	r5, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	f7fb fa5f 	bl	8000fba <_close>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_close_r+0x1a>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_close_r+0x1a>
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	2000020c 	.word	0x2000020c

08005b0c <__sflush_r>:
 8005b0c:	898a      	ldrh	r2, [r1, #12]
 8005b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	4605      	mov	r5, r0
 8005b14:	0710      	lsls	r0, r2, #28
 8005b16:	460c      	mov	r4, r1
 8005b18:	d458      	bmi.n	8005bcc <__sflush_r+0xc0>
 8005b1a:	684b      	ldr	r3, [r1, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc05      	bgt.n	8005b2c <__sflush_r+0x20>
 8005b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc02      	bgt.n	8005b2c <__sflush_r+0x20>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d0f9      	beq.n	8005b26 <__sflush_r+0x1a>
 8005b32:	2300      	movs	r3, #0
 8005b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b38:	682f      	ldr	r7, [r5, #0]
 8005b3a:	6a21      	ldr	r1, [r4, #32]
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	d032      	beq.n	8005ba6 <__sflush_r+0x9a>
 8005b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	075a      	lsls	r2, r3, #29
 8005b46:	d505      	bpl.n	8005b54 <__sflush_r+0x48>
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	1ac0      	subs	r0, r0, r3
 8005b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b4e:	b10b      	cbz	r3, 8005b54 <__sflush_r+0x48>
 8005b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b52:	1ac0      	subs	r0, r0, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	4602      	mov	r2, r0
 8005b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b5a:	6a21      	ldr	r1, [r4, #32]
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b0      	blx	r6
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	d106      	bne.n	8005b74 <__sflush_r+0x68>
 8005b66:	6829      	ldr	r1, [r5, #0]
 8005b68:	291d      	cmp	r1, #29
 8005b6a:	d848      	bhi.n	8005bfe <__sflush_r+0xf2>
 8005b6c:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <__sflush_r+0x108>)
 8005b6e:	40ca      	lsrs	r2, r1
 8005b70:	07d6      	lsls	r6, r2, #31
 8005b72:	d544      	bpl.n	8005bfe <__sflush_r+0xf2>
 8005b74:	2200      	movs	r2, #0
 8005b76:	6062      	str	r2, [r4, #4]
 8005b78:	04d9      	lsls	r1, r3, #19
 8005b7a:	6922      	ldr	r2, [r4, #16]
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	d504      	bpl.n	8005b8a <__sflush_r+0x7e>
 8005b80:	1c42      	adds	r2, r0, #1
 8005b82:	d101      	bne.n	8005b88 <__sflush_r+0x7c>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	b903      	cbnz	r3, 8005b8a <__sflush_r+0x7e>
 8005b88:	6560      	str	r0, [r4, #84]	; 0x54
 8005b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b8c:	602f      	str	r7, [r5, #0]
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d0c9      	beq.n	8005b26 <__sflush_r+0x1a>
 8005b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b96:	4299      	cmp	r1, r3
 8005b98:	d002      	beq.n	8005ba0 <__sflush_r+0x94>
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f7ff fa2c 	bl	8004ff8 <_free_r>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ba4:	e7c0      	b.n	8005b28 <__sflush_r+0x1c>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b0      	blx	r6
 8005bac:	1c41      	adds	r1, r0, #1
 8005bae:	d1c8      	bne.n	8005b42 <__sflush_r+0x36>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0c5      	beq.n	8005b42 <__sflush_r+0x36>
 8005bb6:	2b1d      	cmp	r3, #29
 8005bb8:	d001      	beq.n	8005bbe <__sflush_r+0xb2>
 8005bba:	2b16      	cmp	r3, #22
 8005bbc:	d101      	bne.n	8005bc2 <__sflush_r+0xb6>
 8005bbe:	602f      	str	r7, [r5, #0]
 8005bc0:	e7b1      	b.n	8005b26 <__sflush_r+0x1a>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	e7ad      	b.n	8005b28 <__sflush_r+0x1c>
 8005bcc:	690f      	ldr	r7, [r1, #16]
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d0a9      	beq.n	8005b26 <__sflush_r+0x1a>
 8005bd2:	0793      	lsls	r3, r2, #30
 8005bd4:	680e      	ldr	r6, [r1, #0]
 8005bd6:	bf08      	it	eq
 8005bd8:	694b      	ldreq	r3, [r1, #20]
 8005bda:	600f      	str	r7, [r1, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	2300      	movne	r3, #0
 8005be0:	eba6 0807 	sub.w	r8, r6, r7
 8005be4:	608b      	str	r3, [r1, #8]
 8005be6:	f1b8 0f00 	cmp.w	r8, #0
 8005bea:	dd9c      	ble.n	8005b26 <__sflush_r+0x1a>
 8005bec:	4643      	mov	r3, r8
 8005bee:	463a      	mov	r2, r7
 8005bf0:	6a21      	ldr	r1, [r4, #32]
 8005bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b0      	blx	r6
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	dc06      	bgt.n	8005c0a <__sflush_r+0xfe>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c08:	e78e      	b.n	8005b28 <__sflush_r+0x1c>
 8005c0a:	4407      	add	r7, r0
 8005c0c:	eba8 0800 	sub.w	r8, r8, r0
 8005c10:	e7e9      	b.n	8005be6 <__sflush_r+0xda>
 8005c12:	bf00      	nop
 8005c14:	20400001 	.word	0x20400001

08005c18 <_fflush_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	b1db      	cbz	r3, 8005c5a <_fflush_r+0x42>
 8005c22:	b118      	cbz	r0, 8005c2c <_fflush_r+0x14>
 8005c24:	6983      	ldr	r3, [r0, #24]
 8005c26:	b90b      	cbnz	r3, 8005c2c <_fflush_r+0x14>
 8005c28:	f7ff faf6 	bl	8005218 <__sinit>
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <_fflush_r+0x48>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d109      	bne.n	8005c46 <_fflush_r+0x2e>
 8005c32:	686c      	ldr	r4, [r5, #4]
 8005c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c38:	b17b      	cbz	r3, 8005c5a <_fflush_r+0x42>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c42:	f7ff bf63 	b.w	8005b0c <__sflush_r>
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <_fflush_r+0x4c>)
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	d101      	bne.n	8005c50 <_fflush_r+0x38>
 8005c4c:	68ac      	ldr	r4, [r5, #8]
 8005c4e:	e7f1      	b.n	8005c34 <_fflush_r+0x1c>
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <_fflush_r+0x50>)
 8005c52:	429c      	cmp	r4, r3
 8005c54:	bf08      	it	eq
 8005c56:	68ec      	ldreq	r4, [r5, #12]
 8005c58:	e7ec      	b.n	8005c34 <_fflush_r+0x1c>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	bd38      	pop	{r3, r4, r5, pc}
 8005c5e:	bf00      	nop
 8005c60:	08005e6c 	.word	0x08005e6c
 8005c64:	08005e8c 	.word	0x08005e8c
 8005c68:	08005e4c 	.word	0x08005e4c

08005c6c <_lseek_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4c07      	ldr	r4, [pc, #28]	; (8005c8c <_lseek_r+0x20>)
 8005c70:	4605      	mov	r5, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	6022      	str	r2, [r4, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fb f9c4 	bl	8001008 <_lseek>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_lseek_r+0x1e>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_lseek_r+0x1e>
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	2000020c 	.word	0x2000020c

08005c90 <__swhatbuf_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	460e      	mov	r6, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	b096      	sub	sp, #88	; 0x58
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	da07      	bge.n	8005cb2 <__swhatbuf_r+0x22>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	89b3      	ldrh	r3, [r6, #12]
 8005ca8:	061a      	lsls	r2, r3, #24
 8005caa:	d410      	bmi.n	8005cce <__swhatbuf_r+0x3e>
 8005cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb0:	e00e      	b.n	8005cd0 <__swhatbuf_r+0x40>
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	f000 f862 	bl	8005d7c <_fstat_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	dbf2      	blt.n	8005ca2 <__swhatbuf_r+0x12>
 8005cbc:	9a01      	ldr	r2, [sp, #4]
 8005cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cc6:	425a      	negs	r2, r3
 8005cc8:	415a      	adcs	r2, r3
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	e7ee      	b.n	8005cac <__swhatbuf_r+0x1c>
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	b016      	add	sp, #88	; 0x58
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}

08005cd8 <__smakebuf_r>:
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cdc:	079d      	lsls	r5, r3, #30
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	d507      	bpl.n	8005cf4 <__smakebuf_r+0x1c>
 8005ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	2301      	movs	r3, #1
 8005cee:	6163      	str	r3, [r4, #20]
 8005cf0:	b002      	add	sp, #8
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	ab01      	add	r3, sp, #4
 8005cf6:	466a      	mov	r2, sp
 8005cf8:	f7ff ffca 	bl	8005c90 <__swhatbuf_r>
 8005cfc:	9900      	ldr	r1, [sp, #0]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff f9c7 	bl	8005094 <_malloc_r>
 8005d06:	b948      	cbnz	r0, 8005d1c <__smakebuf_r+0x44>
 8005d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0c:	059a      	lsls	r2, r3, #22
 8005d0e:	d4ef      	bmi.n	8005cf0 <__smakebuf_r+0x18>
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	e7e3      	b.n	8005ce4 <__smakebuf_r+0xc>
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <__smakebuf_r+0x7c>)
 8005d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	6020      	str	r0, [r4, #0]
 8005d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	9b00      	ldr	r3, [sp, #0]
 8005d2c:	6163      	str	r3, [r4, #20]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	6120      	str	r0, [r4, #16]
 8005d32:	b15b      	cbz	r3, 8005d4c <__smakebuf_r+0x74>
 8005d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 f831 	bl	8005da0 <_isatty_r>
 8005d3e:	b128      	cbz	r0, 8005d4c <__smakebuf_r+0x74>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	431d      	orrs	r5, r3
 8005d50:	81a5      	strh	r5, [r4, #12]
 8005d52:	e7cd      	b.n	8005cf0 <__smakebuf_r+0x18>
 8005d54:	080051e1 	.word	0x080051e1

08005d58 <_read_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4c07      	ldr	r4, [pc, #28]	; (8005d78 <_read_r+0x20>)
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fb f8ee 	bl	8000f48 <_read>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_read_r+0x1e>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_read_r+0x1e>
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	2000020c 	.word	0x2000020c

08005d7c <_fstat_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4c07      	ldr	r4, [pc, #28]	; (8005d9c <_fstat_r+0x20>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4605      	mov	r5, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	f7fb f922 	bl	8000fd2 <_fstat>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d102      	bne.n	8005d98 <_fstat_r+0x1c>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	b103      	cbz	r3, 8005d98 <_fstat_r+0x1c>
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	2000020c 	.word	0x2000020c

08005da0 <_isatty_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4c06      	ldr	r4, [pc, #24]	; (8005dbc <_isatty_r+0x1c>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4605      	mov	r5, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	f7fb f921 	bl	8000ff2 <_isatty>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_isatty_r+0x1a>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_isatty_r+0x1a>
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	2000020c 	.word	0x2000020c

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
