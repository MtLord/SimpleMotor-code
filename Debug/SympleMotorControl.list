
SympleMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005f24  08005f24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f24  08005f24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005f9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005f9c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e86  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003073  00000000  00000000  00033f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00036fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00037f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fcef  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f126  00000000  00000000  00058a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9111  00000000  00000000  00067b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  00110cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e04 	.word	0x08005e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e04 	.word	0x08005e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_ZN3App11RestoreDataEi>:
extern bool CanRxFlag;

long tempID[20]={0,};
long count=0;
float App::RestoreData(int until)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	float temp_data=0;
 800027a:	f04f 0300 	mov.w	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<until;i++){
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	da0c      	bge.n	80002a6 <_ZN3App11RestoreDataEi+0x36>
		((unsigned char*)&temp_data)[i]=RxFIFO_Data[i];
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f107 0208 	add.w	r2, r7, #8
 8000292:	4413      	add	r3, r2
 8000294:	4909      	ldr	r1, [pc, #36]	; (80002bc <_ZN3App11RestoreDataEi+0x4c>)
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	440a      	add	r2, r1
 800029a:	7812      	ldrb	r2, [r2, #0]
 800029c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<until;i++){
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e7ee      	b.n	8000284 <_ZN3App11RestoreDataEi+0x14>
	}
	return temp_data;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	ee07 3a90 	vmov	s15, r3
}
 80002ac:	eeb0 0a67 	vmov.f32	s0, s15
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <_ZN3App7SetDutyEf>:


void App::SetDuty(float duty)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	ed87 0a00 	vstr	s0, [r7]
	switch(node_id)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	889b      	ldrh	r3, [r3, #4]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b11      	cmp	r3, #17
 80002d4:	d85b      	bhi.n	800038e <_ZN3App7SetDutyEf+0xce>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <_ZN3App7SetDutyEf+0x1c>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000325 	.word	0x08000325
 80002e0:	08000335 	.word	0x08000335
 80002e4:	08000347 	.word	0x08000347
 80002e8:	08000359 	.word	0x08000359
 80002ec:	0800038f 	.word	0x0800038f
 80002f0:	0800038f 	.word	0x0800038f
 80002f4:	0800038f 	.word	0x0800038f
 80002f8:	0800038f 	.word	0x0800038f
 80002fc:	0800038f 	.word	0x0800038f
 8000300:	0800038f 	.word	0x0800038f
 8000304:	0800038f 	.word	0x0800038f
 8000308:	0800038f 	.word	0x0800038f
 800030c:	0800038f 	.word	0x0800038f
 8000310:	0800038f 	.word	0x0800038f
 8000314:	0800038f 	.word	0x0800038f
 8000318:	0800038f 	.word	0x0800038f
 800031c:	0800036b 	.word	0x0800036b
 8000320:	0800037d 	.word	0x0800037d
	{
	case 1:
		plow->M1.setDuty(duty);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	ed97 0a00 	vldr	s0, [r7]
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f8fa 	bl	8000526 <_ZN5Motor7setDutyEf>
		break;
 8000332:	e02c      	b.n	800038e <_ZN3App7SetDutyEf+0xce>
	case 2:
			plow->M2.setDuty(duty);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3314      	adds	r3, #20
 800033a:	ed97 0a00 	vldr	s0, [r7]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f8f1 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000344:	e023      	b.n	800038e <_ZN3App7SetDutyEf+0xce>
	case 3:
			plow->M3.setDuty(duty);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3328      	adds	r3, #40	; 0x28
 800034c:	ed97 0a00 	vldr	s0, [r7]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f8e8 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000356:	e01a      	b.n	800038e <_ZN3App7SetDutyEf+0xce>
	case 4:
			plow->M4.setDuty(duty);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	333c      	adds	r3, #60	; 0x3c
 800035e:	ed97 0a00 	vldr	s0, [r7]
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f8df 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000368:	e011      	b.n	800038e <_ZN3App7SetDutyEf+0xce>
	case 17:
			plow->BL1.setDuty(duty);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3350      	adds	r3, #80	; 0x50
 8000370:	ed97 0a00 	vldr	s0, [r7]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8d6 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 800037a:	e008      	b.n	800038e <_ZN3App7SetDutyEf+0xce>
	case 18:
			plow->BL2.setDuty(duty);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	336c      	adds	r3, #108	; 0x6c
 8000382:	ed97 0a00 	vldr	s0, [r7]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f8cd 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 800038c:	bf00      	nop

	}
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop

08000398 <_ZN3App9TaskShiftEv>:

void App::TaskShift()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	if(CanRxFlag)
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <_ZN3App9TaskShiftEv+0x5c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d021      	beq.n	80003ec <_ZN3App9TaskShiftEv+0x54>
	{
		if(RXmsg.ExtId>>ORDER_BIT_Pos==SET_DUTY)
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <_ZN3App9TaskShiftEv+0x60>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d119      	bne.n	80003e6 <_ZN3App9TaskShiftEv+0x4e>
		{
			this->node_id=(RXmsg.ExtId>>NODE_ID_Pos)&0xF;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <_ZN3App9TaskShiftEv+0x60>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	091b      	lsrs	r3, r3, #4
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	f003 030f 	and.w	r3, r3, #15
 80003be:	b29a      	uxth	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	809a      	strh	r2, [r3, #4]
			if((RXmsg.ExtId&0xF)==BOARDID)//ボード番号が自分のと一致したら
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <_ZN3App9TaskShiftEv+0x60>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f003 030f 	and.w	r3, r3, #15
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10a      	bne.n	80003e6 <_ZN3App9TaskShiftEv+0x4e>
			{
				SetDuty(RestoreData(4));
 80003d0:	2104      	movs	r1, #4
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff ff4c 	bl	8000270 <_ZN3App11RestoreDataEi>
 80003d8:	eef0 7a40 	vmov.f32	s15, s0
 80003dc:	eeb0 0a67 	vmov.f32	s0, s15
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ff6d 	bl	80002c0 <_ZN3App7SetDutyEf>
			}
		}


		CanRxFlag=false;
 80003e6:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <_ZN3App9TaskShiftEv+0x5c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
	}

}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200000b4 	.word	0x200000b4
 80003f8:	20000094 	.word	0x20000094

080003fc <_Z12FilterConfigv>:
#define SET_ERROR_LED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
#define RESET_ERRORLED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);

bool CanRxFlag=false;
void FilterConfig()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterIdHigh=0x0000;
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0x0000;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;//stdid�̃f�[�^�t���[��������M
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;//��M�t�B���^��FIFO0�ɐݒ�
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank=0; //�t�B���^�o���N�ԍ���� 0-13
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //�t�B���^�X�P�[��ExtId�܂�
 800041a:	2301      	movs	r3, #1
 800041c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK; //�}�X�N���[�h
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation=ENABLE; //�t�B���^�L��
 8000422:	2301      	movs	r3, #1
 8000424:	623b      	str	r3, [r7, #32]
//	sFilterConfig.SlaveStartFilterBank=14;

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK)
 8000426:	463b      	mov	r3, r7
 8000428:	4619      	mov	r1, r3
 800042a:	480c      	ldr	r0, [pc, #48]	; (800045c <_Z12FilterConfigv+0x60>)
 800042c:	f001 f9e5 	bl	80017fa <HAL_CAN_ConfigFilter>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	bf14      	ite	ne
 8000436:	2301      	movne	r3, #1
 8000438:	2300      	moveq	r3, #0
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d002      	beq.n	8000446 <_Z12FilterConfigv+0x4a>
		{
			printf("filter config error!");
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <_Z12FilterConfigv+0x64>)
 8000442:	f004 fea3 	bl	800518c <iprintf>
		}
	HAL_CAN_Start(&hcan);
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <_Z12FilterConfigv+0x60>)
 8000448:	f001 faa1 	bl	800198e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800044c:	2102      	movs	r1, #2
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <_Z12FilterConfigv+0x60>)
 8000450:	f001 fbf3 	bl	8001c3a <HAL_CAN_ActivateNotification>
}
 8000454:	bf00      	nop
 8000456:	3728      	adds	r7, #40	; 0x28
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000c4 	.word	0x200000c4
 8000460:	08005e1c 	.word	0x08005e1c

08000464 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800046e:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000470:	2100      	movs	r1, #0
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f001 facf 	bl	8001a16 <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
	   if(rx_led>20){
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b14      	cmp	r3, #20
 8000484:	dd07      	ble.n	8000496 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		   TOGGLE_RX_LED;
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800048a:	f002 f8c1 	bl	8002610 <HAL_GPIO_TogglePin>
		   rx_led=0;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	   }
	   else{
		   rx_led++;
	   }

 }
 8000494:	e004      	b.n	80004a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		   rx_led++;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800049e:	6013      	str	r3, [r2, #0]
 }
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	20000094 	.word	0x20000094
 80004b0:	200000b4 	.word	0x200000b4
 80004b4:	200000b0 	.word	0x200000b0
 80004b8:	48000400 	.word	0x48000400

080004bc <_ZN5Motor3mapEfllll>:
	TIM_HandleTypeDef *Mhandler;
	GPIO_TypeDef *GPIOx;
	unsigned short pin;
	unsigned int channel;
	void HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre);
	long map(float x, long in_min, long in_max, long out_min, long out_max)
 80004bc:	b480      	push	{r7}
 80004be:	b087      	sub	sp, #28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6178      	str	r0, [r7, #20]
 80004c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80004c8:	60f9      	str	r1, [r7, #12]
 80004ca:	60ba      	str	r2, [r7, #8]
 80004cc:	607b      	str	r3, [r7, #4]
		{
			return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	ee07 3a90 	vmov	s15, r3
 80004d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80004dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80004e0:	6a3a      	ldr	r2, [r7, #32]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	ee07 3a90 	vmov	s15, r3
 80004ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	ee07 3a90 	vmov	s15, r3
 80004fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	ee07 3a90 	vmov	s15, r3
 800050a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800050e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000516:	ee17 3a90 	vmov	r3, s15
		}
 800051a:	4618      	mov	r0, r3
 800051c:	371c      	adds	r7, #28
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_ZN5Motor7setDutyEf>:




void Motor::setDuty(float d)
{
 8000526:	b5b0      	push	{r4, r5, r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af02      	add	r7, sp, #8
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	ed87 0a00 	vstr	s0, [r7]
		if(d>=0)
 8000532:	edd7 7a00 	vldr	s15, [r7]
 8000536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053e:	db20      	blt.n	8000582 <_ZN5Motor7setDutyEf+0x5c>
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6898      	ldr	r0, [r3, #8]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	899b      	ldrh	r3, [r3, #12]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f002 f848 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(d,0,100,0,Mhandler->Instance->ARR));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685c      	ldr	r4, [r3, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	461d      	mov	r5, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	2100      	movs	r1, #0
 800056a:	ed97 0a00 	vldr	s0, [r7]
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffa4 	bl	80004bc <_ZN5Motor3mapEfllll>
 8000574:	4603      	mov	r3, r0
 8000576:	462a      	mov	r2, r5
 8000578:	4621      	mov	r1, r4
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f8ac 	bl	80006d8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
		else if(d<0)
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
		}
}
 8000580:	e02b      	b.n	80005da <_ZN5Motor7setDutyEf+0xb4>
		else if(d<0)
 8000582:	edd7 7a00 	vldr	s15, [r7]
 8000586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800058a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058e:	d400      	bmi.n	8000592 <_ZN5Motor7setDutyEf+0x6c>
}
 8000590:	e023      	b.n	80005da <_ZN5Motor7setDutyEf+0xb4>
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6898      	ldr	r0, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	899b      	ldrh	r3, [r3, #12]
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	f002 f81f 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	685c      	ldr	r4, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	461d      	mov	r5, r3
 80005ac:	edd7 7a00 	vldr	s15, [r7]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	; 0x64
 80005c2:	2100      	movs	r1, #0
 80005c4:	eeb0 0a67 	vmov.f32	s0, s15
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ff77 	bl	80004bc <_ZN5Motor3mapEfllll>
 80005ce:	4603      	mov	r3, r0
 80005d0:	462a      	mov	r2, r5
 80005d2:	4621      	mov	r1, r4
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f87f 	bl	80006d8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <_ZN5Motor5BeginEv>:
}



void Motor::Begin()
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(Mhandler,channel) ;       //HAL�̎d�l
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f003 fae1 	bl	8003bbc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6898      	ldr	r0, [r3, #8]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	899b      	ldrh	r3, [r3, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f001 ffeb 	bl	80025e0 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZN5Motor12SetFrequencyEl>:

void Motor::SetFrequency(long freq)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
		float freqency=freq;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000626:	edc7 7a03 	vstr	s15, [r7, #12]
		unsigned short counterperiod=0;
 800062a:	2300      	movs	r3, #0
 800062c:	82fb      	strh	r3, [r7, #22]
		unsigned short Prescaler=0;
 800062e:	2300      	movs	r3, #0
 8000630:	82bb      	strh	r3, [r7, #20]
		float ajustfreq=0;
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
		long sysclock=0;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
			sysclock=HAL_RCC_GetPCLK1Freq();
 800063c:	f003 f8fc 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8000640:	4603      	mov	r3, r0
 8000642:	60bb      	str	r3, [r7, #8]

		while(ajustfreq!=freqency)
 8000644:	ed97 7a04 	vldr	s14, [r7, #16]
 8000648:	edd7 7a03 	vldr	s15, [r7, #12]
 800064c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000654:	d031      	beq.n	80006ba <_ZN5Motor12SetFrequencyEl+0xa8>
				{
					Prescaler++;
 8000656:	8abb      	ldrh	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	82bb      	strh	r3, [r7, #20]
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 800065c:	2300      	movs	r3, #0
 800065e:	82fb      	strh	r3, [r7, #22]
 8000660:	8afb      	ldrh	r3, [r7, #22]
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	4293      	cmp	r3, r2
 8000668:	d0ec      	beq.n	8000644 <_ZN5Motor12SetFrequencyEl+0x32>
				{
					ajustfreq=(float)sysclock/((float)Prescaler*((float)counterperiod+1));
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000674:	8abb      	ldrh	r3, [r7, #20]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000688:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800068c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000698:	edc7 7a04 	vstr	s15, [r7, #16]
					if(ajustfreq==freqency)
 800069c:	ed97 7a04 	vldr	s14, [r7, #16]
 80006a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	d003      	beq.n	80006b6 <_ZN5Motor12SetFrequencyEl+0xa4>
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 80006ae:	8afb      	ldrh	r3, [r7, #22]
 80006b0:	3301      	adds	r3, #1
 80006b2:	82fb      	strh	r3, [r7, #22]
 80006b4:	e7d4      	b.n	8000660 <_ZN5Motor12SetFrequencyEl+0x4e>
					{
						break;
 80006b6:	bf00      	nop
		while(ajustfreq!=freqency)
 80006b8:	e7c4      	b.n	8000644 <_ZN5Motor12SetFrequencyEl+0x32>
					}
				}

				}
		Mhandler->Instance->PSC=(unsigned short)Prescaler-1;
 80006ba:	8abb      	ldrh	r3, [r7, #20]
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
		Mhandler->Instance->ARR=(unsigned short)counterperiod;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	8afa      	ldrh	r2, [r7, #22]
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>:

void Motor::HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
	switch(channel)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b14      	cmp	r3, #20
 80006ea:	d84b      	bhi.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0x1c>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000749 	.word	0x08000749
 80006f8:	08000785 	.word	0x08000785
 80006fc:	08000785 	.word	0x08000785
 8000700:	08000785 	.word	0x08000785
 8000704:	08000753 	.word	0x08000753
 8000708:	08000785 	.word	0x08000785
 800070c:	08000785 	.word	0x08000785
 8000710:	08000785 	.word	0x08000785
 8000714:	0800075d 	.word	0x0800075d
 8000718:	08000785 	.word	0x08000785
 800071c:	08000785 	.word	0x08000785
 8000720:	08000785 	.word	0x08000785
 8000724:	08000767 	.word	0x08000767
 8000728:	08000785 	.word	0x08000785
 800072c:	08000785 	.word	0x08000785
 8000730:	08000785 	.word	0x08000785
 8000734:	08000771 	.word	0x08000771
 8000738:	08000785 	.word	0x08000785
 800073c:	08000785 	.word	0x08000785
 8000740:	08000785 	.word	0x08000785
 8000744:	0800077b 	.word	0x0800077b
	{
	case TIM_CHANNEL_1:
		htim->Instance->CCR1=compre;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000750:	e018      	b.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_2:
			htim->Instance->CCR2=compre;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800075a:	e013      	b.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_3:
			htim->Instance->CCR3=compre;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000764:	e00e      	b.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_4:
			htim->Instance->CCR4=compre;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800076e:	e009      	b.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_5:
			htim->Instance->CCR5=compre;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8000778:	e004      	b.n	8000784 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_6:
			htim->Instance->CCR6=compre;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 8000782:	bf00      	nop

	}

}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_CAN_Init+0x64>)
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_CAN_Init+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_CAN_Init+0x64>)
 800079c:	2204      	movs	r2, #4
 800079e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_CAN_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_CAN_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_CAN_Init+0x64>)
 80007ae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_CAN_Init+0x64>)
 80007b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_CAN_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_CAN_Init+0x64>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_CAN_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_CAN_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_CAN_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_CAN_Init+0x64>)
 80007dc:	2201      	movs	r2, #1
 80007de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_CAN_Init+0x64>)
 80007e2:	f000 ff0f 	bl	8001604 <HAL_CAN_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 fb00 	bl	8000df0 <Error_Handler>
  }

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000c4 	.word	0x200000c4
 80007f8:	40006400 	.word	0x40006400

080007fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a24      	ldr	r2, [pc, #144]	; (80008ac <HAL_CAN_MspInit+0xb0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d141      	bne.n	80008a2 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 8000824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_CAN_MspInit+0xb4>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800084e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000860:	2309      	movs	r3, #9
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f001 fd45 	bl	80022fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2014      	movs	r0, #20
 8000878:	f001 fd09 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800087c:	2014      	movs	r0, #20
 800087e:	f001 fd22 	bl	80022c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2015      	movs	r0, #21
 8000888:	f001 fd01 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800088c:	2015      	movs	r0, #21
 800088e:	f001 fd1a 	bl	80022c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2016      	movs	r0, #22
 8000898:	f001 fcf9 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800089c:	2016      	movs	r0, #22
 800089e:	f001 fd12 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40006400 	.word	0x40006400
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a28      	ldr	r2, [pc, #160]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a22      	ldr	r2, [pc, #136]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_GPIO_Init+0xbc>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_GPIO_Init+0xbc>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_GPIO_Init+0xbc>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 fe60 	bl	80025e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2133      	movs	r1, #51	; 0x33
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0xc0>)
 8000926:	f001 fe5b 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 PA8 PA9 
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800092a:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 800092e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f001 fcd9 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800094a:	2333      	movs	r3, #51	; 0x33
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0xc0>)
 8000962:	f001 fccb 	bl	80022fc <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>:
public:
	Motor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,unsigned short _pin,unsigned int _channel):
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	807b      	strh	r3, [r7, #2]
		Mhandler(Mhand),GPIOx(_GPIOx),pin(_pin),channel(_channel)
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj+0x3c>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	819a      	strh	r2, [r3, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	611a      	str	r2, [r3, #16]
	{

	}
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	08005e4c 	.word	0x08005e4c

080009b8 <_ZN5MotorD1Ev>:
	virtual ~Motor(){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <_ZN5MotorD1Ev+0x1c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
	}
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	08005e4c 	.word	0x08005e4c

080009d8 <_ZN5MotorD0Ev>:
	virtual ~Motor(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	}
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffe9 	bl	80009b8 <_ZN5MotorD1Ev>
 80009e6:	2114      	movs	r1, #20
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f004 fae8 	bl	8004fbe <_ZdlPvj>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>:
{
private:
	GPIO_TypeDef *coast;
	unsigned short coastpin;
public:
	BLMotor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,GPIO_TypeDef *_coast,unsigned short _pin,unsigned short _coastpin,unsigned int _channel):
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
		Motor(Mhand,_GPIOx,_pin,_channel),coast(_coast),coastpin(_coastpin)
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	8b3a      	ldrh	r2, [r7, #24]
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	f7ff ffb0 	bl	8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj+0x3c>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	8bba      	ldrh	r2, [r7, #28]
 8000a28:	831a      	strh	r2, [r3, #24]
	{

	}
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	08005e3c 	.word	0x08005e3c

08000a38 <_ZN6CanBusC1Emm>:
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
	void SetError();
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3318      	adds	r3, #24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2020 	strb.w	r2, [r3, #32]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30

	}
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_ZN21LowlayerHandelTypedefC1Ev>:

	Motor M1,M2,M3,M4;
	BLMotor BL1,BL2;
	CanBus extcan;
	CanBus stdcan;
	LowlayerHandelTypedef():
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	M2(&htim2,GPIOA,GPIO_PIN_7,TIM_CHANNEL_2),
	M3(&htim2,GPIOB,GPIO_PIN_0,TIM_CHANNEL_3),
	M4(&htim2,GPIOB,GPIO_PIN_1,TIM_CHANNEL_4),
	BL1(&htim3,GPIOA,GPIOA,GPIO_PIN_8,GPIO_PIN_9,TIM_CHANNEL_1),
	BL2(&htim3,GPIOA,GPIOB,GPIO_PIN_10,GPIO_PIN_4,TIM_CHANNEL_2),
	extcan(CAN_ID_EXT,CAN_RTR_DATA),stdcan(CAN_ID_STD,CAN_RTR_DATA)
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	2300      	movs	r3, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aa0:	492b      	ldr	r1, [pc, #172]	; (8000b50 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000aa2:	f7ff ff69 	bl	8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0014 	add.w	r0, r3, #20
 8000aac:	2304      	movs	r3, #4
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ab6:	4926      	ldr	r1, [pc, #152]	; (8000b50 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000ab8:	f7ff ff5e 	bl	8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000aca:	4921      	ldr	r1, [pc, #132]	; (8000b50 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000acc:	f7ff ff54 	bl	8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2302      	movs	r3, #2
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000ade:	491c      	ldr	r1, [pc, #112]	; (8000b50 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000ae0:	f7ff ff4a 	bl	8000978 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000aea:	2300      	movs	r3, #0
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000afe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b02:	4915      	ldr	r1, [pc, #84]	; (8000b58 <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000b04:	f7ff ff78 	bl	80009f8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8000b0e:	2304      	movs	r3, #4
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	2310      	movs	r3, #16
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000b1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000b24:	f7ff ff68 	bl	80009f8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3388      	adds	r3, #136	; 0x88
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff81 	bl	8000a38 <_ZN6CanBusC1Emm>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	33bc      	adds	r3, #188	; 0xbc
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff7a 	bl	8000a38 <_ZN6CanBusC1Emm>
	{

	}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000138 	.word	0x20000138
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200000ec 	.word	0x200000ec

08000b5c <_ZN21LowlayerHandelTypedef10DebugMotorEif>:
	void LedCheck()
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
		HAL_Delay(500);
	}
	void DebugMotor(int num,float duty)
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	ed87 0a01 	vstr	s0, [r7, #4]
	{
		switch(num)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d832      	bhi.n	8000bd8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x1c>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000b99 	.word	0x08000b99
 8000b7c:	08000ba7 	.word	0x08000ba7
 8000b80:	08000bb7 	.word	0x08000bb7
 8000b84:	08000bc7 	.word	0x08000bc7
 8000b88:	08000bd7 	.word	0x08000bd7
 8000b8c:	08000bd7 	.word	0x08000bd7
 8000b90:	08000bd7 	.word	0x08000bd7
 8000b94:	08000bd7 	.word	0x08000bd7
		{
		case 1:
			M1.setDuty(duty);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fcc1 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000ba4:	e018      	b.n	8000bd8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 2:
			M2.setDuty(duty);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3314      	adds	r3, #20
 8000baa:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fcb9 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000bb4:	e010      	b.n	8000bd8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 3:
			M3.setDuty(duty);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3328      	adds	r3, #40	; 0x28
 8000bba:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fcb1 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000bc4:	e008      	b.n	8000bd8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 4:
			M4.setDuty(duty);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	333c      	adds	r3, #60	; 0x3c
 8000bca:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fca9 	bl	8000526 <_ZN5Motor7setDutyEf>
			break;
 8000bd4:	e000      	b.n	8000bd8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 5:

			break;
 8000bd6:	bf00      	nop
			break;
		case 8:

			break;
		}
	}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZN3AppC1EP21LowlayerHandelTypedef>:
	float RestoreData(int until);
	//long  RestoreData(int until);
	unsigned short node_id=0;
	unsigned short board_id=0;
public:
	App(LowlayerHandelTypedef *_plow):plow(_plow)
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	809a      	strh	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	80da      	strh	r2, [r3, #6]
	{
	}
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0be      	sub	sp, #248	; 0xf8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fc6f 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f87d 	bl	8000d14 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f7ff fe4b 	bl	80008b4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c1e:	f7ff fdb7 	bl	8000790 <MX_CAN_Init>
  MX_TIM2_Init();
 8000c22:	f000 fa5f 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c26:	f000 fad7 	bl	80011d8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c2a:	f000 fbc5 	bl	80013b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LowlayerHandelTypedef hlow;
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff2a 	bl	8000a8c <_ZN21LowlayerHandelTypedefC1Ev>

  hlow.M1.SetFrequency(25000);
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fce6 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  hlow.M2.SetFrequency(25000);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	3314      	adds	r3, #20
 8000c4c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcde 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  hlow.M3.SetFrequency(25000);
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fcd6 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  hlow.M4.SetFrequency(25000);
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	333c      	adds	r3, #60	; 0x3c
 8000c6c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fcce 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  hlow.BL1.SetFrequency(40000);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	3350      	adds	r3, #80	; 0x50
 8000c7c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcc6 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  hlow.BL2.SetFrequency(40000);
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	336c      	adds	r3, #108	; 0x6c
 8000c8c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fcbe 	bl	8000612 <_ZN5Motor12SetFrequencyEl>
  HAL_Delay(100);
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f000 fc92 	bl	80015c0 <HAL_Delay>

  hlow.M1.Begin();
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc9e 	bl	80005e2 <_ZN5Motor5BeginEv>
  hlow.M2.Begin();
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	3314      	adds	r3, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc98 	bl	80005e2 <_ZN5Motor5BeginEv>
  hlow.M3.Begin();
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	3328      	adds	r3, #40	; 0x28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc92 	bl	80005e2 <_ZN5Motor5BeginEv>
  hlow.M4.Begin();
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	333c      	adds	r3, #60	; 0x3c
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fc8c 	bl	80005e2 <_ZN5Motor5BeginEv>
  hlow.BL1.Begin();
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	3350      	adds	r3, #80	; 0x50
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc86 	bl	80005e2 <_ZN5Motor5BeginEv>
  hlow.BL2.Begin();
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	336c      	adds	r3, #108	; 0x6c
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc80 	bl	80005e2 <_ZN5Motor5BeginEv>

  App app(&hlow);
 8000ce2:	f107 0208 	add.w	r2, r7, #8
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff78 	bl	8000be0 <_ZN3AppC1EP21LowlayerHandelTypedef>
  FilterConfig();
 8000cf0:	f7ff fb84 	bl	80003fc <_Z12FilterConfigv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RUN
	  app.TaskShift();
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fb4e 	bl	8000398 <_ZN3App9TaskShiftEv>
#endif
#ifdef DEBUG
	  hlow.DebugMotor(1,-90);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000d10 <main+0x104>
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff28 	bl	8000b5c <_ZN21LowlayerHandelTypedef10DebugMotorEif>
	  app.TaskShift();
 8000d0c:	e7f2      	b.n	8000cf4 <main+0xe8>
 8000d0e:	bf00      	nop
 8000d10:	c2b40000 	.word	0xc2b40000

08000d14 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 f982 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fc68 	bl	8002644 <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000d84:	f000 f834 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	230f      	movs	r3, #15
 8000d8a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2102      	movs	r1, #2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fb55 	bl	8003454 <HAL_RCC_ClockConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000dba:	f000 f819 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000dbe:	f241 0301 	movw	r3, #4097	; 0x1001
 8000dc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fd76 	bl	80038c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf14      	ite	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	2300      	moveq	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000de4:	f000 f804 	bl	8000df0 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3758      	adds	r7, #88	; 0x58
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_ZN7BLMotorD1Ev>:
class BLMotor:public Motor
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_ZN7BLMotorD1Ev+0x20>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fdd1 	bl	80009b8 <_ZN5MotorD1Ev>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	08005e3c 	.word	0x08005e3c

08000e24 <_ZN7BLMotorD0Ev>:
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffe7 	bl	8000e00 <_ZN7BLMotorD1Ev>
 8000e32:	211c      	movs	r1, #28
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f004 f8c2 	bl	8004fbe <_ZdlPvj>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e4c:	1d39      	adds	r1, r7, #4
 8000e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e52:	2201      	movs	r2, #1
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <__io_putchar+0x20>)
 8000e56:	f003 fcad 	bl	80047b4 <HAL_UART_Transmit>

  return ch;
 8000e5a:	687b      	ldr	r3, [r7, #4]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000184 	.word	0x20000184

08000e68 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint8_t ch = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 8000e74:	f107 010f 	add.w	r1, r7, #15
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <__io_getchar+0x40>)
 8000e80:	f003 fd2c 	bl	80048dc <HAL_UART_Receive>

  if (ch == '\r')
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	d104      	bne.n	8000e94 <__io_getchar+0x2c>
  {
      __io_putchar('\r');
 8000e8a:	200d      	movs	r0, #13
 8000e8c:	f7ff ffda 	bl	8000e44 <__io_putchar>
      ch = '\n';
 8000e90:	230a      	movs	r3, #10
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  return __io_putchar(ch);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffd4 	bl	8000e44 <__io_putchar>
 8000e9c:	4603      	mov	r3, r0
//  return ch;
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000184 	.word	0x20000184

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_MspInit+0x44>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_MspInit+0x44>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 fb1a 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <CAN_RX0_IRQHandler+0x10>)
 8000f56:	f000 fe96 	bl	8001c86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000c4 	.word	0x200000c4

08000f64 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <CAN_RX1_IRQHandler+0x10>)
 8000f6a:	f000 fe8c 	bl	8001c86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <CAN_SCE_IRQHandler+0x10>)
 8000f7e:	f000 fe82 	bl	8001c86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000c4 	.word	0x200000c4

08000f8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e00a      	b.n	8000fb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f9e:	f7ff ff63 	bl	8000e68 <__io_getchar>
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	b2ca      	uxtb	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbf0      	blt.n	8000f9e <_read+0x12>
	}

return len;
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e009      	b.n	8000fec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff2f 	bl	8000e44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf1      	blt.n	8000fd8 <_write+0x12>
	}
	return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_close>:

int _close(int file)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	return -1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001026:	605a      	str	r2, [r3, #4]
	return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_isatty>:

int _isatty(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	return 1;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x50>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x16>
		heap_end = &end;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <_sbrk+0x50>)
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <_sbrk+0x54>)
 800107c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <_sbrk+0x50>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <_sbrk+0x50>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	466a      	mov	r2, sp
 800108e:	4293      	cmp	r3, r2
 8001090:	d907      	bls.n	80010a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001092:	f003 ff99 	bl	8004fc8 <__errno>
 8001096:	4602      	mov	r2, r0
 8001098:	230c      	movs	r3, #12
 800109a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a0:	e006      	b.n	80010b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <_sbrk+0x50>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <_sbrk+0x50>)
 80010ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000b8 	.word	0x200000b8
 80010bc:	20000210 	.word	0x20000210

080010c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800112e:	4829      	ldr	r0, [pc, #164]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001130:	f002 fcec 	bl	8003b0c <HAL_TIM_PWM_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800113a:	f7ff fe59 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800114e:	f003 fa75 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001158:	f7ff fe4a 	bl	8000df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4818      	ldr	r0, [pc, #96]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001174:	f002 fe0e 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800117e:	f7ff fe37 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	2204      	movs	r2, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800118a:	f002 fe03 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001194:	f7ff fe2c 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2208      	movs	r2, #8
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM2_Init+0xf0>)
 80011a0:	f002 fdf8 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80011aa:	f7ff fe21 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	220c      	movs	r2, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM2_Init+0xf0>)
 80011b6:	f002 fded 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80011c0:	f7ff fe16 	bl	8000df0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM2_Init+0xf0>)
 80011c6:	f000 f89d 	bl	8001304 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000138 	.word	0x20000138

080011d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_TIM3_Init+0xc0>)
 80011fe:	4a27      	ldr	r2, [pc, #156]	; (800129c <MX_TIM3_Init+0xc4>)
 8001200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_TIM3_Init+0xc0>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_TIM3_Init+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001222:	f002 fc73 	bl	8003b0c <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fde0 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001240:	f003 f9fc 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800124a:	f7ff fdd1 	bl	8000df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_TIM3_Init+0xc0>)
 8001266:	f002 fd95 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001270:	f7ff fdbe 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM3_Init+0xc0>)
 800127c:	f002 fd8a 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001286:	f7ff fdb3 	bl	8000df0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM3_Init+0xc0>)
 800128c:	f000 f83a 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000ec 	.word	0x200000ec
 800129c:	40000400 	.word	0x40000400

080012a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d10c      	bne.n	80012cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012ca:	e010      	b.n	80012ee <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_TIM_PWM_MspInit+0x60>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10b      	bne.n	80012ee <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_TIM_PWM_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	40000400 	.word	0x40000400

08001304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d11d      	bne.n	8001362 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	6153      	str	r3, [r2, #20]
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800133e:	230f      	movs	r3, #15
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f000 ffce 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001360:	e021      	b.n	80013a6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <HAL_TIM_MspPostInit+0xb0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d11c      	bne.n	80013a6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	6153      	str	r3, [r2, #20]
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_TIM_MspPostInit+0xac>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001384:	2350      	movs	r3, #80	; 0x50
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001394:	2302      	movs	r3, #2
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 ffab 	bl	80022fc <HAL_GPIO_Init>
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40000400 	.word	0x40000400

080013b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <MX_USART1_UART_Init+0x5c>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013c4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART1_UART_Init+0x58>)
 80013fc:	f003 f98c 	bl	8004718 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001406:	f7ff fcf3 	bl	8000df0 <Error_Handler>
  }

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000184 	.word	0x20000184
 8001414:	40013800 	.word	0x40013800

08001418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_UART_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d127      	bne.n	800148a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x80>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_UART_MspInit+0x80>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_UART_MspInit+0x80>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_UART_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_UART_MspInit+0x80>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_UART_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147a:	2307      	movs	r3, #7
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_UART_MspInit+0x84>)
 8001486:	f000 ff39 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40013800 	.word	0x40013800
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ca:	f7ff fdf9 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f003 fd81 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff fb9b 	bl	8000c0c <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014e4:	08005f2c 	.word	0x08005f2c
  ldr r2, =_sbss
 80014e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014ec:	20000210 	.word	0x20000210

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_Init+0x28>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_Init+0x28>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 feb7 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f808 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff fccc 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x54>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fecf 	bl	80022e2 <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800155c:	f000 fe97 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_InitTick+0x5c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000208 	.word	0x20000208

080015a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000208 	.word	0x20000208

080015c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_Delay+0x40>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0ed      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff f8ea 	bl	80007fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0202 	bic.w	r2, r2, #2
 8001636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff ffb6 	bl	80015a8 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800163e:	e012      	b.n	8001666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001640:	f7ff ffb2 	bl	80015a8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d90b      	bls.n	8001666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2205      	movs	r2, #5
 800165e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0c5      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e5      	bne.n	8001640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff ff90 	bl	80015a8 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168a:	e012      	b.n	80016b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800168c:	f7ff ff8c 	bl	80015a8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e09f      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0e5      	beq.n	800168c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e007      	b.n	80016ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7e5b      	ldrb	r3, [r3, #25]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e007      	b.n	8001714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e9b      	ldrb	r3, [r3, #26]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0220 	orr.w	r2, r2, #32
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e007      	b.n	800173e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0220 	bic.w	r2, r2, #32
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7edb      	ldrb	r3, [r3, #27]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0210 	bic.w	r2, r2, #16
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0210 	orr.w	r2, r2, #16
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e007      	b.n	8001792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7f5b      	ldrb	r3, [r3, #29]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0204 	orr.w	r2, r2, #4
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e007      	b.n	80017bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	ea42 0103 	orr.w	r1, r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b087      	sub	sp, #28
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d003      	beq.n	8001820 <HAL_CAN_ConfigFilter+0x26>
 8001818:	7cfb      	ldrb	r3, [r7, #19]
 800181a:	2b02      	cmp	r3, #2
 800181c:	f040 80aa 	bne.w	8001974 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d123      	bne.n	80018a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800187c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3248      	adds	r2, #72	; 0x48
 8001882:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001896:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	3348      	adds	r3, #72	; 0x48
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d122      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3248      	adds	r2, #72	; 0x48
 80018d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e6:	6979      	ldr	r1, [r7, #20]
 80018e8:	3348      	adds	r3, #72	; 0x48
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800190a:	e007      	b.n	800191c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001936:	e007      	b.n	8001948 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	431a      	orrs	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001966:	f023 0201 	bic.w	r2, r3, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e006      	b.n	8001982 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12e      	bne.n	8001a00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019ba:	f7ff fdf5 	bl	80015a8 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019c0:	e012      	b.n	80019e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c2:	f7ff fdf1 	bl	80015a8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d90b      	bls.n	80019e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2205      	movs	r2, #5
 80019e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e012      	b.n	8001a0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e5      	bne.n	80019c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e006      	b.n	8001a0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
  }
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a16:	b480      	push	{r7}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_GetRxMessage+0x24>
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80f3 	bne.w	8001c20 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10e      	bne.n	8001a5e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0e7      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0d8      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	331b      	adds	r3, #27
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0204 	and.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	331b      	adds	r3, #27
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0d5b      	lsrs	r3, r3, #21
 8001aaa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	331b      	adds	r3, #27
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	08db      	lsrs	r3, r3, #3
 8001ac4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	331b      	adds	r3, #27
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0202 	and.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	331b      	adds	r3, #27
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	331b      	adds	r3, #27
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	3304      	adds	r3, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0a1a      	lsrs	r2, r3, #8
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0c1a      	lsrs	r2, r3, #16
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e1a      	lsrs	r2, r3, #24
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3303      	adds	r3, #3
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0a1a      	lsrs	r2, r3, #8
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3305      	adds	r3, #5
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0c1a      	lsrs	r2, r3, #16
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e1a      	lsrs	r2, r3, #24
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3307      	adds	r3, #7
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e006      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d002      	beq.n	8001c58 <HAL_CAN_ActivateNotification+0x1e>
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d109      	bne.n	8001c6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6959      	ldr	r1, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b08a      	sub	sp, #40	; 0x28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d07c      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d023      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f97d 	bl	8001fe8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cee:	e016      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	e00c      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	e002      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f983 	bl	8002024 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d024      	beq.n	8001d72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f95d 	bl	8001ffc <HAL_CAN_TxMailbox1CompleteCallback>
 8001d42:	e016      	b.n	8001d72 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e00c      	b.n	8001d72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e002      	b.n	8001d72 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f963 	bl	8002038 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d024      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f93d 	bl	8002010 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d96:	e016      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e00c      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	e002      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f943 	bl	800204c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00c      	beq.n	8001dea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2210      	movs	r2, #16
 8001de8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2208      	movs	r2, #8
 8001e04:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f92a 	bl	8002060 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe fb1d 	bl	8000464 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00c      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2208      	movs	r2, #8
 8001e68:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f90c 	bl	8002088 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8f3 	bl	8002074 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8f6 	bl	800209c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8ef 	bl	80020b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d075      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d03d      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d038      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	d017      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x302>
 8001f58:	2b30      	cmp	r3, #48	; 0x30
 8001f5a:	d804      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x2e0>
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d009      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x2ee>
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d00c      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f64:	e024      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f66:	2b50      	cmp	r3, #80	; 0x50
 8001f68:	d018      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x316>
 8001f6a:	2b60      	cmp	r3, #96	; 0x60
 8001f6c:	d01b      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x320>
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d00f      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f72:	e01d      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f043 0308 	orr.w	r3, r3, #8
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7c:	e018      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f86:	e013      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f90:	e00e      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fa4:	e004      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fbe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f872 	bl	80020c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff3e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff31 	bl	800213c <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e14e      	b.n	80025aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8140 	beq.w	80025a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00b      	beq.n	8002344 <HAL_GPIO_Init+0x48>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002338:	2b11      	cmp	r3, #17
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b12      	cmp	r3, #18
 8002342:	d130      	bne.n	80023a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800237a:	2201      	movs	r2, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 0201 	and.w	r2, r3, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0xea>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 809a 	beq.w	80025a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1e0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a46      	ldr	r2, [pc, #280]	; (80025d0 <HAL_GPIO_Init+0x2d4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1dc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a45      	ldr	r2, [pc, #276]	; (80025d4 <HAL_GPIO_Init+0x2d8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1d8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_GPIO_Init+0x2dc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1d4>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1e2>
 80024d0:	2305      	movs	r3, #5
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1e2>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1e2>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1e2>
 80024dc:	2300      	movs	r3, #0
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ee:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002520:	4a2e      	ldr	r2, [pc, #184]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_GPIO_Init+0x2e0>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aea9 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48000800 	.word	0x48000800
 80025d8:	48000c00 	.word	0x48000c00
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43d9      	mvns	r1, r3
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	400b      	ands	r3, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800264a:	af00      	add	r7, sp, #0
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f000 bef4 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 816a 	beq.w	8002942 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800266e:	4bb3      	ldr	r3, [pc, #716]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800267a:	4bb0      	ldr	r3, [pc, #704]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	d159      	bne.n	800273a <HAL_RCC_OscConfig+0xf6>
 8002686:	4bad      	ldr	r3, [pc, #692]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d152      	bne.n	800273a <HAL_RCC_OscConfig+0xf6>
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x82>
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0xae>
 80026c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002706:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 810c 	beq.w	8002940 <HAL_RCC_OscConfig+0x2fc>
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 8106 	bne.w	8002940 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f000 be86 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x110>
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e030      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x134>
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01e      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x15a>
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6c      	ldr	r2, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800278a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a63      	ldr	r2, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	495d      	ldr	r1, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d059      	beq.n	8002888 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fee8 	bl	80015a8 <HAL_GetTick>
 80027d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027de:	f7fe fee3 	bl	80015a8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d902      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f000 be29 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 80027f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002808:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x1e2>
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x20e>
 8002826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002842:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002856:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800285a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002866:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ab      	beq.n	80027de <HAL_RCC_OscConfig+0x19a>
 8002886:	e05c      	b.n	8002942 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fe8e 	bl	80015a8 <HAL_GetTick>
 800288c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002892:	f7fe fe89 	bl	80015a8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d902      	bls.n	80028a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f000 bdcf 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 80028a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x296>
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x2c2>
 80028da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800290a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800290e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002912:	fa92 f2a2 	rbit	r2, r2
 8002916:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800291a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0220 	orr.w	r2, r2, #32
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ab      	bne.n	8002892 <HAL_RCC_OscConfig+0x24e>
 800293a:	e002      	b.n	8002942 <HAL_RCC_OscConfig+0x2fe>
 800293c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 816f 	beq.w	8002c30 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002952:	4bd0      	ldr	r3, [pc, #832]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800295e:	4bcd      	ldr	r3, [pc, #820]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d16c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x400>
 800296a:	4bca      	ldr	r3, [pc, #808]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d166      	bne.n	8002a44 <HAL_RCC_OscConfig+0x400>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002988:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_OscConfig+0x362>
 80029a0:	4bbc      	ldr	r3, [pc, #752]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e013      	b.n	80029ce <HAL_RCC_OscConfig+0x38a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029ca:	4bb2      	ldr	r3, [pc, #712]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2202      	movs	r2, #2
 80029d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029d8:	fa92 f2a2 	rbit	r2, r2
 80029dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f000 bd1b 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	21f8      	movs	r1, #248	; 0xf8
 8002a20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a28:	fa91 f1a1 	rbit	r1, r1
 8002a2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a34:	fab1 f181 	clz	r1, r1
 8002a38:	b2c9      	uxtb	r1, r1
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	4995      	ldr	r1, [pc, #596]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e0f5      	b.n	8002c30 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8085 	beq.w	8002b5a <HAL_RCC_OscConfig+0x516>
 8002a50:	2301      	movs	r3, #1
 8002a52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fd94 	bl	80015a8 <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fd8f 	bl	80015a8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	f000 bcd5 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002aae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x488>
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x4b0>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ae4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0af      	beq.n	8002a86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	21f8      	movs	r1, #248	; 0xf8
 8002b36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b3e:	fa91 f1a1 	rbit	r1, r1
 8002b42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b4a:	fab1 f181 	clz	r1, r1
 8002b4e:	b2c9      	uxtb	r1, r1
 8002b50:	408b      	lsls	r3, r1
 8002b52:	4950      	ldr	r1, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e06a      	b.n	8002c30 <HAL_RCC_OscConfig+0x5ec>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	2300      	movs	r3, #0
 8002b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fd0f 	bl	80015a8 <HAL_GetTick>
 8002b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe fd0a 	bl	80015a8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f000 bc50 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x592>
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e013      	b.n	8002bfe <HAL_RCC_OscConfig+0x5ba>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002be8:	2302      	movs	r3, #2
 8002bea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c10:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f002 021f 	and.w	r2, r2, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1af      	bne.n	8002b90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80da 	beq.w	8002df4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d069      	beq.n	8002d1e <HAL_RCC_OscConfig+0x6da>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x654>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fc98 	bl	80015a8 <HAL_GetTick>
 8002c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fc93 	bl	80015a8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d906      	bls.n	8002c9c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e3d9      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	10908120 	.word	0x10908120
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	6019      	str	r1, [r3, #0]
 8002cea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f1a3 	rbit	r1, r3
 8002cf4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cf8:	6019      	str	r1, [r3, #0]
  return result;
 8002cfa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0b0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x63a>
 8002d1c:	e06a      	b.n	8002df4 <HAL_RCC_OscConfig+0x7b0>
 8002d1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d34:	601a      	str	r2, [r3, #0]
  return result;
 8002d36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d3a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b8c      	ldr	r3, [pc, #560]	; (8002f78 <HAL_RCC_OscConfig+0x934>)
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe fc2a 	bl	80015a8 <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fc25 	bl	80015a8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e36b      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002d6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d72:	2202      	movs	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002da2:	2202      	movs	r2, #2
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002db4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db6:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	6019      	str	r1, [r3, #0]
 8002dc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f1a3 	rbit	r1, r3
 8002dcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dd0:	6019      	str	r1, [r3, #0]
  return result;
 8002dd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1b2      	bne.n	8002d5a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8158 	beq.w	80030b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11a      	bne.n	8002e7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fe fba8 	bl	80015a8 <HAL_GetTick>
 8002e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e009      	b.n	8002e72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe fba3 	bl	80015a8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e2e9      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ef      	beq.n	8002e5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x852>
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x876>
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e01d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x89a>
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fb52 	bl	80015a8 <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fb4d 	bl	80015a8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e291      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002f22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f50:	601a      	str	r2, [r3, #0]
  return result;
 8002f52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCC_OscConfig+0x93c>
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x958>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	10908120 	.word	0x10908120
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	4bbb      	ldr	r3, [pc, #748]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	6011      	str	r1, [r2, #0]
 8002fa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fa92 f1a2 	rbit	r1, r2
 8002fae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fb2:	6011      	str	r1, [r2, #0]
  return result;
 8002fb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	fab2 f282 	clz	r2, r2
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f002 021f 	and.w	r2, r2, #31
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d099      	beq.n	8002f0a <HAL_RCC_OscConfig+0x8c6>
 8002fd6:	e063      	b.n	80030a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fae6 	bl	80015a8 <HAL_GetTick>
 8002fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe fae1 	bl	80015a8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e225      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003016:	2202      	movs	r2, #2
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800302e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0xa06>
 8003044:	4b90      	ldr	r3, [pc, #576]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	e00d      	b.n	8003066 <HAL_RCC_OscConfig+0xa22>
 800304a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800304e:	2202      	movs	r2, #2
 8003050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	4b89      	ldr	r3, [pc, #548]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800306a:	2102      	movs	r1, #2
 800306c:	6011      	str	r1, [r2, #0]
 800306e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	fa92 f1a2 	rbit	r1, r2
 8003078:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800307c:	6011      	str	r1, [r2, #0]
  return result;
 800307e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f002 021f 	and.w	r2, r2, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1a0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b77      	ldr	r3, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81c2 	beq.w	8003444 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c0:	4b71      	ldr	r3, [pc, #452]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	f000 819c 	beq.w	8003406 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 8114 	bne.w	8003302 <HAL_RCC_OscConfig+0xcbe>
 80030da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030f2:	601a      	str	r2, [r3, #0]
  return result;
 80030f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fa4a 	bl	80015a8 <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	e009      	b.n	800312e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fa45 	bl	80015a8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e18b      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 800312e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800314c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0xb24>
 8003162:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e01b      	b.n	80031a0 <HAL_RCC_OscConfig+0xb5c>
 8003168:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800316c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	fa92 f1a2 	rbit	r1, r2
 80031b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031b8:	6011      	str	r1, [r2, #0]
  return result;
 80031ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d19e      	bne.n	800311a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003216:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003222:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fe f9bb 	bl	80015a8 <HAL_GetTick>
 8003232:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003236:	e009      	b.n	800324c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f9b6 	bl	80015a8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0fc      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003264:	601a      	str	r2, [r3, #0]
  return result;
 8003266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0xc48>
 8003280:	4b01      	ldr	r3, [pc, #4]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e01e      	b.n	80032c4 <HAL_RCC_OscConfig+0xc80>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032dc:	6011      	str	r1, [r2, #0]
  return result;
 80032de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	fab2 f282 	clz	r2, r2
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	f002 021f 	and.w	r2, r2, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f202 	lsl.w	r2, r1, r2
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d09b      	beq.n	8003238 <HAL_RCC_OscConfig+0xbf4>
 8003300:	e0a0      	b.n	8003444 <HAL_RCC_OscConfig+0xe00>
 8003302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331a:	601a      	str	r2, [r3, #0]
  return result;
 800331c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003320:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2300      	movs	r3, #0
 8003336:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe f936 	bl	80015a8 <HAL_GetTick>
 800333c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	e009      	b.n	8003356 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe f931 	bl	80015a8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e077      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8003356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0xd4c>
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e01b      	b.n	80033c8 <HAL_RCC_OscConfig+0xd84>
 8003390:	f107 0320 	add.w	r3, r7, #32
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f107 0320 	add.w	r3, r7, #32
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f107 0318 	add.w	r3, r7, #24
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f107 0318 	add.w	r3, r7, #24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	f107 0210 	add.w	r2, r7, #16
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fa92 f1a2 	rbit	r1, r2
 80033dc:	f107 020c 	add.w	r2, r7, #12
 80033e0:	6011      	str	r1, [r2, #0]
  return result;
 80033e2:	f107 020c 	add.w	r2, r7, #12
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f042 0220 	orr.w	r2, r2, #32
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f002 021f 	and.w	r2, r2, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d19e      	bne.n	8003342 <HAL_RCC_OscConfig+0xcfe>
 8003404:	e01e      	b.n	8003444 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800341c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	429a      	cmp	r2, r3
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800342e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b09e      	sub	sp, #120	; 0x78
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e162      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	498b      	ldr	r1, [pc, #556]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e14a      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	497f      	ldr	r1, [pc, #508]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80dc 	beq.w	8003680 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d13c      	bne.n	800354a <HAL_RCC_ClockConfig+0xf6>
 80034d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_ClockConfig+0xa6>
 80034f4:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	e00f      	b.n	800351a <HAL_RCC_ClockConfig+0xc6>
 80034fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
 8003508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350c:	663b      	str	r3, [r7, #96]	; 0x60
 800350e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800351e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003522:	fa92 f2a2 	rbit	r2, r2
 8003526:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800352a:	fab2 f282 	clz	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f042 0220 	orr.w	r2, r2, #32
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d17b      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0f3      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d13c      	bne.n	80035cc <HAL_RCC_ClockConfig+0x178>
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_ClockConfig+0x128>
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e00f      	b.n	800359c <HAL_RCC_ClockConfig+0x148>
 800357c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13a      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b2      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80035cc:	2302      	movs	r3, #2
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d102      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e00d      	b.n	8003610 <HAL_RCC_ClockConfig+0x1bc>
 80035f4:	2302      	movs	r3, #2
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	2302      	movs	r3, #2
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	61ba      	str	r2, [r7, #24]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	617a      	str	r2, [r7, #20]
  return result;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f002 021f 	and.w	r2, r2, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e079      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	491a      	ldr	r1, [pc, #104]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd ffaa 	bl	80015a8 <HAL_GetTick>
 8003654:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd ffa6 	bl	80015a8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e061      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d214      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4906      	ldr	r1, [pc, #24]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e040      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4912      	ldr	r1, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036f6:	f000 f829 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80036fa:	4601      	mov	r1, r0
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	22f0      	movs	r2, #240	; 0xf0
 8003706:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	60fa      	str	r2, [r7, #12]
  return result;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	40d3      	lsrs	r3, r2
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x2ec>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	fa21 f303 	lsr.w	r3, r1, r3
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_RCC_ClockConfig+0x2f0>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCC_ClockConfig+0x2f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fef8 	bl	8001520 <HAL_InitTick>
  
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3778      	adds	r7, #120	; 0x78
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	08005e54 	.word	0x08005e54
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b08b      	sub	sp, #44	; 0x2c
 8003750:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e03c      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 800377e:	623b      	str	r3, [r7, #32]
      break;
 8003780:	e03c      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003788:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800378c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	607a      	str	r2, [r7, #4]
  return result;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	40d3      	lsrs	r3, r2
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	220f      	movs	r2, #15
 80037b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	60fa      	str	r2, [r7, #12]
  return result;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	40d3      	lsrs	r3, r2
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037d4:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e004      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	4a0c      	ldr	r2, [pc, #48]	; (800381c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	623b      	str	r3, [r7, #32]
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037f8:	623b      	str	r3, [r7, #32]
      break;
 80037fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	372c      	adds	r7, #44	; 0x2c
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	007a1200 	.word	0x007a1200
 8003814:	08005e6c 	.word	0x08005e6c
 8003818:	08005e7c 	.word	0x08005e7c
 800381c:	003d0900 	.word	0x003d0900

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800383e:	f7ff ffef 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800384c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003850:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	fa92 f2a2 	rbit	r2, r2
 8003858:	603a      	str	r2, [r7, #0]
  return result;
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	40d3      	lsrs	r3, r2
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08005e64 	.word	0x08005e64

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003882:	f7ff ffcd 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003886:	4601      	mov	r1, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003890:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003894:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	fa92 f2a2 	rbit	r2, r2
 800389c:	603a      	str	r2, [r7, #0]
  return result;
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	fab2 f282 	clz	r2, r2
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	40d3      	lsrs	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08005e64 	.word	0x08005e64

080038c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b092      	sub	sp, #72	; 0x48
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80cd 	beq.w	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e4:	4b86      	ldr	r3, [pc, #536]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b83      	ldr	r3, [pc, #524]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a82      	ldr	r2, [pc, #520]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
 80038fc:	4b80      	ldr	r3, [pc, #512]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d118      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a79      	ldr	r2, [pc, #484]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fd fe3f 	bl	80015a8 <HAL_GetTick>
 800392a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fd fe3b 	bl	80015a8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	; 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0db      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003966:	429a      	cmp	r2, r3
 8003968:	d076      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003978:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	2301      	movs	r3, #1
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039bc:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d045      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fd fdec 	bl	80015a8 <HAL_GetTick>
 80039d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fd fde8 	bl	80015a8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e086      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039ea:	2302      	movs	r3, #2
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	2302      	movs	r3, #2
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	61fb      	str	r3, [r7, #28]
  return result;
 8003a02:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d102      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	e007      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2202      	movs	r2, #2
 8003a30:	613a      	str	r2, [r7, #16]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	fa92 f2a2 	rbit	r2, r2
 8003a38:	60fa      	str	r2, [r7, #12]
  return result;
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f002 021f 	and.w	r2, r2, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0bd      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4926      	ldr	r1, [pc, #152]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	491a      	ldr	r1, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f023 0210 	bic.w	r2, r3, #16
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	490b      	ldr	r1, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3748      	adds	r7, #72	; 0x48
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
 8003b08:	10908100 	.word	0x10908100

08003b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e049      	b.n	8003bb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fbb4 	bl	80012a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 fa32 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x24>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e03c      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d109      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e02f      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x72>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x8c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e088      	b.n	8003d74 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xb6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	e023      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xc6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	e01b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xd6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	e013      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xe6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xf6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	e003      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fc94 	bl	80045f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <HAL_TIM_PWM_Start+0x1c0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_TIM_PWM_Start+0x1c4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a28      	ldr	r2, [pc, #160]	; (8003d84 <HAL_TIM_PWM_Start+0x1c8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <HAL_TIM_PWM_Start+0x1cc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIM_PWM_Start+0x138>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x13a>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_TIM_PWM_Start+0x1c0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x176>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d009      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x176>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_TIM_PWM_Start+0x1d0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x176>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_TIM_PWM_Start+0x1c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d115      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_TIM_PWM_Start+0x1d4>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d015      	beq.n	8003d70 <HAL_TIM_PWM_Start+0x1b4>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d011      	beq.n	8003d70 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5c:	e008      	b.n	8003d70 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e000      	b.n	8003d72 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e0fd      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x216>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b14      	cmp	r3, #20
 8003dba:	f200 80f0 	bhi.w	8003f9e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003f9f 	.word	0x08003f9f
 8003dcc:	08003f9f 	.word	0x08003f9f
 8003dd0:	08003f9f 	.word	0x08003f9f
 8003dd4:	08003e59 	.word	0x08003e59
 8003dd8:	08003f9f 	.word	0x08003f9f
 8003ddc:	08003f9f 	.word	0x08003f9f
 8003de0:	08003f9f 	.word	0x08003f9f
 8003de4:	08003e9b 	.word	0x08003e9b
 8003de8:	08003f9f 	.word	0x08003f9f
 8003dec:	08003f9f 	.word	0x08003f9f
 8003df0:	08003f9f 	.word	0x08003f9f
 8003df4:	08003edb 	.word	0x08003edb
 8003df8:	08003f9f 	.word	0x08003f9f
 8003dfc:	08003f9f 	.word	0x08003f9f
 8003e00:	08003f9f 	.word	0x08003f9f
 8003e04:	08003f1d 	.word	0x08003f1d
 8003e08:	08003f9f 	.word	0x08003f9f
 8003e0c:	08003f9f 	.word	0x08003f9f
 8003e10:	08003f9f 	.word	0x08003f9f
 8003e14:	08003f5d 	.word	0x08003f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f940 	bl	80040a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0208 	orr.w	r2, r2, #8
 8003e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6999      	ldr	r1, [r3, #24]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	619a      	str	r2, [r3, #24]
      break;
 8003e56:	e0a3      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f9a6 	bl	80041b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
      break;
 8003e98:	e082      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa05 	bl	80042b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0204 	bic.w	r2, r2, #4
 8003ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69d9      	ldr	r1, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
      break;
 8003ed8:	e062      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa63 	bl	80043ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	021a      	lsls	r2, r3, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	61da      	str	r2, [r3, #28]
      break;
 8003f1a:	e041      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 faa6 	bl	8004474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f5a:	e021      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fae4 	bl	8004530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	021a      	lsls	r2, r3, #8
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f9c:	e000      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a32      	ldr	r2, [pc, #200]	; (8004090 <TIM_Base_SetConfig+0xdc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x28>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x28>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <TIM_Base_SetConfig+0xe0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_Base_SetConfig+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <TIM_Base_SetConfig+0x6a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0x6a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <TIM_Base_SetConfig+0xe0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0x6a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a23      	ldr	r2, [pc, #140]	; (8004098 <TIM_Base_SetConfig+0xe4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0x6a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <TIM_Base_SetConfig+0xe8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0x6a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <TIM_Base_SetConfig+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <TIM_Base_SetConfig+0xdc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00b      	beq.n	8004074 <TIM_Base_SetConfig+0xc0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <TIM_Base_SetConfig+0xe4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <TIM_Base_SetConfig+0xc0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0d      	ldr	r2, [pc, #52]	; (800409c <TIM_Base_SetConfig+0xe8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0xc0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <TIM_Base_SetConfig+0xec>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	615a      	str	r2, [r3, #20]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40000400 	.word	0x40000400
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <TIM_OC1_SetConfig+0xfc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_OC1_SetConfig+0x78>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <TIM_OC1_SetConfig+0x100>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_OC1_SetConfig+0x78>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <TIM_OC1_SetConfig+0x104>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC1_SetConfig+0x78>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <TIM_OC1_SetConfig+0x108>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10c      	bne.n	8004136 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0308 	bic.w	r3, r3, #8
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <TIM_OC1_SetConfig+0xfc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_OC1_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <TIM_OC1_SetConfig+0x100>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_OC1_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <TIM_OC1_SetConfig+0x104>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_OC1_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <TIM_OC1_SetConfig+0x108>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d111      	bne.n	800417a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <TIM_OC2_SetConfig+0xf0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <TIM_OC2_SetConfig+0xf0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_OC2_SetConfig+0xa0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <TIM_OC2_SetConfig+0xf4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_OC2_SetConfig+0xa0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <TIM_OC2_SetConfig+0xf8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC2_SetConfig+0xa0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <TIM_OC2_SetConfig+0xfc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d113      	bne.n	8004278 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004256:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800

080042b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a23      	ldr	r2, [pc, #140]	; (800439c <TIM_OC3_SetConfig+0xec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10d      	bne.n	800432e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <TIM_OC3_SetConfig+0xec>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_OC3_SetConfig+0x9e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <TIM_OC3_SetConfig+0xf0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_OC3_SetConfig+0x9e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_OC3_SetConfig+0xf4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC3_SetConfig+0x9e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <TIM_OC3_SetConfig+0xf8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d113      	bne.n	8004376 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <TIM_OC4_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC4_SetConfig+0x7c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_OC4_SetConfig+0xbc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC4_SetConfig+0x7c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <TIM_OC4_SetConfig+0xc0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC4_SetConfig+0x7c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <TIM_OC4_SetConfig+0xc4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC5_SetConfig+0xac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00b      	beq.n	80044e6 <TIM_OC5_SetConfig+0x72>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC5_SetConfig+0xb0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_OC5_SetConfig+0x72>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <TIM_OC5_SetConfig+0xb4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_OC5_SetConfig+0x72>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a12      	ldr	r2, [pc, #72]	; (800452c <TIM_OC5_SetConfig+0xb8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d109      	bne.n	80044fa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800

08004530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	051b      	lsls	r3, r3, #20
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <TIM_OC6_SetConfig+0xb0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00b      	beq.n	80045a4 <TIM_OC6_SetConfig+0x74>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <TIM_OC6_SetConfig+0xb4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <TIM_OC6_SetConfig+0x74>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <TIM_OC6_SetConfig+0xb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_OC6_SetConfig+0x74>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <TIM_OC6_SetConfig+0xbc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d109      	bne.n	80045b8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2201      	movs	r2, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e054      	b.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004684:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10c      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40014000 	.word	0x40014000

08004718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e040      	b.n	80047ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fe6c 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2224      	movs	r2, #36	; 0x24
 8004744:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f992 	bl	8004a80 <UART_SetConfig>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e022      	b.n	80047ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fabe 	bl	8004cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb45 	bl	8004e34 <UART_CheckIdleState>
 80047aa:	4603      	mov	r3, r0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	f040 8082 	bne.w	80048d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Transmit+0x26>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e07a      	b.n	80048d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_UART_Transmit+0x38>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e073      	b.n	80048d4 <HAL_UART_Transmit+0x120>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2221      	movs	r2, #33	; 0x21
 8004800:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004802:	f7fc fed1 	bl	80015a8 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004820:	d108      	bne.n	8004834 <HAL_UART_Transmit+0x80>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e003      	b.n	800483c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004844:	e02d      	b.n	80048a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fb38 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e039      	b.n	80048d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004872:	b292      	uxth	r2, r2
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	3302      	adds	r3, #2
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	e008      	b.n	8004890 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b292      	uxth	r2, r2
 8004888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3301      	adds	r3, #1
 800488e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1cb      	bne.n	8004846 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fb04 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e005      	b.n	80048d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	f040 80bf 	bne.w	8004a74 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_UART_Receive+0x26>
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0b7      	b.n	8004a76 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_UART_Receive+0x38>
 8004910:	2302      	movs	r3, #2
 8004912:	e0b0      	b.n	8004a76 <HAL_UART_Receive+0x19a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2222      	movs	r2, #34	; 0x22
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004930:	f7fc fe3a 	bl	80015a8 <HAL_GetTick>
 8004934:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494e:	d10e      	bne.n	800496e <HAL_UART_Receive+0x92>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <HAL_UART_Receive+0x88>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800495e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004962:	e02d      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496c:	e028      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_UART_Receive+0xb6>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_UART_Receive+0xac>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004986:	e01b      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	227f      	movs	r2, #127	; 0x7f
 800498c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004990:	e016      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800499a:	d10d      	bne.n	80049b8 <HAL_UART_Receive+0xdc>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_UART_Receive+0xd2>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	227f      	movs	r2, #127	; 0x7f
 80049a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ac:	e008      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	223f      	movs	r2, #63	; 0x3f
 80049b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Receive+0xe4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d0:	d108      	bne.n	80049e4 <HAL_UART_Receive+0x108>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e003      	b.n	80049ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049f4:	e033      	b.n	8004a5e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2120      	movs	r1, #32
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fa60 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e032      	b.n	8004a76 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10c      	bne.n	8004a30 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	8a7b      	ldrh	r3, [r7, #18]
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e00d      	b.n	8004a4c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	8a7b      	ldrh	r3, [r7, #18]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1c5      	bne.n	80049f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <UART_SetConfig+0x258>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a79      	ldr	r2, [pc, #484]	; (8004cdc <UART_SetConfig+0x25c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d121      	bne.n	8004b40 <UART_SetConfig+0xc0>
 8004afc:	4b78      	ldr	r3, [pc, #480]	; (8004ce0 <UART_SetConfig+0x260>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d817      	bhi.n	8004b38 <UART_SetConfig+0xb8>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x90>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b2d 	.word	0x08004b2d
 8004b18:	08004b33 	.word	0x08004b33
 8004b1c:	08004b27 	.word	0x08004b27
 8004b20:	2300      	movs	r3, #0
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e01e      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e01b      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e018      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b32:	2308      	movs	r3, #8
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e015      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	bf00      	nop
 8004b3e:	e011      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <UART_SetConfig+0x264>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d102      	bne.n	8004b50 <UART_SetConfig+0xd0>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e009      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a64      	ldr	r2, [pc, #400]	; (8004ce8 <UART_SetConfig+0x268>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d102      	bne.n	8004b60 <UART_SetConfig+0xe0>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e001      	b.n	8004b64 <UART_SetConfig+0xe4>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6c:	d15c      	bne.n	8004c28 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d828      	bhi.n	8004bc6 <UART_SetConfig+0x146>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0xfc>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe fe4a 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61b8      	str	r0, [r7, #24]
        break;
 8004ba6:	e013      	b.n	8004bd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fe68 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004bac:	61b8      	str	r0, [r7, #24]
        break;
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b4e      	ldr	r3, [pc, #312]	; (8004cec <UART_SetConfig+0x26c>)
 8004bb2:	61bb      	str	r3, [r7, #24]
        break;
 8004bb4:	e00c      	b.n	8004bd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fdc9 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8004bba:	61b8      	str	r0, [r7, #24]
        break;
 8004bbc:	e008      	b.n	8004bd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e004      	b.n	8004bd0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d074      	beq.n	8004cc0 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	005a      	lsls	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	441a      	add	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d916      	bls.n	8004c22 <UART_SetConfig+0x1a2>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d212      	bcs.n	8004c22 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f023 030f 	bic.w	r3, r3, #15
 8004c04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	89fa      	ldrh	r2, [r7, #14]
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e04e      	b.n	8004cc0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	77bb      	strb	r3, [r7, #30]
 8004c26:	e04b      	b.n	8004cc0 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c28:	7ffb      	ldrb	r3, [r7, #31]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d827      	bhi.n	8004c7e <UART_SetConfig+0x1fe>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x1b4>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe fdee 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61b8      	str	r0, [r7, #24]
        break;
 8004c5e:	e013      	b.n	8004c88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fe fe0c 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004c64:	61b8      	str	r0, [r7, #24]
        break;
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <UART_SetConfig+0x26c>)
 8004c6a:	61bb      	str	r3, [r7, #24]
        break;
 8004c6c:	e00c      	b.n	8004c88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fd6d 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8004c72:	61b8      	str	r0, [r7, #24]
        break;
 8004c74:	e008      	b.n	8004c88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	61bb      	str	r3, [r7, #24]
        break;
 8004c7c:	e004      	b.n	8004c88 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	77bb      	strb	r3, [r7, #30]
        break;
 8004c86:	bf00      	nop
    }

    if (pclk != 0U)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d018      	beq.n	8004cc0 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	085a      	lsrs	r2, r3, #1
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	441a      	add	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	d908      	bls.n	8004cbc <UART_SetConfig+0x23c>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d204      	bcs.n	8004cbc <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	e001      	b.n	8004cc0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ccc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	efff69f3 	.word	0xefff69f3
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40004400 	.word	0x40004400
 8004ce8:	40004800 	.word	0x40004800
 8004cec:	007a1200 	.word	0x007a1200

08004cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01a      	beq.n	8004e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d10a      	bne.n	8004e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e44:	f7fc fbb0 	bl	80015a8 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d10e      	bne.n	8004e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f82d 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e023      	b.n	8004ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d10e      	bne.n	8004ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f817 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e00d      	b.n	8004ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed6:	e05e      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ede:	d05a      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee0:	f7fc fb62 	bl	80015a8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11b      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e043      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02c      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d124      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d091      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZdlPvj>:
 8004fbe:	f000 b800 	b.w	8004fc2 <_ZdlPv>

08004fc2 <_ZdlPv>:
 8004fc2:	f000 b82b 	b.w	800501c <free>
	...

08004fc8 <__errno>:
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <__errno+0x8>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000000c 	.word	0x2000000c

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0d      	ldr	r6, [pc, #52]	; (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fda:	1ba4      	subs	r4, r4, r6
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2500      	movs	r5, #0
 8004fe0:	42a5      	cmp	r5, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4e0b      	ldr	r6, [pc, #44]	; (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	; (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 ff0c 	bl	8005e04 <_init>
 8004fec:	1ba4      	subs	r4, r4, r6
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	42a5      	cmp	r5, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffc:	4798      	blx	r3
 8004ffe:	3501      	adds	r5, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005006:	4798      	blx	r3
 8005008:	3501      	adds	r5, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08005f24 	.word	0x08005f24
 8005010:	08005f24 	.word	0x08005f24
 8005014:	08005f24 	.word	0x08005f24
 8005018:	08005f28 	.word	0x08005f28

0800501c <free>:
 800501c:	4b02      	ldr	r3, [pc, #8]	; (8005028 <free+0xc>)
 800501e:	4601      	mov	r1, r0
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	f000 b80b 	b.w	800503c <_free_r>
 8005026:	bf00      	nop
 8005028:	2000000c 	.word	0x2000000c

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <_free_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4605      	mov	r5, r0
 8005040:	2900      	cmp	r1, #0
 8005042:	d045      	beq.n	80050d0 <_free_r+0x94>
 8005044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005048:	1f0c      	subs	r4, r1, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	18e4      	addlt	r4, r4, r3
 8005050:	f000 f98e 	bl	8005370 <__malloc_lock>
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <_free_r+0x98>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	4610      	mov	r0, r2
 800505a:	b933      	cbnz	r3, 800506a <_free_r+0x2e>
 800505c:	6063      	str	r3, [r4, #4]
 800505e:	6014      	str	r4, [r2, #0]
 8005060:	4628      	mov	r0, r5
 8005062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005066:	f000 b984 	b.w	8005372 <__malloc_unlock>
 800506a:	42a3      	cmp	r3, r4
 800506c:	d90c      	bls.n	8005088 <_free_r+0x4c>
 800506e:	6821      	ldr	r1, [r4, #0]
 8005070:	1862      	adds	r2, r4, r1
 8005072:	4293      	cmp	r3, r2
 8005074:	bf04      	itt	eq
 8005076:	681a      	ldreq	r2, [r3, #0]
 8005078:	685b      	ldreq	r3, [r3, #4]
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	bf04      	itt	eq
 800507e:	1852      	addeq	r2, r2, r1
 8005080:	6022      	streq	r2, [r4, #0]
 8005082:	6004      	str	r4, [r0, #0]
 8005084:	e7ec      	b.n	8005060 <_free_r+0x24>
 8005086:	4613      	mov	r3, r2
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	b10a      	cbz	r2, 8005090 <_free_r+0x54>
 800508c:	42a2      	cmp	r2, r4
 800508e:	d9fa      	bls.n	8005086 <_free_r+0x4a>
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	1858      	adds	r0, r3, r1
 8005094:	42a0      	cmp	r0, r4
 8005096:	d10b      	bne.n	80050b0 <_free_r+0x74>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	4401      	add	r1, r0
 800509c:	1858      	adds	r0, r3, r1
 800509e:	4282      	cmp	r2, r0
 80050a0:	6019      	str	r1, [r3, #0]
 80050a2:	d1dd      	bne.n	8005060 <_free_r+0x24>
 80050a4:	6810      	ldr	r0, [r2, #0]
 80050a6:	6852      	ldr	r2, [r2, #4]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	4401      	add	r1, r0
 80050ac:	6019      	str	r1, [r3, #0]
 80050ae:	e7d7      	b.n	8005060 <_free_r+0x24>
 80050b0:	d902      	bls.n	80050b8 <_free_r+0x7c>
 80050b2:	230c      	movs	r3, #12
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	e7d3      	b.n	8005060 <_free_r+0x24>
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	1821      	adds	r1, r4, r0
 80050bc:	428a      	cmp	r2, r1
 80050be:	bf04      	itt	eq
 80050c0:	6811      	ldreq	r1, [r2, #0]
 80050c2:	6852      	ldreq	r2, [r2, #4]
 80050c4:	6062      	str	r2, [r4, #4]
 80050c6:	bf04      	itt	eq
 80050c8:	1809      	addeq	r1, r1, r0
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	605c      	str	r4, [r3, #4]
 80050ce:	e7c7      	b.n	8005060 <_free_r+0x24>
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
 80050d2:	bf00      	nop
 80050d4:	200000bc 	.word	0x200000bc

080050d8 <_malloc_r>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	1ccd      	adds	r5, r1, #3
 80050dc:	f025 0503 	bic.w	r5, r5, #3
 80050e0:	3508      	adds	r5, #8
 80050e2:	2d0c      	cmp	r5, #12
 80050e4:	bf38      	it	cc
 80050e6:	250c      	movcc	r5, #12
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	4606      	mov	r6, r0
 80050ec:	db01      	blt.n	80050f2 <_malloc_r+0x1a>
 80050ee:	42a9      	cmp	r1, r5
 80050f0:	d903      	bls.n	80050fa <_malloc_r+0x22>
 80050f2:	230c      	movs	r3, #12
 80050f4:	6033      	str	r3, [r6, #0]
 80050f6:	2000      	movs	r0, #0
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	f000 f939 	bl	8005370 <__malloc_lock>
 80050fe:	4a21      	ldr	r2, [pc, #132]	; (8005184 <_malloc_r+0xac>)
 8005100:	6814      	ldr	r4, [r2, #0]
 8005102:	4621      	mov	r1, r4
 8005104:	b991      	cbnz	r1, 800512c <_malloc_r+0x54>
 8005106:	4c20      	ldr	r4, [pc, #128]	; (8005188 <_malloc_r+0xb0>)
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	b91b      	cbnz	r3, 8005114 <_malloc_r+0x3c>
 800510c:	4630      	mov	r0, r6
 800510e:	f000 f855 	bl	80051bc <_sbrk_r>
 8005112:	6020      	str	r0, [r4, #0]
 8005114:	4629      	mov	r1, r5
 8005116:	4630      	mov	r0, r6
 8005118:	f000 f850 	bl	80051bc <_sbrk_r>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d124      	bne.n	800516a <_malloc_r+0x92>
 8005120:	230c      	movs	r3, #12
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	4630      	mov	r0, r6
 8005126:	f000 f924 	bl	8005372 <__malloc_unlock>
 800512a:	e7e4      	b.n	80050f6 <_malloc_r+0x1e>
 800512c:	680b      	ldr	r3, [r1, #0]
 800512e:	1b5b      	subs	r3, r3, r5
 8005130:	d418      	bmi.n	8005164 <_malloc_r+0x8c>
 8005132:	2b0b      	cmp	r3, #11
 8005134:	d90f      	bls.n	8005156 <_malloc_r+0x7e>
 8005136:	600b      	str	r3, [r1, #0]
 8005138:	50cd      	str	r5, [r1, r3]
 800513a:	18cc      	adds	r4, r1, r3
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f918 	bl	8005372 <__malloc_unlock>
 8005142:	f104 000b 	add.w	r0, r4, #11
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	f020 0007 	bic.w	r0, r0, #7
 800514c:	1ac3      	subs	r3, r0, r3
 800514e:	d0d3      	beq.n	80050f8 <_malloc_r+0x20>
 8005150:	425a      	negs	r2, r3
 8005152:	50e2      	str	r2, [r4, r3]
 8005154:	e7d0      	b.n	80050f8 <_malloc_r+0x20>
 8005156:	428c      	cmp	r4, r1
 8005158:	684b      	ldr	r3, [r1, #4]
 800515a:	bf16      	itet	ne
 800515c:	6063      	strne	r3, [r4, #4]
 800515e:	6013      	streq	r3, [r2, #0]
 8005160:	460c      	movne	r4, r1
 8005162:	e7eb      	b.n	800513c <_malloc_r+0x64>
 8005164:	460c      	mov	r4, r1
 8005166:	6849      	ldr	r1, [r1, #4]
 8005168:	e7cc      	b.n	8005104 <_malloc_r+0x2c>
 800516a:	1cc4      	adds	r4, r0, #3
 800516c:	f024 0403 	bic.w	r4, r4, #3
 8005170:	42a0      	cmp	r0, r4
 8005172:	d005      	beq.n	8005180 <_malloc_r+0xa8>
 8005174:	1a21      	subs	r1, r4, r0
 8005176:	4630      	mov	r0, r6
 8005178:	f000 f820 	bl	80051bc <_sbrk_r>
 800517c:	3001      	adds	r0, #1
 800517e:	d0cf      	beq.n	8005120 <_malloc_r+0x48>
 8005180:	6025      	str	r5, [r4, #0]
 8005182:	e7db      	b.n	800513c <_malloc_r+0x64>
 8005184:	200000bc 	.word	0x200000bc
 8005188:	200000c0 	.word	0x200000c0

0800518c <iprintf>:
 800518c:	b40f      	push	{r0, r1, r2, r3}
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <iprintf+0x2c>)
 8005190:	b513      	push	{r0, r1, r4, lr}
 8005192:	681c      	ldr	r4, [r3, #0]
 8005194:	b124      	cbz	r4, 80051a0 <iprintf+0x14>
 8005196:	69a3      	ldr	r3, [r4, #24]
 8005198:	b913      	cbnz	r3, 80051a0 <iprintf+0x14>
 800519a:	4620      	mov	r0, r4
 800519c:	f000 f85e 	bl	800525c <__sinit>
 80051a0:	ab05      	add	r3, sp, #20
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	68a1      	ldr	r1, [r4, #8]
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 f90d 	bl	80053c8 <_vfiprintf_r>
 80051ae:	b002      	add	sp, #8
 80051b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b4:	b004      	add	sp, #16
 80051b6:	4770      	bx	lr
 80051b8:	2000000c 	.word	0x2000000c

080051bc <_sbrk_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4c06      	ldr	r4, [pc, #24]	; (80051d8 <_sbrk_r+0x1c>)
 80051c0:	2300      	movs	r3, #0
 80051c2:	4605      	mov	r5, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	f7fb ff4e 	bl	8001068 <_sbrk>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_sbrk_r+0x1a>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_sbrk_r+0x1a>
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	2000020c 	.word	0x2000020c

080051dc <std>:
 80051dc:	2300      	movs	r3, #0
 80051de:	b510      	push	{r4, lr}
 80051e0:	4604      	mov	r4, r0
 80051e2:	e9c0 3300 	strd	r3, r3, [r0]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	; 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051f2:	6183      	str	r3, [r0, #24]
 80051f4:	4619      	mov	r1, r3
 80051f6:	2208      	movs	r2, #8
 80051f8:	305c      	adds	r0, #92	; 0x5c
 80051fa:	f7ff ff17 	bl	800502c <memset>
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x38>)
 8005200:	6263      	str	r3, [r4, #36]	; 0x24
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x3c>)
 8005204:	62a3      	str	r3, [r4, #40]	; 0x28
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x40>)
 8005208:	62e3      	str	r3, [r4, #44]	; 0x2c
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <std+0x44>)
 800520c:	6224      	str	r4, [r4, #32]
 800520e:	6323      	str	r3, [r4, #48]	; 0x30
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	08005905 	.word	0x08005905
 8005218:	08005927 	.word	0x08005927
 800521c:	0800595f 	.word	0x0800595f
 8005220:	08005983 	.word	0x08005983

08005224 <_cleanup_r>:
 8005224:	4901      	ldr	r1, [pc, #4]	; (800522c <_cleanup_r+0x8>)
 8005226:	f000 b885 	b.w	8005334 <_fwalk_reent>
 800522a:	bf00      	nop
 800522c:	08005c5d 	.word	0x08005c5d

08005230 <__sfmoreglue>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	1e4a      	subs	r2, r1, #1
 8005234:	2568      	movs	r5, #104	; 0x68
 8005236:	4355      	muls	r5, r2
 8005238:	460e      	mov	r6, r1
 800523a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800523e:	f7ff ff4b 	bl	80050d8 <_malloc_r>
 8005242:	4604      	mov	r4, r0
 8005244:	b140      	cbz	r0, 8005258 <__sfmoreglue+0x28>
 8005246:	2100      	movs	r1, #0
 8005248:	e9c0 1600 	strd	r1, r6, [r0]
 800524c:	300c      	adds	r0, #12
 800524e:	60a0      	str	r0, [r4, #8]
 8005250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005254:	f7ff feea 	bl	800502c <memset>
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}

0800525c <__sinit>:
 800525c:	6983      	ldr	r3, [r0, #24]
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	bb33      	cbnz	r3, 80052b2 <__sinit+0x56>
 8005264:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005268:	6503      	str	r3, [r0, #80]	; 0x50
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <__sinit+0x58>)
 800526c:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <__sinit+0x5c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6282      	str	r2, [r0, #40]	; 0x28
 8005272:	4298      	cmp	r0, r3
 8005274:	bf04      	itt	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	6183      	streq	r3, [r0, #24]
 800527a:	f000 f81f 	bl	80052bc <__sfp>
 800527e:	6060      	str	r0, [r4, #4]
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f81b 	bl	80052bc <__sfp>
 8005286:	60a0      	str	r0, [r4, #8]
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f817 	bl	80052bc <__sfp>
 800528e:	2200      	movs	r2, #0
 8005290:	60e0      	str	r0, [r4, #12]
 8005292:	2104      	movs	r1, #4
 8005294:	6860      	ldr	r0, [r4, #4]
 8005296:	f7ff ffa1 	bl	80051dc <std>
 800529a:	2201      	movs	r2, #1
 800529c:	2109      	movs	r1, #9
 800529e:	68a0      	ldr	r0, [r4, #8]
 80052a0:	f7ff ff9c 	bl	80051dc <std>
 80052a4:	2202      	movs	r2, #2
 80052a6:	2112      	movs	r1, #18
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	f7ff ff97 	bl	80051dc <std>
 80052ae:	2301      	movs	r3, #1
 80052b0:	61a3      	str	r3, [r4, #24]
 80052b2:	bd10      	pop	{r4, pc}
 80052b4:	08005e8c 	.word	0x08005e8c
 80052b8:	08005225 	.word	0x08005225

080052bc <__sfp>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <__sfp+0x70>)
 80052c0:	681e      	ldr	r6, [r3, #0]
 80052c2:	69b3      	ldr	r3, [r6, #24]
 80052c4:	4607      	mov	r7, r0
 80052c6:	b913      	cbnz	r3, 80052ce <__sfp+0x12>
 80052c8:	4630      	mov	r0, r6
 80052ca:	f7ff ffc7 	bl	800525c <__sinit>
 80052ce:	3648      	adds	r6, #72	; 0x48
 80052d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	d503      	bpl.n	80052e0 <__sfp+0x24>
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	b133      	cbz	r3, 80052ea <__sfp+0x2e>
 80052dc:	6836      	ldr	r6, [r6, #0]
 80052de:	e7f7      	b.n	80052d0 <__sfp+0x14>
 80052e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052e4:	b16d      	cbz	r5, 8005302 <__sfp+0x46>
 80052e6:	3468      	adds	r4, #104	; 0x68
 80052e8:	e7f4      	b.n	80052d4 <__sfp+0x18>
 80052ea:	2104      	movs	r1, #4
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff ff9f 	bl	8005230 <__sfmoreglue>
 80052f2:	6030      	str	r0, [r6, #0]
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d1f1      	bne.n	80052dc <__sfp+0x20>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4604      	mov	r4, r0
 80052fe:	4620      	mov	r0, r4
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <__sfp+0x74>)
 8005304:	6665      	str	r5, [r4, #100]	; 0x64
 8005306:	e9c4 5500 	strd	r5, r5, [r4]
 800530a:	60a5      	str	r5, [r4, #8]
 800530c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005310:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005314:	2208      	movs	r2, #8
 8005316:	4629      	mov	r1, r5
 8005318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800531c:	f7ff fe86 	bl	800502c <memset>
 8005320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005328:	e7e9      	b.n	80052fe <__sfp+0x42>
 800532a:	bf00      	nop
 800532c:	08005e8c 	.word	0x08005e8c
 8005330:	ffff0001 	.word	0xffff0001

08005334 <_fwalk_reent>:
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005340:	2600      	movs	r6, #0
 8005342:	b914      	cbnz	r4, 800534a <_fwalk_reent+0x16>
 8005344:	4630      	mov	r0, r6
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800534e:	3f01      	subs	r7, #1
 8005350:	d501      	bpl.n	8005356 <_fwalk_reent+0x22>
 8005352:	6824      	ldr	r4, [r4, #0]
 8005354:	e7f5      	b.n	8005342 <_fwalk_reent+0xe>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d907      	bls.n	800536c <_fwalk_reent+0x38>
 800535c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005360:	3301      	adds	r3, #1
 8005362:	d003      	beq.n	800536c <_fwalk_reent+0x38>
 8005364:	4629      	mov	r1, r5
 8005366:	4640      	mov	r0, r8
 8005368:	47c8      	blx	r9
 800536a:	4306      	orrs	r6, r0
 800536c:	3568      	adds	r5, #104	; 0x68
 800536e:	e7ee      	b.n	800534e <_fwalk_reent+0x1a>

08005370 <__malloc_lock>:
 8005370:	4770      	bx	lr

08005372 <__malloc_unlock>:
 8005372:	4770      	bx	lr

08005374 <__sfputc_r>:
 8005374:	6893      	ldr	r3, [r2, #8]
 8005376:	3b01      	subs	r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	b410      	push	{r4}
 800537c:	6093      	str	r3, [r2, #8]
 800537e:	da08      	bge.n	8005392 <__sfputc_r+0x1e>
 8005380:	6994      	ldr	r4, [r2, #24]
 8005382:	42a3      	cmp	r3, r4
 8005384:	db01      	blt.n	800538a <__sfputc_r+0x16>
 8005386:	290a      	cmp	r1, #10
 8005388:	d103      	bne.n	8005392 <__sfputc_r+0x1e>
 800538a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538e:	f000 bafd 	b.w	800598c <__swbuf_r>
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	1c58      	adds	r0, r3, #1
 8005396:	6010      	str	r0, [r2, #0]
 8005398:	7019      	strb	r1, [r3, #0]
 800539a:	4608      	mov	r0, r1
 800539c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <__sfputs_r>:
 80053a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a4:	4606      	mov	r6, r0
 80053a6:	460f      	mov	r7, r1
 80053a8:	4614      	mov	r4, r2
 80053aa:	18d5      	adds	r5, r2, r3
 80053ac:	42ac      	cmp	r4, r5
 80053ae:	d101      	bne.n	80053b4 <__sfputs_r+0x12>
 80053b0:	2000      	movs	r0, #0
 80053b2:	e007      	b.n	80053c4 <__sfputs_r+0x22>
 80053b4:	463a      	mov	r2, r7
 80053b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ba:	4630      	mov	r0, r6
 80053bc:	f7ff ffda 	bl	8005374 <__sfputc_r>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d1f3      	bne.n	80053ac <__sfputs_r+0xa>
 80053c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053c8 <_vfiprintf_r>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	460c      	mov	r4, r1
 80053ce:	b09d      	sub	sp, #116	; 0x74
 80053d0:	4617      	mov	r7, r2
 80053d2:	461d      	mov	r5, r3
 80053d4:	4606      	mov	r6, r0
 80053d6:	b118      	cbz	r0, 80053e0 <_vfiprintf_r+0x18>
 80053d8:	6983      	ldr	r3, [r0, #24]
 80053da:	b90b      	cbnz	r3, 80053e0 <_vfiprintf_r+0x18>
 80053dc:	f7ff ff3e 	bl	800525c <__sinit>
 80053e0:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <_vfiprintf_r+0x20c>)
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d158      	bne.n	8005498 <_vfiprintf_r+0xd0>
 80053e6:	6874      	ldr	r4, [r6, #4]
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	0718      	lsls	r0, r3, #28
 80053ec:	d55e      	bpl.n	80054ac <_vfiprintf_r+0xe4>
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05b      	beq.n	80054ac <_vfiprintf_r+0xe4>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9309      	str	r3, [sp, #36]	; 0x24
 80053f8:	2320      	movs	r3, #32
 80053fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053fe:	2330      	movs	r3, #48	; 0x30
 8005400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005404:	9503      	str	r5, [sp, #12]
 8005406:	f04f 0b01 	mov.w	fp, #1
 800540a:	46b8      	mov	r8, r7
 800540c:	4645      	mov	r5, r8
 800540e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005412:	b10b      	cbz	r3, 8005418 <_vfiprintf_r+0x50>
 8005414:	2b25      	cmp	r3, #37	; 0x25
 8005416:	d154      	bne.n	80054c2 <_vfiprintf_r+0xfa>
 8005418:	ebb8 0a07 	subs.w	sl, r8, r7
 800541c:	d00b      	beq.n	8005436 <_vfiprintf_r+0x6e>
 800541e:	4653      	mov	r3, sl
 8005420:	463a      	mov	r2, r7
 8005422:	4621      	mov	r1, r4
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff ffbc 	bl	80053a2 <__sfputs_r>
 800542a:	3001      	adds	r0, #1
 800542c:	f000 80c2 	beq.w	80055b4 <_vfiprintf_r+0x1ec>
 8005430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005432:	4453      	add	r3, sl
 8005434:	9309      	str	r3, [sp, #36]	; 0x24
 8005436:	f898 3000 	ldrb.w	r3, [r8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80ba 	beq.w	80055b4 <_vfiprintf_r+0x1ec>
 8005440:	2300      	movs	r3, #0
 8005442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	9307      	str	r3, [sp, #28]
 800544e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005452:	931a      	str	r3, [sp, #104]	; 0x68
 8005454:	46a8      	mov	r8, r5
 8005456:	2205      	movs	r2, #5
 8005458:	f818 1b01 	ldrb.w	r1, [r8], #1
 800545c:	485e      	ldr	r0, [pc, #376]	; (80055d8 <_vfiprintf_r+0x210>)
 800545e:	f7fa feb7 	bl	80001d0 <memchr>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	bb78      	cbnz	r0, 80054c6 <_vfiprintf_r+0xfe>
 8005466:	06d9      	lsls	r1, r3, #27
 8005468:	bf44      	itt	mi
 800546a:	2220      	movmi	r2, #32
 800546c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005470:	071a      	lsls	r2, r3, #28
 8005472:	bf44      	itt	mi
 8005474:	222b      	movmi	r2, #43	; 0x2b
 8005476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800547a:	782a      	ldrb	r2, [r5, #0]
 800547c:	2a2a      	cmp	r2, #42	; 0x2a
 800547e:	d02a      	beq.n	80054d6 <_vfiprintf_r+0x10e>
 8005480:	9a07      	ldr	r2, [sp, #28]
 8005482:	46a8      	mov	r8, r5
 8005484:	2000      	movs	r0, #0
 8005486:	250a      	movs	r5, #10
 8005488:	4641      	mov	r1, r8
 800548a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548e:	3b30      	subs	r3, #48	; 0x30
 8005490:	2b09      	cmp	r3, #9
 8005492:	d969      	bls.n	8005568 <_vfiprintf_r+0x1a0>
 8005494:	b360      	cbz	r0, 80054f0 <_vfiprintf_r+0x128>
 8005496:	e024      	b.n	80054e2 <_vfiprintf_r+0x11a>
 8005498:	4b50      	ldr	r3, [pc, #320]	; (80055dc <_vfiprintf_r+0x214>)
 800549a:	429c      	cmp	r4, r3
 800549c:	d101      	bne.n	80054a2 <_vfiprintf_r+0xda>
 800549e:	68b4      	ldr	r4, [r6, #8]
 80054a0:	e7a2      	b.n	80053e8 <_vfiprintf_r+0x20>
 80054a2:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <_vfiprintf_r+0x218>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	bf08      	it	eq
 80054a8:	68f4      	ldreq	r4, [r6, #12]
 80054aa:	e79d      	b.n	80053e8 <_vfiprintf_r+0x20>
 80054ac:	4621      	mov	r1, r4
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 fad0 	bl	8005a54 <__swsetup_r>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d09d      	beq.n	80053f4 <_vfiprintf_r+0x2c>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054bc:	b01d      	add	sp, #116	; 0x74
 80054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c2:	46a8      	mov	r8, r5
 80054c4:	e7a2      	b.n	800540c <_vfiprintf_r+0x44>
 80054c6:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <_vfiprintf_r+0x210>)
 80054c8:	1a80      	subs	r0, r0, r2
 80054ca:	fa0b f000 	lsl.w	r0, fp, r0
 80054ce:	4318      	orrs	r0, r3
 80054d0:	9004      	str	r0, [sp, #16]
 80054d2:	4645      	mov	r5, r8
 80054d4:	e7be      	b.n	8005454 <_vfiprintf_r+0x8c>
 80054d6:	9a03      	ldr	r2, [sp, #12]
 80054d8:	1d11      	adds	r1, r2, #4
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	9103      	str	r1, [sp, #12]
 80054de:	2a00      	cmp	r2, #0
 80054e0:	db01      	blt.n	80054e6 <_vfiprintf_r+0x11e>
 80054e2:	9207      	str	r2, [sp, #28]
 80054e4:	e004      	b.n	80054f0 <_vfiprintf_r+0x128>
 80054e6:	4252      	negs	r2, r2
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	9207      	str	r2, [sp, #28]
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	f898 3000 	ldrb.w	r3, [r8]
 80054f4:	2b2e      	cmp	r3, #46	; 0x2e
 80054f6:	d10e      	bne.n	8005516 <_vfiprintf_r+0x14e>
 80054f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d138      	bne.n	8005572 <_vfiprintf_r+0x1aa>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb8      	it	lt
 800550c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005510:	f108 0802 	add.w	r8, r8, #2
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	4d33      	ldr	r5, [pc, #204]	; (80055e4 <_vfiprintf_r+0x21c>)
 8005518:	f898 1000 	ldrb.w	r1, [r8]
 800551c:	2203      	movs	r2, #3
 800551e:	4628      	mov	r0, r5
 8005520:	f7fa fe56 	bl	80001d0 <memchr>
 8005524:	b140      	cbz	r0, 8005538 <_vfiprintf_r+0x170>
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	1b40      	subs	r0, r0, r5
 800552a:	fa03 f000 	lsl.w	r0, r3, r0
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	4303      	orrs	r3, r0
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	f898 1000 	ldrb.w	r1, [r8]
 800553c:	482a      	ldr	r0, [pc, #168]	; (80055e8 <_vfiprintf_r+0x220>)
 800553e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005542:	2206      	movs	r2, #6
 8005544:	f108 0701 	add.w	r7, r8, #1
 8005548:	f7fa fe42 	bl	80001d0 <memchr>
 800554c:	2800      	cmp	r0, #0
 800554e:	d037      	beq.n	80055c0 <_vfiprintf_r+0x1f8>
 8005550:	4b26      	ldr	r3, [pc, #152]	; (80055ec <_vfiprintf_r+0x224>)
 8005552:	bb1b      	cbnz	r3, 800559c <_vfiprintf_r+0x1d4>
 8005554:	9b03      	ldr	r3, [sp, #12]
 8005556:	3307      	adds	r3, #7
 8005558:	f023 0307 	bic.w	r3, r3, #7
 800555c:	3308      	adds	r3, #8
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	444b      	add	r3, r9
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	e750      	b.n	800540a <_vfiprintf_r+0x42>
 8005568:	fb05 3202 	mla	r2, r5, r2, r3
 800556c:	2001      	movs	r0, #1
 800556e:	4688      	mov	r8, r1
 8005570:	e78a      	b.n	8005488 <_vfiprintf_r+0xc0>
 8005572:	2300      	movs	r3, #0
 8005574:	f108 0801 	add.w	r8, r8, #1
 8005578:	9305      	str	r3, [sp, #20]
 800557a:	4619      	mov	r1, r3
 800557c:	250a      	movs	r5, #10
 800557e:	4640      	mov	r0, r8
 8005580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005584:	3a30      	subs	r2, #48	; 0x30
 8005586:	2a09      	cmp	r2, #9
 8005588:	d903      	bls.n	8005592 <_vfiprintf_r+0x1ca>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0c3      	beq.n	8005516 <_vfiprintf_r+0x14e>
 800558e:	9105      	str	r1, [sp, #20]
 8005590:	e7c1      	b.n	8005516 <_vfiprintf_r+0x14e>
 8005592:	fb05 2101 	mla	r1, r5, r1, r2
 8005596:	2301      	movs	r3, #1
 8005598:	4680      	mov	r8, r0
 800559a:	e7f0      	b.n	800557e <_vfiprintf_r+0x1b6>
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4622      	mov	r2, r4
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <_vfiprintf_r+0x228>)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4630      	mov	r0, r6
 80055a8:	f3af 8000 	nop.w
 80055ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80055b0:	4681      	mov	r9, r0
 80055b2:	d1d5      	bne.n	8005560 <_vfiprintf_r+0x198>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	065b      	lsls	r3, r3, #25
 80055b8:	f53f af7e 	bmi.w	80054b8 <_vfiprintf_r+0xf0>
 80055bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055be:	e77d      	b.n	80054bc <_vfiprintf_r+0xf4>
 80055c0:	ab03      	add	r3, sp, #12
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4622      	mov	r2, r4
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <_vfiprintf_r+0x228>)
 80055c8:	a904      	add	r1, sp, #16
 80055ca:	4630      	mov	r0, r6
 80055cc:	f000 f888 	bl	80056e0 <_printf_i>
 80055d0:	e7ec      	b.n	80055ac <_vfiprintf_r+0x1e4>
 80055d2:	bf00      	nop
 80055d4:	08005eb0 	.word	0x08005eb0
 80055d8:	08005ef0 	.word	0x08005ef0
 80055dc:	08005ed0 	.word	0x08005ed0
 80055e0:	08005e90 	.word	0x08005e90
 80055e4:	08005ef6 	.word	0x08005ef6
 80055e8:	08005efa 	.word	0x08005efa
 80055ec:	00000000 	.word	0x00000000
 80055f0:	080053a3 	.word	0x080053a3

080055f4 <_printf_common>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	4691      	mov	r9, r2
 80055fa:	461f      	mov	r7, r3
 80055fc:	688a      	ldr	r2, [r1, #8]
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005604:	4293      	cmp	r3, r2
 8005606:	bfb8      	it	lt
 8005608:	4613      	movlt	r3, r2
 800560a:	f8c9 3000 	str.w	r3, [r9]
 800560e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005612:	4606      	mov	r6, r0
 8005614:	460c      	mov	r4, r1
 8005616:	b112      	cbz	r2, 800561e <_printf_common+0x2a>
 8005618:	3301      	adds	r3, #1
 800561a:	f8c9 3000 	str.w	r3, [r9]
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	0699      	lsls	r1, r3, #26
 8005622:	bf42      	ittt	mi
 8005624:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005628:	3302      	addmi	r3, #2
 800562a:	f8c9 3000 	strmi.w	r3, [r9]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	f015 0506 	ands.w	r5, r5, #6
 8005634:	d107      	bne.n	8005646 <_printf_common+0x52>
 8005636:	f104 0a19 	add.w	sl, r4, #25
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	f8d9 2000 	ldr.w	r2, [r9]
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	42ab      	cmp	r3, r5
 8005644:	dc28      	bgt.n	8005698 <_printf_common+0xa4>
 8005646:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	3300      	adds	r3, #0
 800564e:	bf18      	it	ne
 8005650:	2301      	movne	r3, #1
 8005652:	0692      	lsls	r2, r2, #26
 8005654:	d42d      	bmi.n	80056b2 <_printf_common+0xbe>
 8005656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800565a:	4639      	mov	r1, r7
 800565c:	4630      	mov	r0, r6
 800565e:	47c0      	blx	r8
 8005660:	3001      	adds	r0, #1
 8005662:	d020      	beq.n	80056a6 <_printf_common+0xb2>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	68e5      	ldr	r5, [r4, #12]
 8005668:	f8d9 2000 	ldr.w	r2, [r9]
 800566c:	f003 0306 	and.w	r3, r3, #6
 8005670:	2b04      	cmp	r3, #4
 8005672:	bf08      	it	eq
 8005674:	1aad      	subeq	r5, r5, r2
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	6922      	ldr	r2, [r4, #16]
 800567a:	bf0c      	ite	eq
 800567c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005680:	2500      	movne	r5, #0
 8005682:	4293      	cmp	r3, r2
 8005684:	bfc4      	itt	gt
 8005686:	1a9b      	subgt	r3, r3, r2
 8005688:	18ed      	addgt	r5, r5, r3
 800568a:	f04f 0900 	mov.w	r9, #0
 800568e:	341a      	adds	r4, #26
 8005690:	454d      	cmp	r5, r9
 8005692:	d11a      	bne.n	80056ca <_printf_common+0xd6>
 8005694:	2000      	movs	r0, #0
 8005696:	e008      	b.n	80056aa <_printf_common+0xb6>
 8005698:	2301      	movs	r3, #1
 800569a:	4652      	mov	r2, sl
 800569c:	4639      	mov	r1, r7
 800569e:	4630      	mov	r0, r6
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d103      	bne.n	80056ae <_printf_common+0xba>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ae:	3501      	adds	r5, #1
 80056b0:	e7c3      	b.n	800563a <_printf_common+0x46>
 80056b2:	18e1      	adds	r1, r4, r3
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	2030      	movs	r0, #48	; 0x30
 80056b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056bc:	4422      	add	r2, r4
 80056be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c6:	3302      	adds	r3, #2
 80056c8:	e7c5      	b.n	8005656 <_printf_common+0x62>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4622      	mov	r2, r4
 80056ce:	4639      	mov	r1, r7
 80056d0:	4630      	mov	r0, r6
 80056d2:	47c0      	blx	r8
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0e6      	beq.n	80056a6 <_printf_common+0xb2>
 80056d8:	f109 0901 	add.w	r9, r9, #1
 80056dc:	e7d8      	b.n	8005690 <_printf_common+0x9c>
	...

080056e0 <_printf_i>:
 80056e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056e8:	460c      	mov	r4, r1
 80056ea:	7e09      	ldrb	r1, [r1, #24]
 80056ec:	b085      	sub	sp, #20
 80056ee:	296e      	cmp	r1, #110	; 0x6e
 80056f0:	4617      	mov	r7, r2
 80056f2:	4606      	mov	r6, r0
 80056f4:	4698      	mov	r8, r3
 80056f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056f8:	f000 80b3 	beq.w	8005862 <_printf_i+0x182>
 80056fc:	d822      	bhi.n	8005744 <_printf_i+0x64>
 80056fe:	2963      	cmp	r1, #99	; 0x63
 8005700:	d036      	beq.n	8005770 <_printf_i+0x90>
 8005702:	d80a      	bhi.n	800571a <_printf_i+0x3a>
 8005704:	2900      	cmp	r1, #0
 8005706:	f000 80b9 	beq.w	800587c <_printf_i+0x19c>
 800570a:	2958      	cmp	r1, #88	; 0x58
 800570c:	f000 8083 	beq.w	8005816 <_printf_i+0x136>
 8005710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005714:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005718:	e032      	b.n	8005780 <_printf_i+0xa0>
 800571a:	2964      	cmp	r1, #100	; 0x64
 800571c:	d001      	beq.n	8005722 <_printf_i+0x42>
 800571e:	2969      	cmp	r1, #105	; 0x69
 8005720:	d1f6      	bne.n	8005710 <_printf_i+0x30>
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	6813      	ldr	r3, [r2, #0]
 8005726:	0605      	lsls	r5, r0, #24
 8005728:	f103 0104 	add.w	r1, r3, #4
 800572c:	d52a      	bpl.n	8005784 <_printf_i+0xa4>
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6011      	str	r1, [r2, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	da03      	bge.n	800573e <_printf_i+0x5e>
 8005736:	222d      	movs	r2, #45	; 0x2d
 8005738:	425b      	negs	r3, r3
 800573a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800573e:	486f      	ldr	r0, [pc, #444]	; (80058fc <_printf_i+0x21c>)
 8005740:	220a      	movs	r2, #10
 8005742:	e039      	b.n	80057b8 <_printf_i+0xd8>
 8005744:	2973      	cmp	r1, #115	; 0x73
 8005746:	f000 809d 	beq.w	8005884 <_printf_i+0x1a4>
 800574a:	d808      	bhi.n	800575e <_printf_i+0x7e>
 800574c:	296f      	cmp	r1, #111	; 0x6f
 800574e:	d020      	beq.n	8005792 <_printf_i+0xb2>
 8005750:	2970      	cmp	r1, #112	; 0x70
 8005752:	d1dd      	bne.n	8005710 <_printf_i+0x30>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	f043 0320 	orr.w	r3, r3, #32
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	e003      	b.n	8005766 <_printf_i+0x86>
 800575e:	2975      	cmp	r1, #117	; 0x75
 8005760:	d017      	beq.n	8005792 <_printf_i+0xb2>
 8005762:	2978      	cmp	r1, #120	; 0x78
 8005764:	d1d4      	bne.n	8005710 <_printf_i+0x30>
 8005766:	2378      	movs	r3, #120	; 0x78
 8005768:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800576c:	4864      	ldr	r0, [pc, #400]	; (8005900 <_printf_i+0x220>)
 800576e:	e055      	b.n	800581c <_printf_i+0x13c>
 8005770:	6813      	ldr	r3, [r2, #0]
 8005772:	1d19      	adds	r1, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6011      	str	r1, [r2, #0]
 8005778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800577c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005780:	2301      	movs	r3, #1
 8005782:	e08c      	b.n	800589e <_printf_i+0x1be>
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6011      	str	r1, [r2, #0]
 8005788:	f010 0f40 	tst.w	r0, #64	; 0x40
 800578c:	bf18      	it	ne
 800578e:	b21b      	sxthne	r3, r3
 8005790:	e7cf      	b.n	8005732 <_printf_i+0x52>
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	6825      	ldr	r5, [r4, #0]
 8005796:	1d18      	adds	r0, r3, #4
 8005798:	6010      	str	r0, [r2, #0]
 800579a:	0628      	lsls	r0, r5, #24
 800579c:	d501      	bpl.n	80057a2 <_printf_i+0xc2>
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	e002      	b.n	80057a8 <_printf_i+0xc8>
 80057a2:	0668      	lsls	r0, r5, #25
 80057a4:	d5fb      	bpl.n	800579e <_printf_i+0xbe>
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	4854      	ldr	r0, [pc, #336]	; (80058fc <_printf_i+0x21c>)
 80057aa:	296f      	cmp	r1, #111	; 0x6f
 80057ac:	bf14      	ite	ne
 80057ae:	220a      	movne	r2, #10
 80057b0:	2208      	moveq	r2, #8
 80057b2:	2100      	movs	r1, #0
 80057b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057b8:	6865      	ldr	r5, [r4, #4]
 80057ba:	60a5      	str	r5, [r4, #8]
 80057bc:	2d00      	cmp	r5, #0
 80057be:	f2c0 8095 	blt.w	80058ec <_printf_i+0x20c>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	f021 0104 	bic.w	r1, r1, #4
 80057c8:	6021      	str	r1, [r4, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d13d      	bne.n	800584a <_printf_i+0x16a>
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	f040 808e 	bne.w	80058f0 <_printf_i+0x210>
 80057d4:	4665      	mov	r5, ip
 80057d6:	2a08      	cmp	r2, #8
 80057d8:	d10b      	bne.n	80057f2 <_printf_i+0x112>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	07db      	lsls	r3, r3, #31
 80057de:	d508      	bpl.n	80057f2 <_printf_i+0x112>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	bfde      	ittt	le
 80057e8:	2330      	movle	r3, #48	; 0x30
 80057ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057f2:	ebac 0305 	sub.w	r3, ip, r5
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	f8cd 8000 	str.w	r8, [sp]
 80057fc:	463b      	mov	r3, r7
 80057fe:	aa03      	add	r2, sp, #12
 8005800:	4621      	mov	r1, r4
 8005802:	4630      	mov	r0, r6
 8005804:	f7ff fef6 	bl	80055f4 <_printf_common>
 8005808:	3001      	adds	r0, #1
 800580a:	d14d      	bne.n	80058a8 <_printf_i+0x1c8>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005810:	b005      	add	sp, #20
 8005812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005816:	4839      	ldr	r0, [pc, #228]	; (80058fc <_printf_i+0x21c>)
 8005818:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800581c:	6813      	ldr	r3, [r2, #0]
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	1d1d      	adds	r5, r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6015      	str	r5, [r2, #0]
 8005826:	060a      	lsls	r2, r1, #24
 8005828:	d50b      	bpl.n	8005842 <_printf_i+0x162>
 800582a:	07ca      	lsls	r2, r1, #31
 800582c:	bf44      	itt	mi
 800582e:	f041 0120 	orrmi.w	r1, r1, #32
 8005832:	6021      	strmi	r1, [r4, #0]
 8005834:	b91b      	cbnz	r3, 800583e <_printf_i+0x15e>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f022 0220 	bic.w	r2, r2, #32
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	e7b7      	b.n	80057b2 <_printf_i+0xd2>
 8005842:	064d      	lsls	r5, r1, #25
 8005844:	bf48      	it	mi
 8005846:	b29b      	uxthmi	r3, r3
 8005848:	e7ef      	b.n	800582a <_printf_i+0x14a>
 800584a:	4665      	mov	r5, ip
 800584c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005850:	fb02 3311 	mls	r3, r2, r1, r3
 8005854:	5cc3      	ldrb	r3, [r0, r3]
 8005856:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800585a:	460b      	mov	r3, r1
 800585c:	2900      	cmp	r1, #0
 800585e:	d1f5      	bne.n	800584c <_printf_i+0x16c>
 8005860:	e7b9      	b.n	80057d6 <_printf_i+0xf6>
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	6825      	ldr	r5, [r4, #0]
 8005866:	6961      	ldr	r1, [r4, #20]
 8005868:	1d18      	adds	r0, r3, #4
 800586a:	6010      	str	r0, [r2, #0]
 800586c:	0628      	lsls	r0, r5, #24
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	d501      	bpl.n	8005876 <_printf_i+0x196>
 8005872:	6019      	str	r1, [r3, #0]
 8005874:	e002      	b.n	800587c <_printf_i+0x19c>
 8005876:	066a      	lsls	r2, r5, #25
 8005878:	d5fb      	bpl.n	8005872 <_printf_i+0x192>
 800587a:	8019      	strh	r1, [r3, #0]
 800587c:	2300      	movs	r3, #0
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	4665      	mov	r5, ip
 8005882:	e7b9      	b.n	80057f8 <_printf_i+0x118>
 8005884:	6813      	ldr	r3, [r2, #0]
 8005886:	1d19      	adds	r1, r3, #4
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	681d      	ldr	r5, [r3, #0]
 800588c:	6862      	ldr	r2, [r4, #4]
 800588e:	2100      	movs	r1, #0
 8005890:	4628      	mov	r0, r5
 8005892:	f7fa fc9d 	bl	80001d0 <memchr>
 8005896:	b108      	cbz	r0, 800589c <_printf_i+0x1bc>
 8005898:	1b40      	subs	r0, r0, r5
 800589a:	6060      	str	r0, [r4, #4]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	2300      	movs	r3, #0
 80058a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a6:	e7a7      	b.n	80057f8 <_printf_i+0x118>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	462a      	mov	r2, r5
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0aa      	beq.n	800580c <_printf_i+0x12c>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	079b      	lsls	r3, r3, #30
 80058ba:	d413      	bmi.n	80058e4 <_printf_i+0x204>
 80058bc:	68e0      	ldr	r0, [r4, #12]
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	4298      	cmp	r0, r3
 80058c2:	bfb8      	it	lt
 80058c4:	4618      	movlt	r0, r3
 80058c6:	e7a3      	b.n	8005810 <_printf_i+0x130>
 80058c8:	2301      	movs	r3, #1
 80058ca:	464a      	mov	r2, r9
 80058cc:	4639      	mov	r1, r7
 80058ce:	4630      	mov	r0, r6
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d09a      	beq.n	800580c <_printf_i+0x12c>
 80058d6:	3501      	adds	r5, #1
 80058d8:	68e3      	ldr	r3, [r4, #12]
 80058da:	9a03      	ldr	r2, [sp, #12]
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	42ab      	cmp	r3, r5
 80058e0:	dcf2      	bgt.n	80058c8 <_printf_i+0x1e8>
 80058e2:	e7eb      	b.n	80058bc <_printf_i+0x1dc>
 80058e4:	2500      	movs	r5, #0
 80058e6:	f104 0919 	add.w	r9, r4, #25
 80058ea:	e7f5      	b.n	80058d8 <_printf_i+0x1f8>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ac      	bne.n	800584a <_printf_i+0x16a>
 80058f0:	7803      	ldrb	r3, [r0, #0]
 80058f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fa:	e76c      	b.n	80057d6 <_printf_i+0xf6>
 80058fc:	08005f01 	.word	0x08005f01
 8005900:	08005f12 	.word	0x08005f12

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 fa46 	bl	8005d9c <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	; 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	2302      	movs	r3, #2
 800593a:	2200      	movs	r2, #0
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	f000 f9b6 	bl	8005cb0 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b869 	b.w	8005a30 <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f9a3 	bl	8005cb0 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	; 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b8d3 	b.w	8005b30 <_close_r>
	...

0800598c <__swbuf_r>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	460e      	mov	r6, r1
 8005990:	4614      	mov	r4, r2
 8005992:	4605      	mov	r5, r0
 8005994:	b118      	cbz	r0, 800599e <__swbuf_r+0x12>
 8005996:	6983      	ldr	r3, [r0, #24]
 8005998:	b90b      	cbnz	r3, 800599e <__swbuf_r+0x12>
 800599a:	f7ff fc5f 	bl	800525c <__sinit>
 800599e:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <__swbuf_r+0x98>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d12a      	bne.n	80059fa <__swbuf_r+0x6e>
 80059a4:	686c      	ldr	r4, [r5, #4]
 80059a6:	69a3      	ldr	r3, [r4, #24]
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	071a      	lsls	r2, r3, #28
 80059ae:	d52e      	bpl.n	8005a0e <__swbuf_r+0x82>
 80059b0:	6923      	ldr	r3, [r4, #16]
 80059b2:	b363      	cbz	r3, 8005a0e <__swbuf_r+0x82>
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	1ac0      	subs	r0, r0, r3
 80059ba:	6963      	ldr	r3, [r4, #20]
 80059bc:	b2f6      	uxtb	r6, r6
 80059be:	4283      	cmp	r3, r0
 80059c0:	4637      	mov	r7, r6
 80059c2:	dc04      	bgt.n	80059ce <__swbuf_r+0x42>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f948 	bl	8005c5c <_fflush_r>
 80059cc:	bb28      	cbnz	r0, 8005a1a <__swbuf_r+0x8e>
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	60a3      	str	r3, [r4, #8]
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	6022      	str	r2, [r4, #0]
 80059da:	701e      	strb	r6, [r3, #0]
 80059dc:	6963      	ldr	r3, [r4, #20]
 80059de:	3001      	adds	r0, #1
 80059e0:	4283      	cmp	r3, r0
 80059e2:	d004      	beq.n	80059ee <__swbuf_r+0x62>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	07db      	lsls	r3, r3, #31
 80059e8:	d519      	bpl.n	8005a1e <__swbuf_r+0x92>
 80059ea:	2e0a      	cmp	r6, #10
 80059ec:	d117      	bne.n	8005a1e <__swbuf_r+0x92>
 80059ee:	4621      	mov	r1, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f933 	bl	8005c5c <_fflush_r>
 80059f6:	b190      	cbz	r0, 8005a1e <__swbuf_r+0x92>
 80059f8:	e00f      	b.n	8005a1a <__swbuf_r+0x8e>
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <__swbuf_r+0x9c>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	d101      	bne.n	8005a04 <__swbuf_r+0x78>
 8005a00:	68ac      	ldr	r4, [r5, #8]
 8005a02:	e7d0      	b.n	80059a6 <__swbuf_r+0x1a>
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <__swbuf_r+0xa0>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	bf08      	it	eq
 8005a0a:	68ec      	ldreq	r4, [r5, #12]
 8005a0c:	e7cb      	b.n	80059a6 <__swbuf_r+0x1a>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 f81f 	bl	8005a54 <__swsetup_r>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d0cc      	beq.n	80059b4 <__swbuf_r+0x28>
 8005a1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005a1e:	4638      	mov	r0, r7
 8005a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08005eb0 	.word	0x08005eb0
 8005a28:	08005ed0 	.word	0x08005ed0
 8005a2c:	08005e90 	.word	0x08005e90

08005a30 <_write_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4c07      	ldr	r4, [pc, #28]	; (8005a50 <_write_r+0x20>)
 8005a34:	4605      	mov	r5, r0
 8005a36:	4608      	mov	r0, r1
 8005a38:	4611      	mov	r1, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f7fb fac1 	bl	8000fc6 <_write>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_write_r+0x1e>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_write_r+0x1e>
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	2000020c 	.word	0x2000020c

08005a54 <__swsetup_r>:
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <__swsetup_r+0xcc>)
 8005a56:	b570      	push	{r4, r5, r6, lr}
 8005a58:	681d      	ldr	r5, [r3, #0]
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	b125      	cbz	r5, 8005a6a <__swsetup_r+0x16>
 8005a60:	69ab      	ldr	r3, [r5, #24]
 8005a62:	b913      	cbnz	r3, 8005a6a <__swsetup_r+0x16>
 8005a64:	4628      	mov	r0, r5
 8005a66:	f7ff fbf9 	bl	800525c <__sinit>
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <__swsetup_r+0xd0>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d10f      	bne.n	8005a90 <__swsetup_r+0x3c>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	0715      	lsls	r5, r2, #28
 8005a7a:	d42c      	bmi.n	8005ad6 <__swsetup_r+0x82>
 8005a7c:	06d0      	lsls	r0, r2, #27
 8005a7e:	d411      	bmi.n	8005aa4 <__swsetup_r+0x50>
 8005a80:	2209      	movs	r2, #9
 8005a82:	6032      	str	r2, [r6, #0]
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a8e:	e03e      	b.n	8005b0e <__swsetup_r+0xba>
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <__swsetup_r+0xd4>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d101      	bne.n	8005a9a <__swsetup_r+0x46>
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	e7eb      	b.n	8005a72 <__swsetup_r+0x1e>
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <__swsetup_r+0xd8>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf08      	it	eq
 8005aa0:	68ec      	ldreq	r4, [r5, #12]
 8005aa2:	e7e6      	b.n	8005a72 <__swsetup_r+0x1e>
 8005aa4:	0751      	lsls	r1, r2, #29
 8005aa6:	d512      	bpl.n	8005ace <__swsetup_r+0x7a>
 8005aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aaa:	b141      	cbz	r1, 8005abe <__swsetup_r+0x6a>
 8005aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d002      	beq.n	8005aba <__swsetup_r+0x66>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff fac1 	bl	800503c <_free_r>
 8005aba:	2300      	movs	r3, #0
 8005abc:	6363      	str	r3, [r4, #52]	; 0x34
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	b94b      	cbnz	r3, 8005aee <__swsetup_r+0x9a>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d003      	beq.n	8005aee <__swsetup_r+0x9a>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f917 	bl	8005d1c <__smakebuf_r>
 8005aee:	89a2      	ldrh	r2, [r4, #12]
 8005af0:	f012 0301 	ands.w	r3, r2, #1
 8005af4:	d00c      	beq.n	8005b10 <__swsetup_r+0xbc>
 8005af6:	2300      	movs	r3, #0
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	6963      	ldr	r3, [r4, #20]
 8005afc:	425b      	negs	r3, r3
 8005afe:	61a3      	str	r3, [r4, #24]
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	b953      	cbnz	r3, 8005b1a <__swsetup_r+0xc6>
 8005b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b0c:	d1ba      	bne.n	8005a84 <__swsetup_r+0x30>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	0792      	lsls	r2, r2, #30
 8005b12:	bf58      	it	pl
 8005b14:	6963      	ldrpl	r3, [r4, #20]
 8005b16:	60a3      	str	r3, [r4, #8]
 8005b18:	e7f2      	b.n	8005b00 <__swsetup_r+0xac>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7f7      	b.n	8005b0e <__swsetup_r+0xba>
 8005b1e:	bf00      	nop
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	08005eb0 	.word	0x08005eb0
 8005b28:	08005ed0 	.word	0x08005ed0
 8005b2c:	08005e90 	.word	0x08005e90

08005b30 <_close_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4c06      	ldr	r4, [pc, #24]	; (8005b4c <_close_r+0x1c>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4605      	mov	r5, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	f7fb fa5f 	bl	8000ffe <_close>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_close_r+0x1a>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_close_r+0x1a>
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	2000020c 	.word	0x2000020c

08005b50 <__sflush_r>:
 8005b50:	898a      	ldrh	r2, [r1, #12]
 8005b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	4605      	mov	r5, r0
 8005b58:	0710      	lsls	r0, r2, #28
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	d458      	bmi.n	8005c10 <__sflush_r+0xc0>
 8005b5e:	684b      	ldr	r3, [r1, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	dc05      	bgt.n	8005b70 <__sflush_r+0x20>
 8005b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dc02      	bgt.n	8005b70 <__sflush_r+0x20>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	d0f9      	beq.n	8005b6a <__sflush_r+0x1a>
 8005b76:	2300      	movs	r3, #0
 8005b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b7c:	682f      	ldr	r7, [r5, #0]
 8005b7e:	6a21      	ldr	r1, [r4, #32]
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	d032      	beq.n	8005bea <__sflush_r+0x9a>
 8005b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	075a      	lsls	r2, r3, #29
 8005b8a:	d505      	bpl.n	8005b98 <__sflush_r+0x48>
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	1ac0      	subs	r0, r0, r3
 8005b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b92:	b10b      	cbz	r3, 8005b98 <__sflush_r+0x48>
 8005b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b96:	1ac0      	subs	r0, r0, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b9e:	6a21      	ldr	r1, [r4, #32]
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b0      	blx	r6
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	d106      	bne.n	8005bb8 <__sflush_r+0x68>
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	291d      	cmp	r1, #29
 8005bae:	d848      	bhi.n	8005c42 <__sflush_r+0xf2>
 8005bb0:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <__sflush_r+0x108>)
 8005bb2:	40ca      	lsrs	r2, r1
 8005bb4:	07d6      	lsls	r6, r2, #31
 8005bb6:	d544      	bpl.n	8005c42 <__sflush_r+0xf2>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	6062      	str	r2, [r4, #4]
 8005bbc:	04d9      	lsls	r1, r3, #19
 8005bbe:	6922      	ldr	r2, [r4, #16]
 8005bc0:	6022      	str	r2, [r4, #0]
 8005bc2:	d504      	bpl.n	8005bce <__sflush_r+0x7e>
 8005bc4:	1c42      	adds	r2, r0, #1
 8005bc6:	d101      	bne.n	8005bcc <__sflush_r+0x7c>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b903      	cbnz	r3, 8005bce <__sflush_r+0x7e>
 8005bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8005bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd0:	602f      	str	r7, [r5, #0]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d0c9      	beq.n	8005b6a <__sflush_r+0x1a>
 8005bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d002      	beq.n	8005be4 <__sflush_r+0x94>
 8005bde:	4628      	mov	r0, r5
 8005be0:	f7ff fa2c 	bl	800503c <_free_r>
 8005be4:	2000      	movs	r0, #0
 8005be6:	6360      	str	r0, [r4, #52]	; 0x34
 8005be8:	e7c0      	b.n	8005b6c <__sflush_r+0x1c>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b0      	blx	r6
 8005bf0:	1c41      	adds	r1, r0, #1
 8005bf2:	d1c8      	bne.n	8005b86 <__sflush_r+0x36>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0c5      	beq.n	8005b86 <__sflush_r+0x36>
 8005bfa:	2b1d      	cmp	r3, #29
 8005bfc:	d001      	beq.n	8005c02 <__sflush_r+0xb2>
 8005bfe:	2b16      	cmp	r3, #22
 8005c00:	d101      	bne.n	8005c06 <__sflush_r+0xb6>
 8005c02:	602f      	str	r7, [r5, #0]
 8005c04:	e7b1      	b.n	8005b6a <__sflush_r+0x1a>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	e7ad      	b.n	8005b6c <__sflush_r+0x1c>
 8005c10:	690f      	ldr	r7, [r1, #16]
 8005c12:	2f00      	cmp	r7, #0
 8005c14:	d0a9      	beq.n	8005b6a <__sflush_r+0x1a>
 8005c16:	0793      	lsls	r3, r2, #30
 8005c18:	680e      	ldr	r6, [r1, #0]
 8005c1a:	bf08      	it	eq
 8005c1c:	694b      	ldreq	r3, [r1, #20]
 8005c1e:	600f      	str	r7, [r1, #0]
 8005c20:	bf18      	it	ne
 8005c22:	2300      	movne	r3, #0
 8005c24:	eba6 0807 	sub.w	r8, r6, r7
 8005c28:	608b      	str	r3, [r1, #8]
 8005c2a:	f1b8 0f00 	cmp.w	r8, #0
 8005c2e:	dd9c      	ble.n	8005b6a <__sflush_r+0x1a>
 8005c30:	4643      	mov	r3, r8
 8005c32:	463a      	mov	r2, r7
 8005c34:	6a21      	ldr	r1, [r4, #32]
 8005c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b0      	blx	r6
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	dc06      	bgt.n	8005c4e <__sflush_r+0xfe>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c4c:	e78e      	b.n	8005b6c <__sflush_r+0x1c>
 8005c4e:	4407      	add	r7, r0
 8005c50:	eba8 0800 	sub.w	r8, r8, r0
 8005c54:	e7e9      	b.n	8005c2a <__sflush_r+0xda>
 8005c56:	bf00      	nop
 8005c58:	20400001 	.word	0x20400001

08005c5c <_fflush_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	690b      	ldr	r3, [r1, #16]
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b1db      	cbz	r3, 8005c9e <_fflush_r+0x42>
 8005c66:	b118      	cbz	r0, 8005c70 <_fflush_r+0x14>
 8005c68:	6983      	ldr	r3, [r0, #24]
 8005c6a:	b90b      	cbnz	r3, 8005c70 <_fflush_r+0x14>
 8005c6c:	f7ff faf6 	bl	800525c <__sinit>
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <_fflush_r+0x48>)
 8005c72:	429c      	cmp	r4, r3
 8005c74:	d109      	bne.n	8005c8a <_fflush_r+0x2e>
 8005c76:	686c      	ldr	r4, [r5, #4]
 8005c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c7c:	b17b      	cbz	r3, 8005c9e <_fflush_r+0x42>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c86:	f7ff bf63 	b.w	8005b50 <__sflush_r>
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <_fflush_r+0x4c>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	d101      	bne.n	8005c94 <_fflush_r+0x38>
 8005c90:	68ac      	ldr	r4, [r5, #8]
 8005c92:	e7f1      	b.n	8005c78 <_fflush_r+0x1c>
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_fflush_r+0x50>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	bf08      	it	eq
 8005c9a:	68ec      	ldreq	r4, [r5, #12]
 8005c9c:	e7ec      	b.n	8005c78 <_fflush_r+0x1c>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08005eb0 	.word	0x08005eb0
 8005ca8:	08005ed0 	.word	0x08005ed0
 8005cac:	08005e90 	.word	0x08005e90

08005cb0 <_lseek_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4c07      	ldr	r4, [pc, #28]	; (8005cd0 <_lseek_r+0x20>)
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	4608      	mov	r0, r1
 8005cb8:	4611      	mov	r1, r2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fb f9c4 	bl	800104c <_lseek>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_lseek_r+0x1e>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_lseek_r+0x1e>
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	2000020c 	.word	0x2000020c

08005cd4 <__swhatbuf_r>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	460e      	mov	r6, r1
 8005cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	b096      	sub	sp, #88	; 0x58
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	461d      	mov	r5, r3
 8005ce4:	da07      	bge.n	8005cf6 <__swhatbuf_r+0x22>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	89b3      	ldrh	r3, [r6, #12]
 8005cec:	061a      	lsls	r2, r3, #24
 8005cee:	d410      	bmi.n	8005d12 <__swhatbuf_r+0x3e>
 8005cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf4:	e00e      	b.n	8005d14 <__swhatbuf_r+0x40>
 8005cf6:	466a      	mov	r2, sp
 8005cf8:	f000 f862 	bl	8005dc0 <_fstat_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	dbf2      	blt.n	8005ce6 <__swhatbuf_r+0x12>
 8005d00:	9a01      	ldr	r2, [sp, #4]
 8005d02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d0a:	425a      	negs	r2, r3
 8005d0c:	415a      	adcs	r2, r3
 8005d0e:	602a      	str	r2, [r5, #0]
 8005d10:	e7ee      	b.n	8005cf0 <__swhatbuf_r+0x1c>
 8005d12:	2340      	movs	r3, #64	; 0x40
 8005d14:	2000      	movs	r0, #0
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	b016      	add	sp, #88	; 0x58
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}

08005d1c <__smakebuf_r>:
 8005d1c:	898b      	ldrh	r3, [r1, #12]
 8005d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d20:	079d      	lsls	r5, r3, #30
 8005d22:	4606      	mov	r6, r0
 8005d24:	460c      	mov	r4, r1
 8005d26:	d507      	bpl.n	8005d38 <__smakebuf_r+0x1c>
 8005d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	2301      	movs	r3, #1
 8005d32:	6163      	str	r3, [r4, #20]
 8005d34:	b002      	add	sp, #8
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	ab01      	add	r3, sp, #4
 8005d3a:	466a      	mov	r2, sp
 8005d3c:	f7ff ffca 	bl	8005cd4 <__swhatbuf_r>
 8005d40:	9900      	ldr	r1, [sp, #0]
 8005d42:	4605      	mov	r5, r0
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff f9c7 	bl	80050d8 <_malloc_r>
 8005d4a:	b948      	cbnz	r0, 8005d60 <__smakebuf_r+0x44>
 8005d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d50:	059a      	lsls	r2, r3, #22
 8005d52:	d4ef      	bmi.n	8005d34 <__smakebuf_r+0x18>
 8005d54:	f023 0303 	bic.w	r3, r3, #3
 8005d58:	f043 0302 	orr.w	r3, r3, #2
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	e7e3      	b.n	8005d28 <__smakebuf_r+0xc>
 8005d60:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <__smakebuf_r+0x7c>)
 8005d62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	6020      	str	r0, [r4, #0]
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	9b00      	ldr	r3, [sp, #0]
 8005d70:	6163      	str	r3, [r4, #20]
 8005d72:	9b01      	ldr	r3, [sp, #4]
 8005d74:	6120      	str	r0, [r4, #16]
 8005d76:	b15b      	cbz	r3, 8005d90 <__smakebuf_r+0x74>
 8005d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f831 	bl	8005de4 <_isatty_r>
 8005d82:	b128      	cbz	r0, 8005d90 <__smakebuf_r+0x74>
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	431d      	orrs	r5, r3
 8005d94:	81a5      	strh	r5, [r4, #12]
 8005d96:	e7cd      	b.n	8005d34 <__smakebuf_r+0x18>
 8005d98:	08005225 	.word	0x08005225

08005d9c <_read_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4c07      	ldr	r4, [pc, #28]	; (8005dbc <_read_r+0x20>)
 8005da0:	4605      	mov	r5, r0
 8005da2:	4608      	mov	r0, r1
 8005da4:	4611      	mov	r1, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f7fb f8ee 	bl	8000f8c <_read>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_read_r+0x1e>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_read_r+0x1e>
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	2000020c 	.word	0x2000020c

08005dc0 <_fstat_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4c07      	ldr	r4, [pc, #28]	; (8005de0 <_fstat_r+0x20>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	f7fb f922 	bl	8001016 <_fstat>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d102      	bne.n	8005ddc <_fstat_r+0x1c>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	b103      	cbz	r3, 8005ddc <_fstat_r+0x1c>
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	bf00      	nop
 8005de0:	2000020c 	.word	0x2000020c

08005de4 <_isatty_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4c06      	ldr	r4, [pc, #24]	; (8005e00 <_isatty_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4605      	mov	r5, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	f7fb f921 	bl	8001036 <_isatty>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_isatty_r+0x1a>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_isatty_r+0x1a>
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	2000020c 	.word	0x2000020c

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
