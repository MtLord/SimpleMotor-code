
SympleMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef4  08005ef4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef4  08005ef4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005f6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005f6c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e86  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003073  00000000  00000000  00033f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00036fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00037f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fcef  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f125  00000000  00000000  00058a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9111  00000000  00000000  00067b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  00110ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dd4 	.word	0x08005dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005dd4 	.word	0x08005dd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_ZN3App11RestoreDataEi>:
extern bool CanRxFlag;

long tempID[20]={0,};
long count=0;
float App::RestoreData(int until)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	float temp_data=0;
 800027a:	f04f 0300 	mov.w	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<until;i++){
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	da0c      	bge.n	80002a6 <_ZN3App11RestoreDataEi+0x36>
		((unsigned char*)&temp_data)[i]=RxFIFO_Data[i];
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f107 0208 	add.w	r2, r7, #8
 8000292:	4413      	add	r3, r2
 8000294:	4909      	ldr	r1, [pc, #36]	; (80002bc <_ZN3App11RestoreDataEi+0x4c>)
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	440a      	add	r2, r1
 800029a:	7812      	ldrb	r2, [r2, #0]
 800029c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<until;i++){
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e7ee      	b.n	8000284 <_ZN3App11RestoreDataEi+0x14>
	}
	return temp_data;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	ee07 3a90 	vmov	s15, r3
}
 80002ac:	eeb0 0a67 	vmov.f32	s0, s15
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <_ZN3App7SetDutyEf>:


void App::SetDuty(float duty)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	ed87 0a00 	vstr	s0, [r7]
	switch(node_id)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	889b      	ldrh	r3, [r3, #4]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d843      	bhi.n	800035e <_ZN3App7SetDutyEf+0x9e>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <_ZN3App7SetDutyEf+0x1c>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080002f5 	.word	0x080002f5
 80002e0:	08000305 	.word	0x08000305
 80002e4:	08000317 	.word	0x08000317
 80002e8:	08000329 	.word	0x08000329
 80002ec:	0800033b 	.word	0x0800033b
 80002f0:	0800034d 	.word	0x0800034d
	{
	case 1:
		plow->M1.setDuty(duty);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	ed97 0a00 	vldr	s0, [r7]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f8fa 	bl	80004f6 <_ZN5Motor7setDutyEf>
		break;
 8000302:	e02c      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 2:
			plow->M2.setDuty(duty);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3314      	adds	r3, #20
 800030a:	ed97 0a00 	vldr	s0, [r7]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8f1 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000314:	e023      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 3:
			plow->M3.setDuty(duty);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3328      	adds	r3, #40	; 0x28
 800031c:	ed97 0a00 	vldr	s0, [r7]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f8e8 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000326:	e01a      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 4:
			plow->M4.setDuty(duty);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	333c      	adds	r3, #60	; 0x3c
 800032e:	ed97 0a00 	vldr	s0, [r7]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f8df 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000338:	e011      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 5:
			plow->BL1.setDuty(duty);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3350      	adds	r3, #80	; 0x50
 8000340:	ed97 0a00 	vldr	s0, [r7]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f8d6 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 800034a:	e008      	b.n	800035e <_ZN3App7SetDutyEf+0x9e>
	case 6:
			plow->BL2.setDuty(duty);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	336c      	adds	r3, #108	; 0x6c
 8000352:	ed97 0a00 	vldr	s0, [r7]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f8cd 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 800035c:	bf00      	nop

	}
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop

08000368 <_ZN3App9TaskShiftEv>:

void App::TaskShift()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if(CanRxFlag)
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <_ZN3App9TaskShiftEv+0x5c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d021      	beq.n	80003bc <_ZN3App9TaskShiftEv+0x54>
	{
		if(RXmsg.ExtId>>ORDER_BIT_Pos==SET_DUTY)
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <_ZN3App9TaskShiftEv+0x60>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	2b02      	cmp	r3, #2
 8000380:	d119      	bne.n	80003b6 <_ZN3App9TaskShiftEv+0x4e>
		{
			this->node_id=(RXmsg.ExtId>>NODE_ID_Pos)&0xF;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <_ZN3App9TaskShiftEv+0x60>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	091b      	lsrs	r3, r3, #4
 8000388:	b29b      	uxth	r3, r3
 800038a:	f003 030f 	and.w	r3, r3, #15
 800038e:	b29a      	uxth	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	809a      	strh	r2, [r3, #4]
			if((RXmsg.ExtId&0xF)==BOARDID)//ボード番号が自分のと一致したら
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <_ZN3App9TaskShiftEv+0x60>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	2b01      	cmp	r3, #1
 800039e:	d10a      	bne.n	80003b6 <_ZN3App9TaskShiftEv+0x4e>
			{
				SetDuty(RestoreData(4));
 80003a0:	2104      	movs	r1, #4
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f7ff ff64 	bl	8000270 <_ZN3App11RestoreDataEi>
 80003a8:	eef0 7a40 	vmov.f32	s15, s0
 80003ac:	eeb0 0a67 	vmov.f32	s0, s15
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff85 	bl	80002c0 <_ZN3App7SetDutyEf>
			}
		}


		CanRxFlag=false;
 80003b6:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <_ZN3App9TaskShiftEv+0x5c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
	}

}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	200000b4 	.word	0x200000b4
 80003c8:	20000094 	.word	0x20000094

080003cc <_Z12FilterConfigv>:
#define SET_ERROR_LED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
#define RESET_ERRORLED HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);

bool CanRxFlag=false;
void FilterConfig()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterIdHigh=0x0000;
 80003d2:	2300      	movs	r3, #0
 80003d4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0x0000;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;//stdid�̃f�[�^�t���[��������M
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;//��M�t�B���^��FIFO0�ɐݒ�
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank=0; //�t�B���^�o���N�ԍ���� 0-13
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //�t�B���^�X�P�[��ExtId�܂�
 80003ea:	2301      	movs	r3, #1
 80003ec:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK; //�}�X�N���[�h
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation=ENABLE; //�t�B���^�L��
 80003f2:	2301      	movs	r3, #1
 80003f4:	623b      	str	r3, [r7, #32]
//	sFilterConfig.SlaveStartFilterBank=14;

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK)
 80003f6:	463b      	mov	r3, r7
 80003f8:	4619      	mov	r1, r3
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <_Z12FilterConfigv+0x60>)
 80003fc:	f001 f9e5 	bl	80017ca <HAL_CAN_ConfigFilter>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf14      	ite	ne
 8000406:	2301      	movne	r3, #1
 8000408:	2300      	moveq	r3, #0
 800040a:	b2db      	uxtb	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <_Z12FilterConfigv+0x4a>
		{
			printf("filter config error!");
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <_Z12FilterConfigv+0x64>)
 8000412:	f004 fea3 	bl	800515c <iprintf>
		}
	HAL_CAN_Start(&hcan);
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <_Z12FilterConfigv+0x60>)
 8000418:	f001 faa1 	bl	800195e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800041c:	2102      	movs	r1, #2
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <_Z12FilterConfigv+0x60>)
 8000420:	f001 fbf3 	bl	8001c0a <HAL_CAN_ActivateNotification>
}
 8000424:	bf00      	nop
 8000426:	3728      	adds	r7, #40	; 0x28
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000c4 	.word	0x200000c4
 8000430:	08005dec 	.word	0x08005dec

08000434 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800043e:	4a0f      	ldr	r2, [pc, #60]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000440:	2100      	movs	r1, #0
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f001 facf 	bl	80019e6 <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
	   if(rx_led>20){
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b14      	cmp	r3, #20
 8000454:	dd07      	ble.n	8000466 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		   TOGGLE_RX_LED;
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800045a:	f002 f8c1 	bl	80025e0 <HAL_GPIO_TogglePin>
		   rx_led=0;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	   }
	   else{
		   rx_led++;
	   }

 }
 8000464:	e004      	b.n	8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		   rx_led++;
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800046e:	6013      	str	r3, [r2, #0]
 }
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	2000008c 	.word	0x2000008c
 800047c:	20000094 	.word	0x20000094
 8000480:	200000b4 	.word	0x200000b4
 8000484:	200000b0 	.word	0x200000b0
 8000488:	48000400 	.word	0x48000400

0800048c <_ZN5Motor3mapEfllll>:
	TIM_HandleTypeDef *Mhandler;
	GPIO_TypeDef *GPIOx;
	unsigned short pin;
	unsigned int channel;
	void HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre);
	long map(float x, long in_min, long in_max, long out_min, long out_max)
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6178      	str	r0, [r7, #20]
 8000494:	ed87 0a04 	vstr	s0, [r7, #16]
 8000498:	60f9      	str	r1, [r7, #12]
 800049a:	60ba      	str	r2, [r7, #8]
 800049c:	607b      	str	r3, [r7, #4]
		{
			return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	ee07 3a90 	vmov	s15, r3
 80004a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80004ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80004b0:	6a3a      	ldr	r2, [r7, #32]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	ee07 3a90 	vmov	s15, r3
 80004ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	ee07 3a90 	vmov	s15, r3
 80004cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	ee07 3a90 	vmov	s15, r3
 80004da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004e6:	ee17 3a90 	vmov	r3, s15
		}
 80004ea:	4618      	mov	r0, r3
 80004ec:	371c      	adds	r7, #28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <_ZN5Motor7setDutyEf>:




void Motor::setDuty(float d)
{
 80004f6:	b5b0      	push	{r4, r5, r7, lr}
 80004f8:	b084      	sub	sp, #16
 80004fa:	af02      	add	r7, sp, #8
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	ed87 0a00 	vstr	s0, [r7]
		if(d>=0)
 8000502:	edd7 7a00 	vldr	s15, [r7]
 8000506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800050a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800050e:	db20      	blt.n	8000552 <_ZN5Motor7setDutyEf+0x5c>
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6898      	ldr	r0, [r3, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	899b      	ldrh	r3, [r3, #12]
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	f002 f848 	bl	80025b0 <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(d,0,100,0,Mhandler->Instance->ARR));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685c      	ldr	r4, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	461d      	mov	r5, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	2264      	movs	r2, #100	; 0x64
 8000538:	2100      	movs	r1, #0
 800053a:	ed97 0a00 	vldr	s0, [r7]
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa4 	bl	800048c <_ZN5Motor3mapEfllll>
 8000544:	4603      	mov	r3, r0
 8000546:	462a      	mov	r2, r5
 8000548:	4621      	mov	r1, r4
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f8ac 	bl	80006a8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
		else if(d<0)
		{
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
		}
}
 8000550:	e02b      	b.n	80005aa <_ZN5Motor7setDutyEf+0xb4>
		else if(d<0)
 8000552:	edd7 7a00 	vldr	s15, [r7]
 8000556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055e:	d400      	bmi.n	8000562 <_ZN5Motor7setDutyEf+0x6c>
}
 8000560:	e023      	b.n	80005aa <_ZN5Motor7setDutyEf+0xb4>
			HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_SET);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6898      	ldr	r0, [r3, #8]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	899b      	ldrh	r3, [r3, #12]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f002 f81f 	bl	80025b0 <HAL_GPIO_WritePin>
			HAL_TIM_SetCompare(Mhandler,channel,map(-d,0,100,0,Mhandler->Instance->ARR));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685c      	ldr	r4, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	461d      	mov	r5, r3
 800057c:	edd7 7a00 	vldr	s15, [r7]
 8000580:	eef1 7a67 	vneg.f32	s15, s15
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2264      	movs	r2, #100	; 0x64
 8000592:	2100      	movs	r1, #0
 8000594:	eeb0 0a67 	vmov.f32	s0, s15
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ff77 	bl	800048c <_ZN5Motor3mapEfllll>
 800059e:	4603      	mov	r3, r0
 80005a0:	462a      	mov	r2, r5
 80005a2:	4621      	mov	r1, r4
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f87f 	bl	80006a8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bdb0      	pop	{r4, r5, r7, pc}

080005b2 <_ZN5Motor5BeginEv>:
}



void Motor::Begin()
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(Mhandler,channel) ;       //HAL�̎d�l
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4610      	mov	r0, r2
 80005c6:	f003 fae1 	bl	8003b8c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOx,pin,GPIO_PIN_RESET);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 ffeb 	bl	80025b0 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZN5Motor12SetFrequencyEl>:

void Motor::SetFrequency(long freq)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
		float freqency=freq;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f6:	edc7 7a03 	vstr	s15, [r7, #12]
		unsigned short counterperiod=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	82fb      	strh	r3, [r7, #22]
		unsigned short Prescaler=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	82bb      	strh	r3, [r7, #20]
		float ajustfreq=0;
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
		long sysclock=0;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
			sysclock=HAL_RCC_GetPCLK1Freq();
 800060c:	f003 f8fc 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8000610:	4603      	mov	r3, r0
 8000612:	60bb      	str	r3, [r7, #8]

		while(ajustfreq!=freqency)
 8000614:	ed97 7a04 	vldr	s14, [r7, #16]
 8000618:	edd7 7a03 	vldr	s15, [r7, #12]
 800061c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000624:	d031      	beq.n	800068a <_ZN5Motor12SetFrequencyEl+0xa8>
				{
					Prescaler++;
 8000626:	8abb      	ldrh	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	82bb      	strh	r3, [r7, #20]
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 800062c:	2300      	movs	r3, #0
 800062e:	82fb      	strh	r3, [r7, #22]
 8000630:	8afb      	ldrh	r3, [r7, #22]
 8000632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000636:	4293      	cmp	r3, r2
 8000638:	d0ec      	beq.n	8000614 <_ZN5Motor12SetFrequencyEl+0x32>
				{
					ajustfreq=(float)sysclock/((float)Prescaler*((float)counterperiod+1));
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000644:	8abb      	ldrh	r3, [r7, #20]
 8000646:	ee07 3a90 	vmov	s15, r3
 800064a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000658:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800065c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000668:	edc7 7a04 	vstr	s15, [r7, #16]
					if(ajustfreq==freqency)
 800066c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000670:	edd7 7a03 	vldr	s15, [r7, #12]
 8000674:	eeb4 7a67 	vcmp.f32	s14, s15
 8000678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067c:	d003      	beq.n	8000686 <_ZN5Motor12SetFrequencyEl+0xa4>
				for(counterperiod=0;counterperiod<65535;counterperiod++)
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	3301      	adds	r3, #1
 8000682:	82fb      	strh	r3, [r7, #22]
 8000684:	e7d4      	b.n	8000630 <_ZN5Motor12SetFrequencyEl+0x4e>
					{
						break;
 8000686:	bf00      	nop
		while(ajustfreq!=freqency)
 8000688:	e7c4      	b.n	8000614 <_ZN5Motor12SetFrequencyEl+0x32>
					}
				}

				}
		Mhandler->Instance->PSC=(unsigned short)Prescaler-1;
 800068a:	8abb      	ldrh	r3, [r7, #20]
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
		Mhandler->Instance->ARR=(unsigned short)counterperiod;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	8afa      	ldrh	r2, [r7, #22]
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii>:

void Motor::HAL_TIM_SetCompare(TIM_HandleTypeDef *htim,int channel, int compre)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
	switch(channel)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b14      	cmp	r3, #20
 80006ba:	d84b      	bhi.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0x1c>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	08000719 	.word	0x08000719
 80006c8:	08000755 	.word	0x08000755
 80006cc:	08000755 	.word	0x08000755
 80006d0:	08000755 	.word	0x08000755
 80006d4:	08000723 	.word	0x08000723
 80006d8:	08000755 	.word	0x08000755
 80006dc:	08000755 	.word	0x08000755
 80006e0:	08000755 	.word	0x08000755
 80006e4:	0800072d 	.word	0x0800072d
 80006e8:	08000755 	.word	0x08000755
 80006ec:	08000755 	.word	0x08000755
 80006f0:	08000755 	.word	0x08000755
 80006f4:	08000737 	.word	0x08000737
 80006f8:	08000755 	.word	0x08000755
 80006fc:	08000755 	.word	0x08000755
 8000700:	08000755 	.word	0x08000755
 8000704:	08000741 	.word	0x08000741
 8000708:	08000755 	.word	0x08000755
 800070c:	08000755 	.word	0x08000755
 8000710:	08000755 	.word	0x08000755
 8000714:	0800074b 	.word	0x0800074b
	{
	case TIM_CHANNEL_1:
		htim->Instance->CCR1=compre;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000720:	e018      	b.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_2:
			htim->Instance->CCR2=compre;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800072a:	e013      	b.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_3:
			htim->Instance->CCR3=compre;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000734:	e00e      	b.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_4:
			htim->Instance->CCR4=compre;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800073e:	e009      	b.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_5:
			htim->Instance->CCR5=compre;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8000748:	e004      	b.n	8000754 <_ZN5Motor18HAL_TIM_SetCompareEP17TIM_HandleTypeDefii+0xac>
	case TIM_CHANNEL_6:
			htim->Instance->CCR6=compre;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 8000752:	bf00      	nop

	}

}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_CAN_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_CAN_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_CAN_Init+0x64>)
 800076c:	2204      	movs	r2, #4
 800076e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_CAN_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_CAN_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_CAN_Init+0x64>)
 800077e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000782:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_CAN_Init+0x64>)
 8000786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800078a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_CAN_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_CAN_Init+0x64>)
 8000794:	2201      	movs	r2, #1
 8000796:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_CAN_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_CAN_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_CAN_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CAN_Init+0x64>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_CAN_Init+0x64>)
 80007b2:	f000 ff0f 	bl	80015d4 <HAL_CAN_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 fb00 	bl	8000dc0 <Error_Handler>
  }

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000c4 	.word	0x200000c4
 80007c8:	40006400 	.word	0x40006400

080007cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a24      	ldr	r2, [pc, #144]	; (800087c <HAL_CAN_MspInit+0xb0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d141      	bne.n	8000872 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 80007f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_CAN_MspInit+0xb4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800081e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000830:	2309      	movs	r3, #9
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f001 fd45 	bl	80022cc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2014      	movs	r0, #20
 8000848:	f001 fd09 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800084c:	2014      	movs	r0, #20
 800084e:	f001 fd22 	bl	8002296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2015      	movs	r0, #21
 8000858:	f001 fd01 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800085c:	2015      	movs	r0, #21
 800085e:	f001 fd1a 	bl	8002296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2016      	movs	r0, #22
 8000868:	f001 fcf9 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800086c:	2016      	movs	r0, #22
 800086e:	f001 fd12 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40006400 	.word	0x40006400
 8000880:	40021000 	.word	0x40021000

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xbc>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f001 fe60 	bl	80025b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2133      	movs	r1, #51	; 0x33
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0xc0>)
 80008f6:	f001 fe5b 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 PA8 PA9 
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80008fa:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 80008fe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f001 fcd9 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800091a:	2333      	movs	r3, #51	; 0x33
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xc0>)
 8000932:	f001 fccb 	bl	80022cc <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400

08000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>:
public:
	Motor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,unsigned short _pin,unsigned int _channel):
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	807b      	strh	r3, [r7, #2]
		Mhandler(Mhand),GPIOx(_GPIOx),pin(_pin),channel(_channel)
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj+0x3c>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	887a      	ldrh	r2, [r7, #2]
 800096c:	819a      	strh	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	611a      	str	r2, [r3, #16]
	{

	}
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	08005e1c 	.word	0x08005e1c

08000988 <_ZN5MotorD1Ev>:
	virtual ~Motor(){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <_ZN5MotorD1Ev+0x1c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
	}
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	08005e1c 	.word	0x08005e1c

080009a8 <_ZN5MotorD0Ev>:
	virtual ~Motor(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	}
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffe9 	bl	8000988 <_ZN5MotorD1Ev>
 80009b6:	2114      	movs	r1, #20
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f004 fae8 	bl	8004f8e <_ZdlPvj>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>:
{
private:
	GPIO_TypeDef *coast;
	unsigned short coastpin;
public:
	BLMotor(TIM_HandleTypeDef *Mhand,GPIO_TypeDef *_GPIOx,GPIO_TypeDef *_coast,unsigned short _pin,unsigned short _coastpin,unsigned int _channel):
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
		Motor(Mhand,_GPIOx,_pin,_channel),coast(_coast),coastpin(_coastpin)
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	8b3a      	ldrh	r2, [r7, #24]
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	4613      	mov	r3, r2
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	f7ff ffb0 	bl	8000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj+0x3c>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	8bba      	ldrh	r2, [r7, #28]
 80009f8:	831a      	strh	r2, [r3, #24]
	{

	}
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08005e0c 	.word	0x08005e0c

08000a08 <_ZN6CanBusC1Emm>:
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
	void SetError();
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3318      	adds	r3, #24
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2020 	strb.w	r2, [r3, #32]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30

	}
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_ZN21LowlayerHandelTypedefC1Ev>:

	Motor M1,M2,M3,M4;
	BLMotor BL1,BL2;
	CanBus extcan;
	CanBus stdcan;
	LowlayerHandelTypedef():
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
	M2(&htim2,GPIOA,GPIO_PIN_7,TIM_CHANNEL_2),
	M3(&htim2,GPIOB,GPIO_PIN_0,TIM_CHANNEL_3),
	M4(&htim2,GPIOB,GPIO_PIN_1,TIM_CHANNEL_4),
	BL1(&htim3,GPIOA,GPIOA,GPIO_PIN_8,GPIO_PIN_9,TIM_CHANNEL_1),
	BL2(&htim3,GPIOA,GPIOB,GPIO_PIN_10,GPIO_PIN_4,TIM_CHANNEL_2),
	extcan(CAN_ID_EXT,CAN_RTR_DATA),stdcan(CAN_ID_STD,CAN_RTR_DATA)
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	2300      	movs	r3, #0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a70:	492b      	ldr	r1, [pc, #172]	; (8000b20 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a72:	f7ff ff69 	bl	8000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0014 	add.w	r0, r3, #20
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a86:	4926      	ldr	r1, [pc, #152]	; (8000b20 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a88:	f7ff ff5e 	bl	8000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8000a92:	2308      	movs	r3, #8
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000a9a:	4921      	ldr	r1, [pc, #132]	; (8000b20 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000a9c:	f7ff ff54 	bl	8000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000aae:	491c      	ldr	r1, [pc, #112]	; (8000b20 <_ZN21LowlayerHandelTypedefC1Ev+0xc4>)
 8000ab0:	f7ff ff4a 	bl	8000948 <_ZN5MotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftj>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000aba:	2300      	movs	r3, #0
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ace:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ad2:	4915      	ldr	r1, [pc, #84]	; (8000b28 <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000ad4:	f7ff ff78 	bl	80009c8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8000ade:	2304      	movs	r3, #4
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <_ZN21LowlayerHandelTypedefC1Ev+0xc8>)
 8000aee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <_ZN21LowlayerHandelTypedefC1Ev+0xcc>)
 8000af4:	f7ff ff68 	bl	80009c8 <_ZN7BLMotorC1EP17TIM_HandleTypeDefP12GPIO_TypeDefS3_ttj>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3388      	adds	r3, #136	; 0x88
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff81 	bl	8000a08 <_ZN6CanBusC1Emm>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	33bc      	adds	r3, #188	; 0xbc
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff7a 	bl	8000a08 <_ZN6CanBusC1Emm>
	{

	}
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000138 	.word	0x20000138
 8000b24:	48000400 	.word	0x48000400
 8000b28:	200000ec 	.word	0x200000ec

08000b2c <_ZN21LowlayerHandelTypedef10DebugMotorEif>:
	void LedCheck()
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
		HAL_Delay(500);
	}
	void DebugMotor(int num,float duty)
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	ed87 0a01 	vstr	s0, [r7, #4]
	{
		switch(num)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d832      	bhi.n	8000ba8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x1c>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b69 	.word	0x08000b69
 8000b4c:	08000b77 	.word	0x08000b77
 8000b50:	08000b87 	.word	0x08000b87
 8000b54:	08000b97 	.word	0x08000b97
 8000b58:	08000ba7 	.word	0x08000ba7
 8000b5c:	08000ba7 	.word	0x08000ba7
 8000b60:	08000ba7 	.word	0x08000ba7
 8000b64:	08000ba7 	.word	0x08000ba7
		{
		case 1:
			M1.setDuty(duty);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcc1 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000b74:	e018      	b.n	8000ba8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 2:
			M2.setDuty(duty);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3314      	adds	r3, #20
 8000b7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fcb9 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000b84:	e010      	b.n	8000ba8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 3:
			M3.setDuty(duty);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3328      	adds	r3, #40	; 0x28
 8000b8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fcb1 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000b94:	e008      	b.n	8000ba8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 4:
			M4.setDuty(duty);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	333c      	adds	r3, #60	; 0x3c
 8000b9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fca9 	bl	80004f6 <_ZN5Motor7setDutyEf>
			break;
 8000ba4:	e000      	b.n	8000ba8 <_ZN21LowlayerHandelTypedef10DebugMotorEif+0x7c>
		case 5:

			break;
 8000ba6:	bf00      	nop
			break;
		case 8:

			break;
		}
	}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_ZN3AppC1EP21LowlayerHandelTypedef>:
	float RestoreData(int until);
	//long  RestoreData(int until);
	unsigned short node_id=0;
	unsigned short board_id=0;
public:
	App(LowlayerHandelTypedef *_plow):plow(_plow)
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	809a      	strh	r2, [r3, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	80da      	strh	r2, [r3, #6]
	{
	}
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0be      	sub	sp, #248	; 0xf8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fc6f 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f87d 	bl	8000ce4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f7ff fe4b 	bl	8000884 <MX_GPIO_Init>
  MX_CAN_Init();
 8000bee:	f7ff fdb7 	bl	8000760 <MX_CAN_Init>
  MX_TIM2_Init();
 8000bf2:	f000 fa5f 	bl	80010b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bf6:	f000 fad7 	bl	80011a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bfa:	f000 fbc5 	bl	8001388 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LowlayerHandelTypedef hlow;
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff2a 	bl	8000a5c <_ZN21LowlayerHandelTypedefC1Ev>

  hlow.M1.SetFrequency(25000);
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fce6 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  hlow.M2.SetFrequency(25000);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fcde 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  hlow.M3.SetFrequency(25000);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	3328      	adds	r3, #40	; 0x28
 8000c2c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fcd6 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  hlow.M4.SetFrequency(25000);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	333c      	adds	r3, #60	; 0x3c
 8000c3c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fcce 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  hlow.BL1.SetFrequency(40000);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	3350      	adds	r3, #80	; 0x50
 8000c4c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcc6 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  hlow.BL2.SetFrequency(40000);
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	336c      	adds	r3, #108	; 0x6c
 8000c5c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fcbe 	bl	80005e2 <_ZN5Motor12SetFrequencyEl>
  HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f000 fc92 	bl	8001590 <HAL_Delay>

  hlow.M1.Begin();
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc9e 	bl	80005b2 <_ZN5Motor5BeginEv>
  hlow.M2.Begin();
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	3314      	adds	r3, #20
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc98 	bl	80005b2 <_ZN5Motor5BeginEv>
  hlow.M3.Begin();
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	3328      	adds	r3, #40	; 0x28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc92 	bl	80005b2 <_ZN5Motor5BeginEv>
  hlow.M4.Begin();
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	333c      	adds	r3, #60	; 0x3c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc8c 	bl	80005b2 <_ZN5Motor5BeginEv>
  hlow.BL1.Begin();
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	3350      	adds	r3, #80	; 0x50
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc86 	bl	80005b2 <_ZN5Motor5BeginEv>
  hlow.BL2.Begin();
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	336c      	adds	r3, #108	; 0x6c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc80 	bl	80005b2 <_ZN5Motor5BeginEv>

  App app(&hlow);
 8000cb2:	f107 0208 	add.w	r2, r7, #8
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff78 	bl	8000bb0 <_ZN3AppC1EP21LowlayerHandelTypedef>
  FilterConfig();
 8000cc0:	f7ff fb84 	bl	80003cc <_Z12FilterConfigv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RUN
	  app.TaskShift();
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fb4e 	bl	8000368 <_ZN3App9TaskShiftEv>
#endif
#ifdef DEBUG
	  hlow.DebugMotor(1,-90);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000ce0 <main+0x104>
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff28 	bl	8000b2c <_ZN21LowlayerHandelTypedef10DebugMotorEif>
	  app.TaskShift();
 8000cdc:	e7f2      	b.n	8000cc4 <main+0xe8>
 8000cde:	bf00      	nop
 8000ce0:	c2b40000 	.word	0xc2b40000

08000ce4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	; 0x58
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 f982 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fc68 	bl	8002614 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf14      	ite	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	2300      	moveq	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000d54:	f000 f834 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2102      	movs	r1, #2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fb55 	bl	8003424 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf14      	ite	ne
 8000d80:	2301      	movne	r3, #1
 8000d82:	2300      	moveq	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000d8a:	f000 f819 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000d8e:	f241 0301 	movw	r3, #4097	; 0x1001
 8000d92:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fd76 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf14      	ite	ne
 8000daa:	2301      	movne	r3, #1
 8000dac:	2300      	moveq	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000db4:	f000 f804 	bl	8000dc0 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3758      	adds	r7, #88	; 0x58
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <_ZN7BLMotorD1Ev>:
class BLMotor:public Motor
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_ZN7BLMotorD1Ev+0x20>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fdd1 	bl	8000988 <_ZN5MotorD1Ev>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	08005e0c 	.word	0x08005e0c

08000df4 <_ZN7BLMotorD0Ev>:
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ffe7 	bl	8000dd0 <_ZN7BLMotorD1Ev>
 8000e02:	211c      	movs	r1, #28
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f004 f8c2 	bl	8004f8e <_ZdlPvj>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e22:	2201      	movs	r2, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <__io_putchar+0x20>)
 8000e26:	f003 fcad 	bl	8004784 <HAL_UART_Transmit>

  return ch;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000184 	.word	0x20000184

08000e38 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint8_t ch = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 8000e44:	f107 010f 	add.w	r1, r7, #15
 8000e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <__io_getchar+0x40>)
 8000e50:	f003 fd2c 	bl	80048ac <HAL_UART_Receive>

  if (ch == '\r')
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b0d      	cmp	r3, #13
 8000e58:	d104      	bne.n	8000e64 <__io_getchar+0x2c>
  {
      __io_putchar('\r');
 8000e5a:	200d      	movs	r0, #13
 8000e5c:	f7ff ffda 	bl	8000e14 <__io_putchar>
      ch = '\n';
 8000e60:	230a      	movs	r3, #10
 8000e62:	73fb      	strb	r3, [r7, #15]
  }

  return __io_putchar(ch);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffd4 	bl	8000e14 <__io_putchar>
 8000e6c:	4603      	mov	r3, r0
//  return ch;
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000184 	.word	0x20000184

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fb1a 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <CAN_RX0_IRQHandler+0x10>)
 8000f26:	f000 fe96 	bl	8001c56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c4 	.word	0x200000c4

08000f34 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <CAN_RX1_IRQHandler+0x10>)
 8000f3a:	f000 fe8c 	bl	8001c56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000c4 	.word	0x200000c4

08000f48 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <CAN_SCE_IRQHandler+0x10>)
 8000f4e:	f000 fe82 	bl	8001c56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000c4 	.word	0x200000c4

08000f5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00a      	b.n	8000f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f6e:	f7ff ff63 	bl	8000e38 <__io_getchar>
 8000f72:	4601      	mov	r1, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	b2ca      	uxtb	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf0      	blt.n	8000f6e <_read+0x12>
	}

return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e009      	b.n	8000fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff2f 	bl	8000e14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf1      	blt.n	8000fa8 <_write+0x12>
	}
	return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_close>:

int _close(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_isatty>:

int _isatty(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	return 1;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_sbrk+0x50>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x16>
		heap_end = &end;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <_sbrk+0x50>)
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <_sbrk+0x54>)
 800104c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <_sbrk+0x50>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <_sbrk+0x50>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	466a      	mov	r2, sp
 800105e:	4293      	cmp	r3, r2
 8001060:	d907      	bls.n	8001072 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001062:	f003 ff99 	bl	8004f98 <__errno>
 8001066:	4602      	mov	r2, r0
 8001068:	230c      	movs	r3, #12
 800106a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	e006      	b.n	8001080 <_sbrk+0x48>
	}

	heap_end += incr;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <_sbrk+0x50>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a03      	ldr	r2, [pc, #12]	; (8001088 <_sbrk+0x50>)
 800107c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000b8 	.word	0x200000b8
 800108c:	20000210 	.word	0x20000210

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_TIM2_Init+0xf0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <MX_TIM2_Init+0xf0>)
 8001100:	f002 fcec 	bl	8003adc <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800110a:	f7ff fe59 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM2_Init+0xf0>)
 800111e:	f003 fa75 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001128:	f7ff fe4a 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_TIM2_Init+0xf0>)
 8001144:	f002 fe0e 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800114e:	f7ff fe37 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2204      	movs	r2, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_TIM2_Init+0xf0>)
 800115a:	f002 fe03 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001164:	f7ff fe2c 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2208      	movs	r2, #8
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM2_Init+0xf0>)
 8001170:	f002 fdf8 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800117a:	f7ff fe21 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	220c      	movs	r2, #12
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM2_Init+0xf0>)
 8001186:	f002 fded 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001190:	f7ff fe16 	bl	8000dc0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM2_Init+0xf0>)
 8001196:	f000 f89d 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000138 	.word	0x20000138

080011a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <MX_TIM3_Init+0xc4>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_TIM3_Init+0xc0>)
 80011f2:	f002 fc73 	bl	8003adc <HAL_TIM_PWM_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011fc:	f7ff fde0 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <MX_TIM3_Init+0xc0>)
 8001210:	f003 f9fc 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121a:	f7ff fdd1 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <MX_TIM3_Init+0xc0>)
 8001236:	f002 fd95 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001240:	f7ff fdbe 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2204      	movs	r2, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM3_Init+0xc0>)
 800124c:	f002 fd8a 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001256:	f7ff fdb3 	bl	8000dc0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM3_Init+0xc0>)
 800125c:	f000 f83a 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200000ec 	.word	0x200000ec
 800126c:	40000400 	.word	0x40000400

08001270 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d10c      	bne.n	800129c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800129a:	e010      	b.n	80012be <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_TIM_PWM_MspInit+0x60>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10b      	bne.n	80012be <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_TIM_PWM_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40000400 	.word	0x40000400

080012d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d11d      	bne.n	8001332 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800130e:	230f      	movs	r3, #15
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131e:	2301      	movs	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 ffce 	bl	80022cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001330:	e021      	b.n	8001376 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d11c      	bne.n	8001376 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001346:	6153      	str	r3, [r2, #20]
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_TIM_MspPostInit+0xac>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001354:	2350      	movs	r3, #80	; 0x50
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001364:	2302      	movs	r3, #2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f000 ffab 	bl	80022cc <HAL_GPIO_Init>
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40000400 	.word	0x40000400

08001388 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 8001394:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013cc:	f003 f98c 	bl	80046e8 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f7ff fcf3 	bl	8000dc0 <Error_Handler>
  }

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000184 	.word	0x20000184
 80013e4:	40013800 	.word	0x40013800

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d127      	bne.n	800145a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x80>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x80>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144a:	2307      	movs	r3, #7
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0x84>)
 8001456:	f000 ff39 	bl	80022cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40013800 	.word	0x40013800
 8001468:	40021000 	.word	0x40021000
 800146c:	48000400 	.word	0x48000400

08001470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff fdf9 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f003 fd81 	bl	8004fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a2:	f7ff fb9b 	bl	8000bdc <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014b4:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 80014b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014bc:	20000210 	.word	0x20000210

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 feb7 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fccc 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fecf 	bl	80022b2 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800152c:	f000 fe97 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	20000008 	.word	0x20000008
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000008 	.word	0x20000008
 8001574:	20000208 	.word	0x20000208

08001578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;  
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000208 	.word	0x20000208

08001590 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_Delay+0x40>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0ed      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff f8ea 	bl	80007cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0202 	bic.w	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ffb6 	bl	8001578 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ffb2 	bl	8001578 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0c5      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e5      	bne.n	8001610 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ff90 	bl	8001578 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ff8c 	bl	8001578 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e09f      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e5b      	ldrb	r3, [r3, #25]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e9b      	ldrb	r3, [r3, #26]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0220 	bic.w	r2, r2, #32
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7edb      	ldrb	r3, [r3, #27]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0210 	bic.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0208 	orr.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5b      	ldrb	r3, [r3, #29]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017e2:	7cfb      	ldrb	r3, [r7, #19]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d003      	beq.n	80017f0 <HAL_CAN_ConfigFilter+0x26>
 80017e8:	7cfb      	ldrb	r3, [r7, #19]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f040 80aa 	bne.w	8001944 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	2201      	movs	r2, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d123      	bne.n	8001872 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800184c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3248      	adds	r2, #72	; 0x48
 8001852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001866:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	3348      	adds	r3, #72	; 0x48
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d122      	bne.n	80018c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	431a      	orrs	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3248      	adds	r2, #72	; 0x48
 80018a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	3348      	adds	r3, #72	; 0x48
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018da:	e007      	b.n	80018ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001906:	e007      	b.n	8001918 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001936:	f023 0201 	bic.w	r2, r3, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e006      	b.n	8001952 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d12e      	bne.n	80019d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198a:	f7ff fdf5 	bl	8001578 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001990:	e012      	b.n	80019b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001992:	f7ff fdf1 	bl	8001578 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b0a      	cmp	r3, #10
 800199e:	d90b      	bls.n	80019b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2205      	movs	r2, #5
 80019b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e012      	b.n	80019de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e006      	b.n	80019de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d003      	beq.n	8001a0a <HAL_CAN_GetRxMessage+0x24>
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 80f3 	bne.w	8001bf0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10e      	bne.n	8001a2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0e7      	b.n	8001bfe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d8      	b.n	8001bfe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	331b      	adds	r3, #27
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0204 	and.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	331b      	adds	r3, #27
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0d5b      	lsrs	r3, r3, #21
 8001a7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	331b      	adds	r3, #27
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	331b      	adds	r3, #27
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0202 	and.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	331b      	adds	r3, #27
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	3304      	adds	r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 020f 	and.w	r2, r3, #15
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	331b      	adds	r3, #27
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	331b      	adds	r3, #27
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0a1a      	lsrs	r2, r3, #8
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0c1a      	lsrs	r2, r3, #16
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0e1a      	lsrs	r2, r3, #24
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3303      	adds	r3, #3
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3304      	adds	r3, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0c1a      	lsrs	r2, r3, #16
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3306      	adds	r3, #6
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e1a      	lsrs	r2, r3, #24
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3307      	adds	r3, #7
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e007      	b.n	8001bec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e006      	b.n	8001bfe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d002      	beq.n	8001c28 <HAL_CAN_ActivateNotification+0x1e>
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d109      	bne.n	8001c3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6959      	ldr	r1, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e006      	b.n	8001c4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08a      	sub	sp, #40	; 0x28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d07c      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d023      	beq.n	8001cee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f97d 	bl	8001fb8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cbe:	e016      	b.n	8001cee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e00c      	b.n	8001cee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e002      	b.n	8001cee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f983 	bl	8001ff4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d024      	beq.n	8001d42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f95d 	bl	8001fcc <HAL_CAN_TxMailbox1CompleteCallback>
 8001d12:	e016      	b.n	8001d42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e00c      	b.n	8001d42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e002      	b.n	8001d42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f963 	bl	8002008 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d024      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f93d 	bl	8001fe0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d66:	e016      	b.n	8001d96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e00c      	b.n	8001d96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	e002      	b.n	8001d96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f943 	bl	800201c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2210      	movs	r2, #16
 8001db8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f92a 	bl	8002030 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7fe fb1d 	bl	8000434 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00c      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2208      	movs	r2, #8
 8001e38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f90c 	bl	8002058 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8f3 	bl	8002044 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2210      	movs	r2, #16
 8001e78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8f6 	bl	800206c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8ef 	bl	8002080 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d075      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03d      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d038      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f24:	2b30      	cmp	r3, #48	; 0x30
 8001f26:	d017      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x302>
 8001f28:	2b30      	cmp	r3, #48	; 0x30
 8001f2a:	d804      	bhi.n	8001f36 <HAL_CAN_IRQHandler+0x2e0>
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d009      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x2ee>
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d00c      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f34:	e024      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f36:	2b50      	cmp	r3, #80	; 0x50
 8001f38:	d018      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x316>
 8001f3a:	2b60      	cmp	r3, #96	; 0x60
 8001f3c:	d01b      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x320>
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d00f      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f42:	e01d      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f4c:	e018      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f56:	e013      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0320 	orr.w	r3, r3, #32
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f60:	e00e      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	e009      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e004      	b.n	8001f80 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2204      	movs	r2, #4
 8001f96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f872 	bl	8002094 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff3e 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff31 	bl	800210c <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022da:	e14e      	b.n	800257a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8140 	beq.w	8002574 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d00b      	beq.n	8002314 <HAL_GPIO_Init+0x48>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002308:	2b11      	cmp	r3, #17
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d130      	bne.n	8002376 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234a:	2201      	movs	r2, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 0201 	and.w	r2, r3, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0xea>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 809a 	beq.w	8002574 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_GPIO_Init+0x2d0>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1e0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <HAL_GPIO_Init+0x2d4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1dc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a45      	ldr	r2, [pc, #276]	; (80025a4 <HAL_GPIO_Init+0x2d8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1d8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <HAL_GPIO_Init+0x2dc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1d4>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024ac:	2300      	movs	r3, #0
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024be:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_GPIO_Init+0x2d0>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024f0:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aea9 	bne.w	80022dc <HAL_GPIO_Init+0x10>
  }
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	48000400 	.word	0x48000400
 80025a4:	48000800 	.word	0x48000800
 80025a8:	48000c00 	.word	0x48000c00
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43d9      	mvns	r1, r3
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	400b      	ands	r3, r1
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800261a:	af00      	add	r7, sp, #0
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f000 bef4 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 816a 	beq.w	8002912 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800263e:	4bb3      	ldr	r3, [pc, #716]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800264a:	4bb0      	ldr	r3, [pc, #704]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d159      	bne.n	800270a <HAL_RCC_OscConfig+0xf6>
 8002656:	4bad      	ldr	r3, [pc, #692]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002662:	d152      	bne.n	800270a <HAL_RCC_OscConfig+0xf6>
 8002664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002668:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002678:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0x82>
 8002690:	4b9e      	ldr	r3, [pc, #632]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0xae>
 8002696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026be:	4b93      	ldr	r3, [pc, #588]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026ce:	fa92 f2a2 	rbit	r2, r2
 80026d2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 810c 	beq.w	8002910 <HAL_RCC_OscConfig+0x2fc>
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8106 	bne.w	8002910 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f000 be86 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x110>
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e030      	b.n	8002786 <HAL_RCC_OscConfig+0x172>
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x134>
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b74      	ldr	r3, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01e      	b.n	8002786 <HAL_RCC_OscConfig+0x172>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x15a>
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6c      	ldr	r2, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 800275a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a69      	ldr	r2, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0x172>
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a66      	ldr	r2, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	495d      	ldr	r1, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d059      	beq.n	8002858 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fee8 	bl	8001578 <HAL_GetTick>
 80027a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ae:	f7fe fee3 	bl	8001578 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d902      	bls.n	80027c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 be29 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
 80027c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1e2>
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x20e>
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800280a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002812:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002826:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800282a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002836:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ab      	beq.n	80027ae <HAL_RCC_OscConfig+0x19a>
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fe8e 	bl	8001578 <HAL_GetTick>
 800285c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002862:	f7fe fe89 	bl	8001578 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d902      	bls.n	8002878 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f000 bdcf 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800288c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_OscConfig+0x296>
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x2c2>
 80028aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCC_OscConfig+0x2f8>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028e2:	fa92 f2a2 	rbit	r2, r2
 80028e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028ee:	fab2 f282 	clz	r2, r2
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ab      	bne.n	8002862 <HAL_RCC_OscConfig+0x24e>
 800290a:	e002      	b.n	8002912 <HAL_RCC_OscConfig+0x2fe>
 800290c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 816f 	beq.w	8002c00 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002922:	4bd0      	ldr	r3, [pc, #832]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800292e:	4bcd      	ldr	r3, [pc, #820]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d16c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x400>
 800293a:	4bca      	ldr	r3, [pc, #808]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d166      	bne.n	8002a14 <HAL_RCC_OscConfig+0x400>
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002958:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_RCC_OscConfig+0x362>
 8002970:	4bbc      	ldr	r3, [pc, #752]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	e013      	b.n	800299e <HAL_RCC_OscConfig+0x38a>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800298e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800299a:	4bb2      	ldr	r3, [pc, #712]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2202      	movs	r2, #2
 80029a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f002 021f 	and.w	r2, r2, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_RCC_OscConfig+0x3cc>
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f000 bd1b 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	21f8      	movs	r1, #248	; 0xf8
 80029f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029f8:	fa91 f1a1 	rbit	r1, r1
 80029fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a00:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a04:	fab1 f181 	clz	r1, r1
 8002a08:	b2c9      	uxtb	r1, r1
 8002a0a:	408b      	lsls	r3, r1
 8002a0c:	4995      	ldr	r1, [pc, #596]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	e0f5      	b.n	8002c00 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8085 	beq.w	8002b2a <HAL_RCC_OscConfig+0x516>
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd94 	bl	8001578 <HAL_GetTick>
 8002a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fd8f 	bl	8001578 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	f000 bcd5 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_OscConfig+0x488>
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e013      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4b0>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ab4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002aca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0af      	beq.n	8002a56 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	21f8      	movs	r1, #248	; 0xf8
 8002b06:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b0e:	fa91 f1a1 	rbit	r1, r1
 8002b12:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b16:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b1a:	fab1 f181 	clz	r1, r1
 8002b1e:	b2c9      	uxtb	r1, r1
 8002b20:	408b      	lsls	r3, r1
 8002b22:	4950      	ldr	r1, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e06a      	b.n	8002c00 <HAL_RCC_OscConfig+0x5ec>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fd0f 	bl	8001578 <HAL_GetTick>
 8002b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fd0a 	bl	8001578 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	f000 bc50 	b.w	8003416 <HAL_RCC_OscConfig+0xe02>
 8002b76:	2302      	movs	r3, #2
 8002b78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x592>
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	e013      	b.n	8002bce <HAL_RCC_OscConfig+0x5ba>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_OscConfig+0x650>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002be0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1af      	bne.n	8002b60 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80da 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d069      	beq.n	8002cee <HAL_RCC_OscConfig+0x6da>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x654>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fc98 	bl	8001578 <HAL_GetTick>
 8002c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	e00e      	b.n	8002c6c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fc93 	bl	8001578 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d906      	bls.n	8002c6c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e3d9      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	10908120 	.word	0x10908120
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4ba5      	ldr	r3, [pc, #660]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	6019      	str	r1, [r3, #0]
 8002cba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f1a3 	rbit	r1, r3
 8002cc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cc8:	6019      	str	r1, [r3, #0]
  return result;
 8002cca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0b0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x63a>
 8002cec:	e06a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x7b0>
 8002cee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d04:	601a      	str	r2, [r3, #0]
  return result;
 8002d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fc2a 	bl	8001578 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fc25 	bl	8001578 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e36b      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 8002d3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d72:	2202      	movs	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d8e:	2102      	movs	r1, #2
 8002d90:	6019      	str	r1, [r3, #0]
 8002d92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f1a3 	rbit	r1, r3
 8002d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002da0:	6019      	str	r1, [r3, #0]
  return result;
 8002da2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1b2      	bne.n	8002d2a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8158 	beq.w	8003084 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	61d3      	str	r3, [r2, #28]
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11a      	bne.n	8002e4e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fba8 	bl	8001578 <HAL_GetTick>
 8002e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe fba3 	bl	8001578 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e2e9      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ef      	beq.n	8002e2e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x852>
 8002e58:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a39      	ldr	r2, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	e02f      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8b2>
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x876>
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e01d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8b2>
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x89a>
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8b2>
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d06b      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fb52 	bl	8001578 <HAL_GetTick>
 8002ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fb4d 	bl	8001578 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e291      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 8002ef2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d109      	bne.n	8002f50 <HAL_RCC_OscConfig+0x93c>
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <HAL_RCC_OscConfig+0x930>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x958>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	10908120 	.word	0x10908120
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f54:	2202      	movs	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4bbb      	ldr	r3, [pc, #748]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f70:	2102      	movs	r1, #2
 8002f72:	6011      	str	r1, [r2, #0]
 8002f74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	fa92 f1a2 	rbit	r1, r2
 8002f7e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f82:	6011      	str	r1, [r2, #0]
  return result;
 8002f84:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d099      	beq.n	8002eda <HAL_RCC_OscConfig+0x8c6>
 8002fa6:	e063      	b.n	8003070 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fae6 	bl	8001578 <HAL_GetTick>
 8002fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	e00b      	b.n	8002fca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fae1 	bl	8001578 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e225      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 8002fca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fce:	2202      	movs	r2, #2
 8002fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ff8:	601a      	str	r2, [r3, #0]
  return result;
 8002ffa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d102      	bne.n	800301a <HAL_RCC_OscConfig+0xa06>
 8003014:	4b90      	ldr	r3, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	e00d      	b.n	8003036 <HAL_RCC_OscConfig+0xa22>
 800301a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b89      	ldr	r3, [pc, #548]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800303a:	2102      	movs	r1, #2
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	fa92 f1a2 	rbit	r1, r2
 8003048:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800304c:	6011      	str	r1, [r2, #0]
  return result;
 800304e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1a0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003070:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b77      	ldr	r3, [pc, #476]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4a76      	ldr	r2, [pc, #472]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81c2 	beq.w	8003414 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	4b71      	ldr	r3, [pc, #452]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	f000 819c 	beq.w	80033d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f040 8114 	bne.w	80032d2 <HAL_RCC_OscConfig+0xcbe>
 80030aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030c2:	601a      	str	r2, [r3, #0]
  return result;
 80030c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fa4a 	bl	8001578 <HAL_GetTick>
 80030e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e009      	b.n	80030fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fa45 	bl	8001578 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e18b      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 80030fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800311c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0xb24>
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0xb5c>
 8003138:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800313c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fa92 f1a2 	rbit	r1, r2
 8003184:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003188:	6011      	str	r1, [r2, #0]
  return result;
 800318a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d19e      	bne.n	80030ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	4925      	ldr	r1, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
 80031c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031e0:	601a      	str	r2, [r3, #0]
  return result;
 80031e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031e6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2301      	movs	r3, #1
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe f9bb 	bl	8001578 <HAL_GetTick>
 8003202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe f9b6 	bl	8001578 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0fc      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 800321c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003234:	601a      	str	r2, [r3, #0]
  return result;
 8003236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800323a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0xc48>
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_RCC_OscConfig+0xc44>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e01e      	b.n	8003294 <HAL_RCC_OscConfig+0xc80>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800327a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_OscConfig+0xe0c>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003298:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fa92 f1a2 	rbit	r1, r2
 80032a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032ac:	6011      	str	r1, [r2, #0]
  return result;
 80032ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d09b      	beq.n	8003208 <HAL_RCC_OscConfig+0xbf4>
 80032d0:	e0a0      	b.n	8003414 <HAL_RCC_OscConfig+0xe00>
 80032d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ea:	601a      	str	r2, [r3, #0]
  return result;
 80032ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	2300      	movs	r3, #0
 8003306:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe f936 	bl	8001578 <HAL_GetTick>
 800330c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	e009      	b.n	8003326 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe f931 	bl	8001578 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e077      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
 8003326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800332a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333e:	601a      	str	r2, [r3, #0]
  return result;
 8003340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003344:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_RCC_OscConfig+0xd4c>
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0xe0c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0xd84>
 8003360:	f107 0320 	add.w	r3, r7, #32
 8003364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f107 0320 	add.w	r3, r7, #32
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f107 0318 	add.w	r3, r7, #24
 800337e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f107 0318 	add.w	r3, r7, #24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0xe0c>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f107 0210 	add.w	r2, r7, #16
 800339c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	f107 0210 	add.w	r2, r7, #16
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	fa92 f1a2 	rbit	r1, r2
 80033ac:	f107 020c 	add.w	r2, r7, #12
 80033b0:	6011      	str	r1, [r2, #0]
  return result;
 80033b2:	f107 020c 	add.w	r2, r7, #12
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0220 	orr.w	r2, r2, #32
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d19e      	bne.n	8003312 <HAL_RCC_OscConfig+0xcfe>
 80033d4:	e01e      	b.n	8003414 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e018      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0xe0c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d108      	bne.n	8003410 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b09e      	sub	sp, #120	; 0x78
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e162      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b90      	ldr	r3, [pc, #576]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	498b      	ldr	r1, [pc, #556]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e14a      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	497f      	ldr	r1, [pc, #508]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80dc 	beq.w	8003650 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d13c      	bne.n	800351a <HAL_RCC_ClockConfig+0xf6>
 80034a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_ClockConfig+0xa6>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e00f      	b.n	80034ea <HAL_RCC_ClockConfig+0xc6>
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	667b      	str	r3, [r7, #100]	; 0x64
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80034f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f2:	fa92 f2a2 	rbit	r2, r2
 80034f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d17b      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0f3      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d13c      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
 8003522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_ClockConfig+0x128>
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e00f      	b.n	800356c <HAL_RCC_ClockConfig+0x148>
 800354c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
 800355a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003570:	63ba      	str	r2, [r7, #56]	; 0x38
 8003572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003574:	fa92 f2a2 	rbit	r2, r2
 8003578:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800357a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d13a      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b2      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 800359c:	2302      	movs	r3, #2
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e00d      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1bc>
 80035c4:	2302      	movs	r3, #2
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	61ba      	str	r2, [r7, #24]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	fa92 f2a2 	rbit	r2, r2
 80035ea:	617a      	str	r2, [r7, #20]
  return result;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e079      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	491a      	ldr	r1, [pc, #104]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd ffaa 	bl	8001578 <HAL_GetTick>
 8003624:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd ffa6 	bl	8001578 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e061      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d214      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4906      	ldr	r1, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e040      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	491a      	ldr	r1, [pc, #104]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4912      	ldr	r1, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036c6:	f000 f829 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	22f0      	movs	r2, #240	; 0xf0
 80036d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	fa92 f2a2 	rbit	r2, r2
 80036de:	60fa      	str	r2, [r7, #12]
  return result;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	40d3      	lsrs	r3, r2
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x2ec>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	fa21 f303 	lsr.w	r3, r1, r3
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x2f0>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_ClockConfig+0x2f4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fef8 	bl	80014f0 <HAL_InitTick>
  
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3778      	adds	r7, #120	; 0x78
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	08005e24 	.word	0x08005e24
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b08b      	sub	sp, #44	; 0x2c
 8003720:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x30>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x36>
 800374a:	e03c      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003758:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800375c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	fa92 f2a2 	rbit	r2, r2
 8003764:	607a      	str	r2, [r7, #4]
  return result;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	40d3      	lsrs	r3, r2
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	220f      	movs	r2, #15
 8003780:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa92 f2a2 	rbit	r2, r2
 8003788:	60fa      	str	r2, [r7, #12]
  return result;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	40d3      	lsrs	r3, r2
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	e004      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	623b      	str	r3, [r7, #32]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037c8:	623b      	str	r3, [r7, #32]
      break;
 80037ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	08005e3c 	.word	0x08005e3c
 80037e8:	08005e4c 	.word	0x08005e4c
 80037ec:	003d0900 	.word	0x003d0900

080037f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800380e:	f7ff ffef 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003812:	4601      	mov	r1, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800381c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003820:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	fa92 f2a2 	rbit	r2, r2
 8003828:	603a      	str	r2, [r7, #0]
  return result;
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	40d3      	lsrs	r3, r2
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08005e34 	.word	0x08005e34

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003852:	f7ff ffcd 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003856:	4601      	mov	r1, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003860:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003864:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	fa92 f2a2 	rbit	r2, r2
 800386c:	603a      	str	r2, [r7, #0]
  return result;
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	40d3      	lsrs	r3, r2
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x40>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08005e34 	.word	0x08005e34

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b092      	sub	sp, #72	; 0x48
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80cd 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b86      	ldr	r3, [pc, #536]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10e      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4a82      	ldr	r2, [pc, #520]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	61d3      	str	r3, [r2, #28]
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a79      	ldr	r2, [pc, #484]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fe3f 	bl	8001578 <HAL_GetTick>
 80038fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fd fe3b 	bl	8001578 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d901      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0db      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391c:	4b6c      	ldr	r3, [pc, #432]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d07d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d076      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800398c:	4a50      	ldr	r2, [pc, #320]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d045      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd fdec 	bl	8001578 <HAL_GetTick>
 80039a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fde8 	bl	8001578 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e086      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039ba:	2302      	movs	r3, #2
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	2302      	movs	r3, #2
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	61fb      	str	r3, [r7, #28]
  return result;
 80039d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d102      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	e007      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2202      	movs	r2, #2
 8003a00:	613a      	str	r2, [r7, #16]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	60fa      	str	r2, [r7, #12]
  return result;
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f002 021f 	and.w	r2, r2, #31
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0bd      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f023 0210 	bic.w	r2, r3, #16
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4912      	ldr	r1, [pc, #72]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	490b      	ldr	r1, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3748      	adds	r7, #72	; 0x48
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	10908100 	.word	0x10908100

08003adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e049      	b.n	8003b82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fbb4 	bl	8001270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f000 fa32 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0x24>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e03c      	b.n	8003c2a <HAL_TIM_PWM_Start+0x9e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d109      	bne.n	8003bca <HAL_TIM_PWM_Start+0x3e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e02f      	b.n	8003c2a <HAL_TIM_PWM_Start+0x9e>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d109      	bne.n	8003be4 <HAL_TIM_PWM_Start+0x58>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e022      	b.n	8003c2a <HAL_TIM_PWM_Start+0x9e>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d109      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x72>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e015      	b.n	8003c2a <HAL_TIM_PWM_Start+0x9e>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d109      	bne.n	8003c18 <HAL_TIM_PWM_Start+0x8c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e008      	b.n	8003c2a <HAL_TIM_PWM_Start+0x9e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e088      	b.n	8003d44 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0xb6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c40:	e023      	b.n	8003c8a <HAL_TIM_PWM_Start+0xfe>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0xc6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	e01b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xfe>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0xd6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0xfe>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xe6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xfe>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xf6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_PWM_Start+0xfe>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fc94 	bl	80045c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <HAL_TIM_PWM_Start+0x1c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_TIM_PWM_Start+0x134>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <HAL_TIM_PWM_Start+0x1c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIM_PWM_Start+0x134>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <HAL_TIM_PWM_Start+0x1c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIM_PWM_Start+0x134>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <HAL_TIM_PWM_Start+0x1cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x138>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x13a>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_TIM_PWM_Start+0x1c0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x176>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d009      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x176>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_TIM_PWM_Start+0x1d0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x176>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <HAL_TIM_PWM_Start+0x1c4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d115      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_TIM_PWM_Start+0x1d4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b06      	cmp	r3, #6
 8003d12:	d015      	beq.n	8003d40 <HAL_TIM_PWM_Start+0x1b4>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d011      	beq.n	8003d40 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	e008      	b.n	8003d40 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e000      	b.n	8003d42 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	00010007 	.word	0x00010007

08003d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0fd      	b.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x216>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b14      	cmp	r3, #20
 8003d8a:	f200 80f0 	bhi.w	8003f6e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003f6f 	.word	0x08003f6f
 8003d9c:	08003f6f 	.word	0x08003f6f
 8003da0:	08003f6f 	.word	0x08003f6f
 8003da4:	08003e29 	.word	0x08003e29
 8003da8:	08003f6f 	.word	0x08003f6f
 8003dac:	08003f6f 	.word	0x08003f6f
 8003db0:	08003f6f 	.word	0x08003f6f
 8003db4:	08003e6b 	.word	0x08003e6b
 8003db8:	08003f6f 	.word	0x08003f6f
 8003dbc:	08003f6f 	.word	0x08003f6f
 8003dc0:	08003f6f 	.word	0x08003f6f
 8003dc4:	08003eab 	.word	0x08003eab
 8003dc8:	08003f6f 	.word	0x08003f6f
 8003dcc:	08003f6f 	.word	0x08003f6f
 8003dd0:	08003f6f 	.word	0x08003f6f
 8003dd4:	08003eed 	.word	0x08003eed
 8003dd8:	08003f6f 	.word	0x08003f6f
 8003ddc:	08003f6f 	.word	0x08003f6f
 8003de0:	08003f6f 	.word	0x08003f6f
 8003de4:	08003f2d 	.word	0x08003f2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f940 	bl	8004074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0204 	bic.w	r2, r2, #4
 8003e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6999      	ldr	r1, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	619a      	str	r2, [r3, #24]
      break;
 8003e26:	e0a3      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f9a6 	bl	8004180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	619a      	str	r2, [r3, #24]
      break;
 8003e68:	e082      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fa05 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0208 	orr.w	r2, r2, #8
 8003e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0204 	bic.w	r2, r2, #4
 8003e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69d9      	ldr	r1, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	61da      	str	r2, [r3, #28]
      break;
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fa63 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	021a      	lsls	r2, r3, #8
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	61da      	str	r2, [r3, #28]
      break;
 8003eea:	e041      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 faa6 	bl	8004444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f2a:	e021      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fae4 	bl	8004500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f6c:	e000      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a32      	ldr	r2, [pc, #200]	; (8004060 <TIM_Base_SetConfig+0xdc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_Base_SetConfig+0x28>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0x28>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <TIM_Base_SetConfig+0xe0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d108      	bne.n	8003fbe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <TIM_Base_SetConfig+0xdc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <TIM_Base_SetConfig+0x6a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d00f      	beq.n	8003fee <TIM_Base_SetConfig+0x6a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <TIM_Base_SetConfig+0xe0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <TIM_Base_SetConfig+0x6a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <TIM_Base_SetConfig+0x6a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d003      	beq.n	8003fee <TIM_Base_SetConfig+0x6a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <TIM_Base_SetConfig+0xdc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00b      	beq.n	8004044 <TIM_Base_SetConfig+0xc0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_Base_SetConfig+0xc0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0d      	ldr	r2, [pc, #52]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0xc0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d103      	bne.n	800404c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	615a      	str	r2, [r3, #20]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a28      	ldr	r2, [pc, #160]	; (8004170 <TIM_OC1_SetConfig+0xfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <TIM_OC1_SetConfig+0x100>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <TIM_OC1_SetConfig+0x104>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <TIM_OC1_SetConfig+0x108>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10c      	bne.n	8004106 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0308 	bic.w	r3, r3, #8
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <TIM_OC1_SetConfig+0xfc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00b      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <TIM_OC1_SetConfig+0x100>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <TIM_OC1_SetConfig+0x104>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <TIM_OC1_SetConfig+0x108>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800

08004180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0210 	bic.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a24      	ldr	r2, [pc, #144]	; (8004270 <TIM_OC2_SetConfig+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10d      	bne.n	8004200 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <TIM_OC2_SetConfig+0xf0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00b      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <TIM_OC2_SetConfig+0xf4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d007      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_OC2_SetConfig+0xf8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_OC2_SetConfig+0xfc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d113      	bne.n	8004248 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004226:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <TIM_OC3_SetConfig+0xec>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <TIM_OC3_SetConfig+0xec>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00b      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <TIM_OC3_SetConfig+0xf0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a18      	ldr	r2, [pc, #96]	; (8004374 <TIM_OC3_SetConfig+0xf4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <TIM_OC3_SetConfig+0xf8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d113      	bne.n	8004346 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <TIM_OC4_SetConfig+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00b      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <TIM_OC4_SetConfig+0xbc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <TIM_OC4_SetConfig+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <TIM_OC4_SetConfig+0xc4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d109      	bne.n	800440c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800

08004444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <TIM_OC5_SetConfig+0xac>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <TIM_OC5_SetConfig+0xb0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <TIM_OC5_SetConfig+0xb4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <TIM_OC5_SetConfig+0xb8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d109      	bne.n	80044ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	051b      	lsls	r3, r3, #20
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <TIM_OC6_SetConfig+0xb0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <TIM_OC6_SetConfig+0xb4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <TIM_OC6_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <TIM_OC6_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d109      	bne.n	8004588 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800

080045c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1a      	ldr	r2, [r3, #32]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	401a      	ands	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1a      	ldr	r2, [r3, #32]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e054      	b.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004654:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d009      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10c      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40014000 	.word	0x40014000

080046e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e040      	b.n	800477c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fe6c 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	; 0x24
 8004714:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f992 	bl	8004a50 <UART_SetConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e022      	b.n	800477c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fabe 	bl	8004cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb45 	bl	8004e04 <UART_CheckIdleState>
 800477a:	4603      	mov	r3, r0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004798:	2b20      	cmp	r3, #32
 800479a:	f040 8082 	bne.w	80048a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_UART_Transmit+0x26>
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07a      	b.n	80048a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Transmit+0x38>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e073      	b.n	80048a4 <HAL_UART_Transmit+0x120>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2221      	movs	r2, #33	; 0x21
 80047d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d2:	f7fc fed1 	bl	8001578 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x80>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004814:	e02d      	b.n	8004872 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb38 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e039      	b.n	80048a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004842:	b292      	uxth	r2, r2
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e008      	b.n	8004860 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	b292      	uxth	r2, r2
 8004858:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cb      	bne.n	8004816 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb04 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e005      	b.n	80048a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e000      	b.n	80048a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	f040 80bf 	bne.w	8004a44 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Receive+0x26>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0b7      	b.n	8004a46 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_UART_Receive+0x38>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e0b0      	b.n	8004a46 <HAL_UART_Receive+0x19a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2222      	movs	r2, #34	; 0x22
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004900:	f7fc fe3a 	bl	8001578 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d10e      	bne.n	800493e <HAL_UART_Receive+0x92>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_UART_Receive+0x88>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800492e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004932:	e02d      	b.n	8004990 <HAL_UART_Receive+0xe4>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	22ff      	movs	r2, #255	; 0xff
 8004938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800493c:	e028      	b.n	8004990 <HAL_UART_Receive+0xe4>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10d      	bne.n	8004962 <HAL_UART_Receive+0xb6>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_UART_Receive+0xac>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004956:	e01b      	b.n	8004990 <HAL_UART_Receive+0xe4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	227f      	movs	r2, #127	; 0x7f
 800495c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004960:	e016      	b.n	8004990 <HAL_UART_Receive+0xe4>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496a:	d10d      	bne.n	8004988 <HAL_UART_Receive+0xdc>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_UART_Receive+0xd2>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	227f      	movs	r2, #127	; 0x7f
 8004978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800497c:	e008      	b.n	8004990 <HAL_UART_Receive+0xe4>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	223f      	movs	r2, #63	; 0x3f
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004986:	e003      	b.n	8004990 <HAL_UART_Receive+0xe4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004996:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	d108      	bne.n	80049b4 <HAL_UART_Receive+0x108>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e003      	b.n	80049bc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049c4:	e033      	b.n	8004a2e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2120      	movs	r1, #32
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fa60 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e032      	b.n	8004a46 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	8a7b      	ldrh	r3, [r7, #18]
 80049f0:	4013      	ands	r3, r2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3302      	adds	r3, #2
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e00d      	b.n	8004a1c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	8a7b      	ldrh	r3, [r7, #18]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4013      	ands	r3, r2
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1c5      	bne.n	80049c6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ca8 <UART_SetConfig+0x258>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	6979      	ldr	r1, [r7, #20]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a79      	ldr	r2, [pc, #484]	; (8004cac <UART_SetConfig+0x25c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d121      	bne.n	8004b10 <UART_SetConfig+0xc0>
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <UART_SetConfig+0x260>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d817      	bhi.n	8004b08 <UART_SetConfig+0xb8>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x90>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004afd 	.word	0x08004afd
 8004ae8:	08004b03 	.word	0x08004b03
 8004aec:	08004af7 	.word	0x08004af7
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e01e      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e01b      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e018      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e015      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	bf00      	nop
 8004b0e:	e011      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a67      	ldr	r2, [pc, #412]	; (8004cb4 <UART_SetConfig+0x264>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d102      	bne.n	8004b20 <UART_SetConfig+0xd0>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e009      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a64      	ldr	r2, [pc, #400]	; (8004cb8 <UART_SetConfig+0x268>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d102      	bne.n	8004b30 <UART_SetConfig+0xe0>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e001      	b.n	8004b34 <UART_SetConfig+0xe4>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	d15c      	bne.n	8004bf8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004b3e:	7ffb      	ldrb	r3, [r7, #31]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d828      	bhi.n	8004b96 <UART_SetConfig+0x146>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0xfc>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b81 	.word	0x08004b81
 8004b58:	08004b97 	.word	0x08004b97
 8004b5c:	08004b87 	.word	0x08004b87
 8004b60:	08004b97 	.word	0x08004b97
 8004b64:	08004b97 	.word	0x08004b97
 8004b68:	08004b97 	.word	0x08004b97
 8004b6c:	08004b8f 	.word	0x08004b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b70:	f7fe fe4a 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8004b74:	61b8      	str	r0, [r7, #24]
        break;
 8004b76:	e013      	b.n	8004ba0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe fe68 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e00f      	b.n	8004ba0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b80:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <UART_SetConfig+0x26c>)
 8004b82:	61bb      	str	r3, [r7, #24]
        break;
 8004b84:	e00c      	b.n	8004ba0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b86:	f7fe fdc9 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004b8a:	61b8      	str	r0, [r7, #24]
        break;
 8004b8c:	e008      	b.n	8004ba0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b92:	61bb      	str	r3, [r7, #24]
        break;
 8004b94:	e004      	b.n	8004ba0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d074      	beq.n	8004c90 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	005a      	lsls	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b0f      	cmp	r3, #15
 8004bc2:	d916      	bls.n	8004bf2 <UART_SetConfig+0x1a2>
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d212      	bcs.n	8004bf2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f023 030f 	bic.w	r3, r3, #15
 8004bd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	89fa      	ldrh	r2, [r7, #14]
 8004bee:	60da      	str	r2, [r3, #12]
 8004bf0:	e04e      	b.n	8004c90 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	77bb      	strb	r3, [r7, #30]
 8004bf6:	e04b      	b.n	8004c90 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d827      	bhi.n	8004c4e <UART_SetConfig+0x1fe>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x1b4>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	08004c4f 	.word	0x08004c4f
 8004c14:	08004c3f 	.word	0x08004c3f
 8004c18:	08004c4f 	.word	0x08004c4f
 8004c1c:	08004c4f 	.word	0x08004c4f
 8004c20:	08004c4f 	.word	0x08004c4f
 8004c24:	08004c47 	.word	0x08004c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe fdee 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e013      	b.n	8004c58 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7fe fe0c 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <UART_SetConfig+0x26c>)
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e00c      	b.n	8004c58 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3e:	f7fe fd6d 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004c42:	61b8      	str	r0, [r7, #24]
        break;
 8004c44:	e008      	b.n	8004c58 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4a:	61bb      	str	r3, [r7, #24]
        break;
 8004c4c:	e004      	b.n	8004c58 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77bb      	strb	r3, [r7, #30]
        break;
 8004c56:	bf00      	nop
    }

    if (pclk != 0U)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d018      	beq.n	8004c90 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085a      	lsrs	r2, r3, #1
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	441a      	add	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	d908      	bls.n	8004c8c <UART_SetConfig+0x23c>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d204      	bcs.n	8004c8c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	e001      	b.n	8004c90 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	efff69f3 	.word	0xefff69f3
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	007a1200 	.word	0x007a1200

08004cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbe:	d10a      	bne.n	8004dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e14:	f7fc fbb0 	bl	8001578 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d10e      	bne.n	8004e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f82d 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e023      	b.n	8004e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d10e      	bne.n	8004e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f817 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e00d      	b.n	8004e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	e05e      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eae:	d05a      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb0:	f7fc fb62 	bl	8001578 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11b      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ed4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e043      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d02c      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1a:	d124      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d091      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_ZdlPvj>:
 8004f8e:	f000 b800 	b.w	8004f92 <_ZdlPv>

08004f92 <_ZdlPv>:
 8004f92:	f000 b82b 	b.w	8004fec <free>
	...

08004f98 <__errno>:
 8004f98:	4b01      	ldr	r3, [pc, #4]	; (8004fa0 <__errno+0x8>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	2000000c 	.word	0x2000000c

08004fa4 <__libc_init_array>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	4e0d      	ldr	r6, [pc, #52]	; (8004fdc <__libc_init_array+0x38>)
 8004fa8:	4c0d      	ldr	r4, [pc, #52]	; (8004fe0 <__libc_init_array+0x3c>)
 8004faa:	1ba4      	subs	r4, r4, r6
 8004fac:	10a4      	asrs	r4, r4, #2
 8004fae:	2500      	movs	r5, #0
 8004fb0:	42a5      	cmp	r5, r4
 8004fb2:	d109      	bne.n	8004fc8 <__libc_init_array+0x24>
 8004fb4:	4e0b      	ldr	r6, [pc, #44]	; (8004fe4 <__libc_init_array+0x40>)
 8004fb6:	4c0c      	ldr	r4, [pc, #48]	; (8004fe8 <__libc_init_array+0x44>)
 8004fb8:	f000 ff0c 	bl	8005dd4 <_init>
 8004fbc:	1ba4      	subs	r4, r4, r6
 8004fbe:	10a4      	asrs	r4, r4, #2
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	42a5      	cmp	r5, r4
 8004fc4:	d105      	bne.n	8004fd2 <__libc_init_array+0x2e>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fcc:	4798      	blx	r3
 8004fce:	3501      	adds	r5, #1
 8004fd0:	e7ee      	b.n	8004fb0 <__libc_init_array+0xc>
 8004fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fd6:	4798      	blx	r3
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7f2      	b.n	8004fc2 <__libc_init_array+0x1e>
 8004fdc:	08005ef4 	.word	0x08005ef4
 8004fe0:	08005ef4 	.word	0x08005ef4
 8004fe4:	08005ef4 	.word	0x08005ef4
 8004fe8:	08005ef8 	.word	0x08005ef8

08004fec <free>:
 8004fec:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <free+0xc>)
 8004fee:	4601      	mov	r1, r0
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f000 b80b 	b.w	800500c <_free_r>
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <memset>:
 8004ffc:	4402      	add	r2, r0
 8004ffe:	4603      	mov	r3, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <_free_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4605      	mov	r5, r0
 8005010:	2900      	cmp	r1, #0
 8005012:	d045      	beq.n	80050a0 <_free_r+0x94>
 8005014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005018:	1f0c      	subs	r4, r1, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	bfb8      	it	lt
 800501e:	18e4      	addlt	r4, r4, r3
 8005020:	f000 f98e 	bl	8005340 <__malloc_lock>
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <_free_r+0x98>)
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	4610      	mov	r0, r2
 800502a:	b933      	cbnz	r3, 800503a <_free_r+0x2e>
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6014      	str	r4, [r2, #0]
 8005030:	4628      	mov	r0, r5
 8005032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005036:	f000 b984 	b.w	8005342 <__malloc_unlock>
 800503a:	42a3      	cmp	r3, r4
 800503c:	d90c      	bls.n	8005058 <_free_r+0x4c>
 800503e:	6821      	ldr	r1, [r4, #0]
 8005040:	1862      	adds	r2, r4, r1
 8005042:	4293      	cmp	r3, r2
 8005044:	bf04      	itt	eq
 8005046:	681a      	ldreq	r2, [r3, #0]
 8005048:	685b      	ldreq	r3, [r3, #4]
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	bf04      	itt	eq
 800504e:	1852      	addeq	r2, r2, r1
 8005050:	6022      	streq	r2, [r4, #0]
 8005052:	6004      	str	r4, [r0, #0]
 8005054:	e7ec      	b.n	8005030 <_free_r+0x24>
 8005056:	4613      	mov	r3, r2
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	b10a      	cbz	r2, 8005060 <_free_r+0x54>
 800505c:	42a2      	cmp	r2, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x4a>
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	1858      	adds	r0, r3, r1
 8005064:	42a0      	cmp	r0, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x74>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4401      	add	r1, r0
 800506c:	1858      	adds	r0, r3, r1
 800506e:	4282      	cmp	r2, r0
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	d1dd      	bne.n	8005030 <_free_r+0x24>
 8005074:	6810      	ldr	r0, [r2, #0]
 8005076:	6852      	ldr	r2, [r2, #4]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	4401      	add	r1, r0
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	e7d7      	b.n	8005030 <_free_r+0x24>
 8005080:	d902      	bls.n	8005088 <_free_r+0x7c>
 8005082:	230c      	movs	r3, #12
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	e7d3      	b.n	8005030 <_free_r+0x24>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	1821      	adds	r1, r4, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	bf04      	itt	eq
 8005090:	6811      	ldreq	r1, [r2, #0]
 8005092:	6852      	ldreq	r2, [r2, #4]
 8005094:	6062      	str	r2, [r4, #4]
 8005096:	bf04      	itt	eq
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	605c      	str	r4, [r3, #4]
 800509e:	e7c7      	b.n	8005030 <_free_r+0x24>
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	200000bc 	.word	0x200000bc

080050a8 <_malloc_r>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	1ccd      	adds	r5, r1, #3
 80050ac:	f025 0503 	bic.w	r5, r5, #3
 80050b0:	3508      	adds	r5, #8
 80050b2:	2d0c      	cmp	r5, #12
 80050b4:	bf38      	it	cc
 80050b6:	250c      	movcc	r5, #12
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	4606      	mov	r6, r0
 80050bc:	db01      	blt.n	80050c2 <_malloc_r+0x1a>
 80050be:	42a9      	cmp	r1, r5
 80050c0:	d903      	bls.n	80050ca <_malloc_r+0x22>
 80050c2:	230c      	movs	r3, #12
 80050c4:	6033      	str	r3, [r6, #0]
 80050c6:	2000      	movs	r0, #0
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	f000 f939 	bl	8005340 <__malloc_lock>
 80050ce:	4a21      	ldr	r2, [pc, #132]	; (8005154 <_malloc_r+0xac>)
 80050d0:	6814      	ldr	r4, [r2, #0]
 80050d2:	4621      	mov	r1, r4
 80050d4:	b991      	cbnz	r1, 80050fc <_malloc_r+0x54>
 80050d6:	4c20      	ldr	r4, [pc, #128]	; (8005158 <_malloc_r+0xb0>)
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	b91b      	cbnz	r3, 80050e4 <_malloc_r+0x3c>
 80050dc:	4630      	mov	r0, r6
 80050de:	f000 f855 	bl	800518c <_sbrk_r>
 80050e2:	6020      	str	r0, [r4, #0]
 80050e4:	4629      	mov	r1, r5
 80050e6:	4630      	mov	r0, r6
 80050e8:	f000 f850 	bl	800518c <_sbrk_r>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d124      	bne.n	800513a <_malloc_r+0x92>
 80050f0:	230c      	movs	r3, #12
 80050f2:	6033      	str	r3, [r6, #0]
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 f924 	bl	8005342 <__malloc_unlock>
 80050fa:	e7e4      	b.n	80050c6 <_malloc_r+0x1e>
 80050fc:	680b      	ldr	r3, [r1, #0]
 80050fe:	1b5b      	subs	r3, r3, r5
 8005100:	d418      	bmi.n	8005134 <_malloc_r+0x8c>
 8005102:	2b0b      	cmp	r3, #11
 8005104:	d90f      	bls.n	8005126 <_malloc_r+0x7e>
 8005106:	600b      	str	r3, [r1, #0]
 8005108:	50cd      	str	r5, [r1, r3]
 800510a:	18cc      	adds	r4, r1, r3
 800510c:	4630      	mov	r0, r6
 800510e:	f000 f918 	bl	8005342 <__malloc_unlock>
 8005112:	f104 000b 	add.w	r0, r4, #11
 8005116:	1d23      	adds	r3, r4, #4
 8005118:	f020 0007 	bic.w	r0, r0, #7
 800511c:	1ac3      	subs	r3, r0, r3
 800511e:	d0d3      	beq.n	80050c8 <_malloc_r+0x20>
 8005120:	425a      	negs	r2, r3
 8005122:	50e2      	str	r2, [r4, r3]
 8005124:	e7d0      	b.n	80050c8 <_malloc_r+0x20>
 8005126:	428c      	cmp	r4, r1
 8005128:	684b      	ldr	r3, [r1, #4]
 800512a:	bf16      	itet	ne
 800512c:	6063      	strne	r3, [r4, #4]
 800512e:	6013      	streq	r3, [r2, #0]
 8005130:	460c      	movne	r4, r1
 8005132:	e7eb      	b.n	800510c <_malloc_r+0x64>
 8005134:	460c      	mov	r4, r1
 8005136:	6849      	ldr	r1, [r1, #4]
 8005138:	e7cc      	b.n	80050d4 <_malloc_r+0x2c>
 800513a:	1cc4      	adds	r4, r0, #3
 800513c:	f024 0403 	bic.w	r4, r4, #3
 8005140:	42a0      	cmp	r0, r4
 8005142:	d005      	beq.n	8005150 <_malloc_r+0xa8>
 8005144:	1a21      	subs	r1, r4, r0
 8005146:	4630      	mov	r0, r6
 8005148:	f000 f820 	bl	800518c <_sbrk_r>
 800514c:	3001      	adds	r0, #1
 800514e:	d0cf      	beq.n	80050f0 <_malloc_r+0x48>
 8005150:	6025      	str	r5, [r4, #0]
 8005152:	e7db      	b.n	800510c <_malloc_r+0x64>
 8005154:	200000bc 	.word	0x200000bc
 8005158:	200000c0 	.word	0x200000c0

0800515c <iprintf>:
 800515c:	b40f      	push	{r0, r1, r2, r3}
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <iprintf+0x2c>)
 8005160:	b513      	push	{r0, r1, r4, lr}
 8005162:	681c      	ldr	r4, [r3, #0]
 8005164:	b124      	cbz	r4, 8005170 <iprintf+0x14>
 8005166:	69a3      	ldr	r3, [r4, #24]
 8005168:	b913      	cbnz	r3, 8005170 <iprintf+0x14>
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f85e 	bl	800522c <__sinit>
 8005170:	ab05      	add	r3, sp, #20
 8005172:	9a04      	ldr	r2, [sp, #16]
 8005174:	68a1      	ldr	r1, [r4, #8]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f90d 	bl	8005398 <_vfiprintf_r>
 800517e:	b002      	add	sp, #8
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	b004      	add	sp, #16
 8005186:	4770      	bx	lr
 8005188:	2000000c 	.word	0x2000000c

0800518c <_sbrk_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4c06      	ldr	r4, [pc, #24]	; (80051a8 <_sbrk_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4605      	mov	r5, r0
 8005194:	4608      	mov	r0, r1
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	f7fb ff4e 	bl	8001038 <_sbrk>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_sbrk_r+0x1a>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_sbrk_r+0x1a>
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	2000020c 	.word	0x2000020c

080051ac <std>:
 80051ac:	2300      	movs	r3, #0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	e9c0 3300 	strd	r3, r3, [r0]
 80051b6:	6083      	str	r3, [r0, #8]
 80051b8:	8181      	strh	r1, [r0, #12]
 80051ba:	6643      	str	r3, [r0, #100]	; 0x64
 80051bc:	81c2      	strh	r2, [r0, #14]
 80051be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051c2:	6183      	str	r3, [r0, #24]
 80051c4:	4619      	mov	r1, r3
 80051c6:	2208      	movs	r2, #8
 80051c8:	305c      	adds	r0, #92	; 0x5c
 80051ca:	f7ff ff17 	bl	8004ffc <memset>
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <std+0x38>)
 80051d0:	6263      	str	r3, [r4, #36]	; 0x24
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <std+0x3c>)
 80051d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <std+0x40>)
 80051d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <std+0x44>)
 80051dc:	6224      	str	r4, [r4, #32]
 80051de:	6323      	str	r3, [r4, #48]	; 0x30
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	bf00      	nop
 80051e4:	080058d5 	.word	0x080058d5
 80051e8:	080058f7 	.word	0x080058f7
 80051ec:	0800592f 	.word	0x0800592f
 80051f0:	08005953 	.word	0x08005953

080051f4 <_cleanup_r>:
 80051f4:	4901      	ldr	r1, [pc, #4]	; (80051fc <_cleanup_r+0x8>)
 80051f6:	f000 b885 	b.w	8005304 <_fwalk_reent>
 80051fa:	bf00      	nop
 80051fc:	08005c2d 	.word	0x08005c2d

08005200 <__sfmoreglue>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	1e4a      	subs	r2, r1, #1
 8005204:	2568      	movs	r5, #104	; 0x68
 8005206:	4355      	muls	r5, r2
 8005208:	460e      	mov	r6, r1
 800520a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800520e:	f7ff ff4b 	bl	80050a8 <_malloc_r>
 8005212:	4604      	mov	r4, r0
 8005214:	b140      	cbz	r0, 8005228 <__sfmoreglue+0x28>
 8005216:	2100      	movs	r1, #0
 8005218:	e9c0 1600 	strd	r1, r6, [r0]
 800521c:	300c      	adds	r0, #12
 800521e:	60a0      	str	r0, [r4, #8]
 8005220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005224:	f7ff feea 	bl	8004ffc <memset>
 8005228:	4620      	mov	r0, r4
 800522a:	bd70      	pop	{r4, r5, r6, pc}

0800522c <__sinit>:
 800522c:	6983      	ldr	r3, [r0, #24]
 800522e:	b510      	push	{r4, lr}
 8005230:	4604      	mov	r4, r0
 8005232:	bb33      	cbnz	r3, 8005282 <__sinit+0x56>
 8005234:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005238:	6503      	str	r3, [r0, #80]	; 0x50
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <__sinit+0x58>)
 800523c:	4a12      	ldr	r2, [pc, #72]	; (8005288 <__sinit+0x5c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6282      	str	r2, [r0, #40]	; 0x28
 8005242:	4298      	cmp	r0, r3
 8005244:	bf04      	itt	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	6183      	streq	r3, [r0, #24]
 800524a:	f000 f81f 	bl	800528c <__sfp>
 800524e:	6060      	str	r0, [r4, #4]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 f81b 	bl	800528c <__sfp>
 8005256:	60a0      	str	r0, [r4, #8]
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f817 	bl	800528c <__sfp>
 800525e:	2200      	movs	r2, #0
 8005260:	60e0      	str	r0, [r4, #12]
 8005262:	2104      	movs	r1, #4
 8005264:	6860      	ldr	r0, [r4, #4]
 8005266:	f7ff ffa1 	bl	80051ac <std>
 800526a:	2201      	movs	r2, #1
 800526c:	2109      	movs	r1, #9
 800526e:	68a0      	ldr	r0, [r4, #8]
 8005270:	f7ff ff9c 	bl	80051ac <std>
 8005274:	2202      	movs	r2, #2
 8005276:	2112      	movs	r1, #18
 8005278:	68e0      	ldr	r0, [r4, #12]
 800527a:	f7ff ff97 	bl	80051ac <std>
 800527e:	2301      	movs	r3, #1
 8005280:	61a3      	str	r3, [r4, #24]
 8005282:	bd10      	pop	{r4, pc}
 8005284:	08005e5c 	.word	0x08005e5c
 8005288:	080051f5 	.word	0x080051f5

0800528c <__sfp>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <__sfp+0x70>)
 8005290:	681e      	ldr	r6, [r3, #0]
 8005292:	69b3      	ldr	r3, [r6, #24]
 8005294:	4607      	mov	r7, r0
 8005296:	b913      	cbnz	r3, 800529e <__sfp+0x12>
 8005298:	4630      	mov	r0, r6
 800529a:	f7ff ffc7 	bl	800522c <__sinit>
 800529e:	3648      	adds	r6, #72	; 0x48
 80052a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	d503      	bpl.n	80052b0 <__sfp+0x24>
 80052a8:	6833      	ldr	r3, [r6, #0]
 80052aa:	b133      	cbz	r3, 80052ba <__sfp+0x2e>
 80052ac:	6836      	ldr	r6, [r6, #0]
 80052ae:	e7f7      	b.n	80052a0 <__sfp+0x14>
 80052b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052b4:	b16d      	cbz	r5, 80052d2 <__sfp+0x46>
 80052b6:	3468      	adds	r4, #104	; 0x68
 80052b8:	e7f4      	b.n	80052a4 <__sfp+0x18>
 80052ba:	2104      	movs	r1, #4
 80052bc:	4638      	mov	r0, r7
 80052be:	f7ff ff9f 	bl	8005200 <__sfmoreglue>
 80052c2:	6030      	str	r0, [r6, #0]
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d1f1      	bne.n	80052ac <__sfp+0x20>
 80052c8:	230c      	movs	r3, #12
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4604      	mov	r4, r0
 80052ce:	4620      	mov	r0, r4
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <__sfp+0x74>)
 80052d4:	6665      	str	r5, [r4, #100]	; 0x64
 80052d6:	e9c4 5500 	strd	r5, r5, [r4]
 80052da:	60a5      	str	r5, [r4, #8]
 80052dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80052e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80052e4:	2208      	movs	r2, #8
 80052e6:	4629      	mov	r1, r5
 80052e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052ec:	f7ff fe86 	bl	8004ffc <memset>
 80052f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f8:	e7e9      	b.n	80052ce <__sfp+0x42>
 80052fa:	bf00      	nop
 80052fc:	08005e5c 	.word	0x08005e5c
 8005300:	ffff0001 	.word	0xffff0001

08005304 <_fwalk_reent>:
 8005304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005308:	4680      	mov	r8, r0
 800530a:	4689      	mov	r9, r1
 800530c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005310:	2600      	movs	r6, #0
 8005312:	b914      	cbnz	r4, 800531a <_fwalk_reent+0x16>
 8005314:	4630      	mov	r0, r6
 8005316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800531e:	3f01      	subs	r7, #1
 8005320:	d501      	bpl.n	8005326 <_fwalk_reent+0x22>
 8005322:	6824      	ldr	r4, [r4, #0]
 8005324:	e7f5      	b.n	8005312 <_fwalk_reent+0xe>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d907      	bls.n	800533c <_fwalk_reent+0x38>
 800532c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005330:	3301      	adds	r3, #1
 8005332:	d003      	beq.n	800533c <_fwalk_reent+0x38>
 8005334:	4629      	mov	r1, r5
 8005336:	4640      	mov	r0, r8
 8005338:	47c8      	blx	r9
 800533a:	4306      	orrs	r6, r0
 800533c:	3568      	adds	r5, #104	; 0x68
 800533e:	e7ee      	b.n	800531e <_fwalk_reent+0x1a>

08005340 <__malloc_lock>:
 8005340:	4770      	bx	lr

08005342 <__malloc_unlock>:
 8005342:	4770      	bx	lr

08005344 <__sfputc_r>:
 8005344:	6893      	ldr	r3, [r2, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	b410      	push	{r4}
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	da08      	bge.n	8005362 <__sfputc_r+0x1e>
 8005350:	6994      	ldr	r4, [r2, #24]
 8005352:	42a3      	cmp	r3, r4
 8005354:	db01      	blt.n	800535a <__sfputc_r+0x16>
 8005356:	290a      	cmp	r1, #10
 8005358:	d103      	bne.n	8005362 <__sfputc_r+0x1e>
 800535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535e:	f000 bafd 	b.w	800595c <__swbuf_r>
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	1c58      	adds	r0, r3, #1
 8005366:	6010      	str	r0, [r2, #0]
 8005368:	7019      	strb	r1, [r3, #0]
 800536a:	4608      	mov	r0, r1
 800536c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005370:	4770      	bx	lr

08005372 <__sfputs_r>:
 8005372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	4614      	mov	r4, r2
 800537a:	18d5      	adds	r5, r2, r3
 800537c:	42ac      	cmp	r4, r5
 800537e:	d101      	bne.n	8005384 <__sfputs_r+0x12>
 8005380:	2000      	movs	r0, #0
 8005382:	e007      	b.n	8005394 <__sfputs_r+0x22>
 8005384:	463a      	mov	r2, r7
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	4630      	mov	r0, r6
 800538c:	f7ff ffda 	bl	8005344 <__sfputc_r>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d1f3      	bne.n	800537c <__sfputs_r+0xa>
 8005394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005398 <_vfiprintf_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	460c      	mov	r4, r1
 800539e:	b09d      	sub	sp, #116	; 0x74
 80053a0:	4617      	mov	r7, r2
 80053a2:	461d      	mov	r5, r3
 80053a4:	4606      	mov	r6, r0
 80053a6:	b118      	cbz	r0, 80053b0 <_vfiprintf_r+0x18>
 80053a8:	6983      	ldr	r3, [r0, #24]
 80053aa:	b90b      	cbnz	r3, 80053b0 <_vfiprintf_r+0x18>
 80053ac:	f7ff ff3e 	bl	800522c <__sinit>
 80053b0:	4b7c      	ldr	r3, [pc, #496]	; (80055a4 <_vfiprintf_r+0x20c>)
 80053b2:	429c      	cmp	r4, r3
 80053b4:	d158      	bne.n	8005468 <_vfiprintf_r+0xd0>
 80053b6:	6874      	ldr	r4, [r6, #4]
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	0718      	lsls	r0, r3, #28
 80053bc:	d55e      	bpl.n	800547c <_vfiprintf_r+0xe4>
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05b      	beq.n	800547c <_vfiprintf_r+0xe4>
 80053c4:	2300      	movs	r3, #0
 80053c6:	9309      	str	r3, [sp, #36]	; 0x24
 80053c8:	2320      	movs	r3, #32
 80053ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ce:	2330      	movs	r3, #48	; 0x30
 80053d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053d4:	9503      	str	r5, [sp, #12]
 80053d6:	f04f 0b01 	mov.w	fp, #1
 80053da:	46b8      	mov	r8, r7
 80053dc:	4645      	mov	r5, r8
 80053de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053e2:	b10b      	cbz	r3, 80053e8 <_vfiprintf_r+0x50>
 80053e4:	2b25      	cmp	r3, #37	; 0x25
 80053e6:	d154      	bne.n	8005492 <_vfiprintf_r+0xfa>
 80053e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80053ec:	d00b      	beq.n	8005406 <_vfiprintf_r+0x6e>
 80053ee:	4653      	mov	r3, sl
 80053f0:	463a      	mov	r2, r7
 80053f2:	4621      	mov	r1, r4
 80053f4:	4630      	mov	r0, r6
 80053f6:	f7ff ffbc 	bl	8005372 <__sfputs_r>
 80053fa:	3001      	adds	r0, #1
 80053fc:	f000 80c2 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	4453      	add	r3, sl
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
 8005406:	f898 3000 	ldrb.w	r3, [r8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80ba 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005410:	2300      	movs	r3, #0
 8005412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	9307      	str	r3, [sp, #28]
 800541e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005422:	931a      	str	r3, [sp, #104]	; 0x68
 8005424:	46a8      	mov	r8, r5
 8005426:	2205      	movs	r2, #5
 8005428:	f818 1b01 	ldrb.w	r1, [r8], #1
 800542c:	485e      	ldr	r0, [pc, #376]	; (80055a8 <_vfiprintf_r+0x210>)
 800542e:	f7fa fecf 	bl	80001d0 <memchr>
 8005432:	9b04      	ldr	r3, [sp, #16]
 8005434:	bb78      	cbnz	r0, 8005496 <_vfiprintf_r+0xfe>
 8005436:	06d9      	lsls	r1, r3, #27
 8005438:	bf44      	itt	mi
 800543a:	2220      	movmi	r2, #32
 800543c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005440:	071a      	lsls	r2, r3, #28
 8005442:	bf44      	itt	mi
 8005444:	222b      	movmi	r2, #43	; 0x2b
 8005446:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800544a:	782a      	ldrb	r2, [r5, #0]
 800544c:	2a2a      	cmp	r2, #42	; 0x2a
 800544e:	d02a      	beq.n	80054a6 <_vfiprintf_r+0x10e>
 8005450:	9a07      	ldr	r2, [sp, #28]
 8005452:	46a8      	mov	r8, r5
 8005454:	2000      	movs	r0, #0
 8005456:	250a      	movs	r5, #10
 8005458:	4641      	mov	r1, r8
 800545a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545e:	3b30      	subs	r3, #48	; 0x30
 8005460:	2b09      	cmp	r3, #9
 8005462:	d969      	bls.n	8005538 <_vfiprintf_r+0x1a0>
 8005464:	b360      	cbz	r0, 80054c0 <_vfiprintf_r+0x128>
 8005466:	e024      	b.n	80054b2 <_vfiprintf_r+0x11a>
 8005468:	4b50      	ldr	r3, [pc, #320]	; (80055ac <_vfiprintf_r+0x214>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <_vfiprintf_r+0xda>
 800546e:	68b4      	ldr	r4, [r6, #8]
 8005470:	e7a2      	b.n	80053b8 <_vfiprintf_r+0x20>
 8005472:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <_vfiprintf_r+0x218>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68f4      	ldreq	r4, [r6, #12]
 800547a:	e79d      	b.n	80053b8 <_vfiprintf_r+0x20>
 800547c:	4621      	mov	r1, r4
 800547e:	4630      	mov	r0, r6
 8005480:	f000 fad0 	bl	8005a24 <__swsetup_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	d09d      	beq.n	80053c4 <_vfiprintf_r+0x2c>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800548c:	b01d      	add	sp, #116	; 0x74
 800548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	46a8      	mov	r8, r5
 8005494:	e7a2      	b.n	80053dc <_vfiprintf_r+0x44>
 8005496:	4a44      	ldr	r2, [pc, #272]	; (80055a8 <_vfiprintf_r+0x210>)
 8005498:	1a80      	subs	r0, r0, r2
 800549a:	fa0b f000 	lsl.w	r0, fp, r0
 800549e:	4318      	orrs	r0, r3
 80054a0:	9004      	str	r0, [sp, #16]
 80054a2:	4645      	mov	r5, r8
 80054a4:	e7be      	b.n	8005424 <_vfiprintf_r+0x8c>
 80054a6:	9a03      	ldr	r2, [sp, #12]
 80054a8:	1d11      	adds	r1, r2, #4
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	9103      	str	r1, [sp, #12]
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	db01      	blt.n	80054b6 <_vfiprintf_r+0x11e>
 80054b2:	9207      	str	r2, [sp, #28]
 80054b4:	e004      	b.n	80054c0 <_vfiprintf_r+0x128>
 80054b6:	4252      	negs	r2, r2
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	f898 3000 	ldrb.w	r3, [r8]
 80054c4:	2b2e      	cmp	r3, #46	; 0x2e
 80054c6:	d10e      	bne.n	80054e6 <_vfiprintf_r+0x14e>
 80054c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054cc:	2b2a      	cmp	r3, #42	; 0x2a
 80054ce:	d138      	bne.n	8005542 <_vfiprintf_r+0x1aa>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9203      	str	r2, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfb8      	it	lt
 80054dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054e0:	f108 0802 	add.w	r8, r8, #2
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	4d33      	ldr	r5, [pc, #204]	; (80055b4 <_vfiprintf_r+0x21c>)
 80054e8:	f898 1000 	ldrb.w	r1, [r8]
 80054ec:	2203      	movs	r2, #3
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7fa fe6e 	bl	80001d0 <memchr>
 80054f4:	b140      	cbz	r0, 8005508 <_vfiprintf_r+0x170>
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	1b40      	subs	r0, r0, r5
 80054fa:	fa03 f000 	lsl.w	r0, r3, r0
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	4303      	orrs	r3, r0
 8005502:	f108 0801 	add.w	r8, r8, #1
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	f898 1000 	ldrb.w	r1, [r8]
 800550c:	482a      	ldr	r0, [pc, #168]	; (80055b8 <_vfiprintf_r+0x220>)
 800550e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005512:	2206      	movs	r2, #6
 8005514:	f108 0701 	add.w	r7, r8, #1
 8005518:	f7fa fe5a 	bl	80001d0 <memchr>
 800551c:	2800      	cmp	r0, #0
 800551e:	d037      	beq.n	8005590 <_vfiprintf_r+0x1f8>
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <_vfiprintf_r+0x224>)
 8005522:	bb1b      	cbnz	r3, 800556c <_vfiprintf_r+0x1d4>
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	3307      	adds	r3, #7
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	3308      	adds	r3, #8
 800552e:	9303      	str	r3, [sp, #12]
 8005530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005532:	444b      	add	r3, r9
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	e750      	b.n	80053da <_vfiprintf_r+0x42>
 8005538:	fb05 3202 	mla	r2, r5, r2, r3
 800553c:	2001      	movs	r0, #1
 800553e:	4688      	mov	r8, r1
 8005540:	e78a      	b.n	8005458 <_vfiprintf_r+0xc0>
 8005542:	2300      	movs	r3, #0
 8005544:	f108 0801 	add.w	r8, r8, #1
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	4619      	mov	r1, r3
 800554c:	250a      	movs	r5, #10
 800554e:	4640      	mov	r0, r8
 8005550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005554:	3a30      	subs	r2, #48	; 0x30
 8005556:	2a09      	cmp	r2, #9
 8005558:	d903      	bls.n	8005562 <_vfiprintf_r+0x1ca>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0c3      	beq.n	80054e6 <_vfiprintf_r+0x14e>
 800555e:	9105      	str	r1, [sp, #20]
 8005560:	e7c1      	b.n	80054e6 <_vfiprintf_r+0x14e>
 8005562:	fb05 2101 	mla	r1, r5, r1, r2
 8005566:	2301      	movs	r3, #1
 8005568:	4680      	mov	r8, r0
 800556a:	e7f0      	b.n	800554e <_vfiprintf_r+0x1b6>
 800556c:	ab03      	add	r3, sp, #12
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4622      	mov	r2, r4
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <_vfiprintf_r+0x228>)
 8005574:	a904      	add	r1, sp, #16
 8005576:	4630      	mov	r0, r6
 8005578:	f3af 8000 	nop.w
 800557c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005580:	4681      	mov	r9, r0
 8005582:	d1d5      	bne.n	8005530 <_vfiprintf_r+0x198>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	065b      	lsls	r3, r3, #25
 8005588:	f53f af7e 	bmi.w	8005488 <_vfiprintf_r+0xf0>
 800558c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800558e:	e77d      	b.n	800548c <_vfiprintf_r+0xf4>
 8005590:	ab03      	add	r3, sp, #12
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	4622      	mov	r2, r4
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <_vfiprintf_r+0x228>)
 8005598:	a904      	add	r1, sp, #16
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f888 	bl	80056b0 <_printf_i>
 80055a0:	e7ec      	b.n	800557c <_vfiprintf_r+0x1e4>
 80055a2:	bf00      	nop
 80055a4:	08005e80 	.word	0x08005e80
 80055a8:	08005ec0 	.word	0x08005ec0
 80055ac:	08005ea0 	.word	0x08005ea0
 80055b0:	08005e60 	.word	0x08005e60
 80055b4:	08005ec6 	.word	0x08005ec6
 80055b8:	08005eca 	.word	0x08005eca
 80055bc:	00000000 	.word	0x00000000
 80055c0:	08005373 	.word	0x08005373

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4691      	mov	r9, r2
 80055ca:	461f      	mov	r7, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	f8c9 3000 	str.w	r3, [r9]
 80055de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e2:	4606      	mov	r6, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	b112      	cbz	r2, 80055ee <_printf_common+0x2a>
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c9 3000 	str.w	r3, [r9]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80055f8:	3302      	addmi	r3, #2
 80055fa:	f8c9 3000 	strmi.w	r3, [r9]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d107      	bne.n	8005616 <_printf_common+0x52>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	f8d9 2000 	ldr.w	r2, [r9]
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	42ab      	cmp	r3, r5
 8005614:	dc28      	bgt.n	8005668 <_printf_common+0xa4>
 8005616:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	3300      	adds	r3, #0
 800561e:	bf18      	it	ne
 8005620:	2301      	movne	r3, #1
 8005622:	0692      	lsls	r2, r2, #26
 8005624:	d42d      	bmi.n	8005682 <_printf_common+0xbe>
 8005626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562a:	4639      	mov	r1, r7
 800562c:	4630      	mov	r0, r6
 800562e:	47c0      	blx	r8
 8005630:	3001      	adds	r0, #1
 8005632:	d020      	beq.n	8005676 <_printf_common+0xb2>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	68e5      	ldr	r5, [r4, #12]
 8005638:	f8d9 2000 	ldr.w	r2, [r9]
 800563c:	f003 0306 	and.w	r3, r3, #6
 8005640:	2b04      	cmp	r3, #4
 8005642:	bf08      	it	eq
 8005644:	1aad      	subeq	r5, r5, r2
 8005646:	68a3      	ldr	r3, [r4, #8]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	bf0c      	ite	eq
 800564c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005650:	2500      	movne	r5, #0
 8005652:	4293      	cmp	r3, r2
 8005654:	bfc4      	itt	gt
 8005656:	1a9b      	subgt	r3, r3, r2
 8005658:	18ed      	addgt	r5, r5, r3
 800565a:	f04f 0900 	mov.w	r9, #0
 800565e:	341a      	adds	r4, #26
 8005660:	454d      	cmp	r5, r9
 8005662:	d11a      	bne.n	800569a <_printf_common+0xd6>
 8005664:	2000      	movs	r0, #0
 8005666:	e008      	b.n	800567a <_printf_common+0xb6>
 8005668:	2301      	movs	r3, #1
 800566a:	4652      	mov	r2, sl
 800566c:	4639      	mov	r1, r7
 800566e:	4630      	mov	r0, r6
 8005670:	47c0      	blx	r8
 8005672:	3001      	adds	r0, #1
 8005674:	d103      	bne.n	800567e <_printf_common+0xba>
 8005676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	3501      	adds	r5, #1
 8005680:	e7c3      	b.n	800560a <_printf_common+0x46>
 8005682:	18e1      	adds	r1, r4, r3
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	2030      	movs	r0, #48	; 0x30
 8005688:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800568c:	4422      	add	r2, r4
 800568e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005692:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005696:	3302      	adds	r3, #2
 8005698:	e7c5      	b.n	8005626 <_printf_common+0x62>
 800569a:	2301      	movs	r3, #1
 800569c:	4622      	mov	r2, r4
 800569e:	4639      	mov	r1, r7
 80056a0:	4630      	mov	r0, r6
 80056a2:	47c0      	blx	r8
 80056a4:	3001      	adds	r0, #1
 80056a6:	d0e6      	beq.n	8005676 <_printf_common+0xb2>
 80056a8:	f109 0901 	add.w	r9, r9, #1
 80056ac:	e7d8      	b.n	8005660 <_printf_common+0x9c>
	...

080056b0 <_printf_i>:
 80056b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056b8:	460c      	mov	r4, r1
 80056ba:	7e09      	ldrb	r1, [r1, #24]
 80056bc:	b085      	sub	sp, #20
 80056be:	296e      	cmp	r1, #110	; 0x6e
 80056c0:	4617      	mov	r7, r2
 80056c2:	4606      	mov	r6, r0
 80056c4:	4698      	mov	r8, r3
 80056c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056c8:	f000 80b3 	beq.w	8005832 <_printf_i+0x182>
 80056cc:	d822      	bhi.n	8005714 <_printf_i+0x64>
 80056ce:	2963      	cmp	r1, #99	; 0x63
 80056d0:	d036      	beq.n	8005740 <_printf_i+0x90>
 80056d2:	d80a      	bhi.n	80056ea <_printf_i+0x3a>
 80056d4:	2900      	cmp	r1, #0
 80056d6:	f000 80b9 	beq.w	800584c <_printf_i+0x19c>
 80056da:	2958      	cmp	r1, #88	; 0x58
 80056dc:	f000 8083 	beq.w	80057e6 <_printf_i+0x136>
 80056e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056e8:	e032      	b.n	8005750 <_printf_i+0xa0>
 80056ea:	2964      	cmp	r1, #100	; 0x64
 80056ec:	d001      	beq.n	80056f2 <_printf_i+0x42>
 80056ee:	2969      	cmp	r1, #105	; 0x69
 80056f0:	d1f6      	bne.n	80056e0 <_printf_i+0x30>
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	6813      	ldr	r3, [r2, #0]
 80056f6:	0605      	lsls	r5, r0, #24
 80056f8:	f103 0104 	add.w	r1, r3, #4
 80056fc:	d52a      	bpl.n	8005754 <_printf_i+0xa4>
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da03      	bge.n	800570e <_printf_i+0x5e>
 8005706:	222d      	movs	r2, #45	; 0x2d
 8005708:	425b      	negs	r3, r3
 800570a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800570e:	486f      	ldr	r0, [pc, #444]	; (80058cc <_printf_i+0x21c>)
 8005710:	220a      	movs	r2, #10
 8005712:	e039      	b.n	8005788 <_printf_i+0xd8>
 8005714:	2973      	cmp	r1, #115	; 0x73
 8005716:	f000 809d 	beq.w	8005854 <_printf_i+0x1a4>
 800571a:	d808      	bhi.n	800572e <_printf_i+0x7e>
 800571c:	296f      	cmp	r1, #111	; 0x6f
 800571e:	d020      	beq.n	8005762 <_printf_i+0xb2>
 8005720:	2970      	cmp	r1, #112	; 0x70
 8005722:	d1dd      	bne.n	80056e0 <_printf_i+0x30>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	f043 0320 	orr.w	r3, r3, #32
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	e003      	b.n	8005736 <_printf_i+0x86>
 800572e:	2975      	cmp	r1, #117	; 0x75
 8005730:	d017      	beq.n	8005762 <_printf_i+0xb2>
 8005732:	2978      	cmp	r1, #120	; 0x78
 8005734:	d1d4      	bne.n	80056e0 <_printf_i+0x30>
 8005736:	2378      	movs	r3, #120	; 0x78
 8005738:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800573c:	4864      	ldr	r0, [pc, #400]	; (80058d0 <_printf_i+0x220>)
 800573e:	e055      	b.n	80057ec <_printf_i+0x13c>
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	1d19      	adds	r1, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6011      	str	r1, [r2, #0]
 8005748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800574c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005750:	2301      	movs	r3, #1
 8005752:	e08c      	b.n	800586e <_printf_i+0x1be>
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6011      	str	r1, [r2, #0]
 8005758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800575c:	bf18      	it	ne
 800575e:	b21b      	sxthne	r3, r3
 8005760:	e7cf      	b.n	8005702 <_printf_i+0x52>
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	1d18      	adds	r0, r3, #4
 8005768:	6010      	str	r0, [r2, #0]
 800576a:	0628      	lsls	r0, r5, #24
 800576c:	d501      	bpl.n	8005772 <_printf_i+0xc2>
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	e002      	b.n	8005778 <_printf_i+0xc8>
 8005772:	0668      	lsls	r0, r5, #25
 8005774:	d5fb      	bpl.n	800576e <_printf_i+0xbe>
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	4854      	ldr	r0, [pc, #336]	; (80058cc <_printf_i+0x21c>)
 800577a:	296f      	cmp	r1, #111	; 0x6f
 800577c:	bf14      	ite	ne
 800577e:	220a      	movne	r2, #10
 8005780:	2208      	moveq	r2, #8
 8005782:	2100      	movs	r1, #0
 8005784:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005788:	6865      	ldr	r5, [r4, #4]
 800578a:	60a5      	str	r5, [r4, #8]
 800578c:	2d00      	cmp	r5, #0
 800578e:	f2c0 8095 	blt.w	80058bc <_printf_i+0x20c>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	f021 0104 	bic.w	r1, r1, #4
 8005798:	6021      	str	r1, [r4, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <_printf_i+0x16a>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	f040 808e 	bne.w	80058c0 <_printf_i+0x210>
 80057a4:	4665      	mov	r5, ip
 80057a6:	2a08      	cmp	r2, #8
 80057a8:	d10b      	bne.n	80057c2 <_printf_i+0x112>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	07db      	lsls	r3, r3, #31
 80057ae:	d508      	bpl.n	80057c2 <_printf_i+0x112>
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	6862      	ldr	r2, [r4, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	bfde      	ittt	le
 80057b8:	2330      	movle	r3, #48	; 0x30
 80057ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057c2:	ebac 0305 	sub.w	r3, ip, r5
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	f8cd 8000 	str.w	r8, [sp]
 80057cc:	463b      	mov	r3, r7
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	4621      	mov	r1, r4
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff fef6 	bl	80055c4 <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	d14d      	bne.n	8005878 <_printf_i+0x1c8>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e0:	b005      	add	sp, #20
 80057e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057e6:	4839      	ldr	r0, [pc, #228]	; (80058cc <_printf_i+0x21c>)
 80057e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	1d1d      	adds	r5, r3, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6015      	str	r5, [r2, #0]
 80057f6:	060a      	lsls	r2, r1, #24
 80057f8:	d50b      	bpl.n	8005812 <_printf_i+0x162>
 80057fa:	07ca      	lsls	r2, r1, #31
 80057fc:	bf44      	itt	mi
 80057fe:	f041 0120 	orrmi.w	r1, r1, #32
 8005802:	6021      	strmi	r1, [r4, #0]
 8005804:	b91b      	cbnz	r3, 800580e <_printf_i+0x15e>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	f022 0220 	bic.w	r2, r2, #32
 800580c:	6022      	str	r2, [r4, #0]
 800580e:	2210      	movs	r2, #16
 8005810:	e7b7      	b.n	8005782 <_printf_i+0xd2>
 8005812:	064d      	lsls	r5, r1, #25
 8005814:	bf48      	it	mi
 8005816:	b29b      	uxthmi	r3, r3
 8005818:	e7ef      	b.n	80057fa <_printf_i+0x14a>
 800581a:	4665      	mov	r5, ip
 800581c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005820:	fb02 3311 	mls	r3, r2, r1, r3
 8005824:	5cc3      	ldrb	r3, [r0, r3]
 8005826:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800582a:	460b      	mov	r3, r1
 800582c:	2900      	cmp	r1, #0
 800582e:	d1f5      	bne.n	800581c <_printf_i+0x16c>
 8005830:	e7b9      	b.n	80057a6 <_printf_i+0xf6>
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	6825      	ldr	r5, [r4, #0]
 8005836:	6961      	ldr	r1, [r4, #20]
 8005838:	1d18      	adds	r0, r3, #4
 800583a:	6010      	str	r0, [r2, #0]
 800583c:	0628      	lsls	r0, r5, #24
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	d501      	bpl.n	8005846 <_printf_i+0x196>
 8005842:	6019      	str	r1, [r3, #0]
 8005844:	e002      	b.n	800584c <_printf_i+0x19c>
 8005846:	066a      	lsls	r2, r5, #25
 8005848:	d5fb      	bpl.n	8005842 <_printf_i+0x192>
 800584a:	8019      	strh	r1, [r3, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	4665      	mov	r5, ip
 8005852:	e7b9      	b.n	80057c8 <_printf_i+0x118>
 8005854:	6813      	ldr	r3, [r2, #0]
 8005856:	1d19      	adds	r1, r3, #4
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	681d      	ldr	r5, [r3, #0]
 800585c:	6862      	ldr	r2, [r4, #4]
 800585e:	2100      	movs	r1, #0
 8005860:	4628      	mov	r0, r5
 8005862:	f7fa fcb5 	bl	80001d0 <memchr>
 8005866:	b108      	cbz	r0, 800586c <_printf_i+0x1bc>
 8005868:	1b40      	subs	r0, r0, r5
 800586a:	6060      	str	r0, [r4, #4]
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	2300      	movs	r3, #0
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005876:	e7a7      	b.n	80057c8 <_printf_i+0x118>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	462a      	mov	r2, r5
 800587c:	4639      	mov	r1, r7
 800587e:	4630      	mov	r0, r6
 8005880:	47c0      	blx	r8
 8005882:	3001      	adds	r0, #1
 8005884:	d0aa      	beq.n	80057dc <_printf_i+0x12c>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	079b      	lsls	r3, r3, #30
 800588a:	d413      	bmi.n	80058b4 <_printf_i+0x204>
 800588c:	68e0      	ldr	r0, [r4, #12]
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	4298      	cmp	r0, r3
 8005892:	bfb8      	it	lt
 8005894:	4618      	movlt	r0, r3
 8005896:	e7a3      	b.n	80057e0 <_printf_i+0x130>
 8005898:	2301      	movs	r3, #1
 800589a:	464a      	mov	r2, r9
 800589c:	4639      	mov	r1, r7
 800589e:	4630      	mov	r0, r6
 80058a0:	47c0      	blx	r8
 80058a2:	3001      	adds	r0, #1
 80058a4:	d09a      	beq.n	80057dc <_printf_i+0x12c>
 80058a6:	3501      	adds	r5, #1
 80058a8:	68e3      	ldr	r3, [r4, #12]
 80058aa:	9a03      	ldr	r2, [sp, #12]
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	42ab      	cmp	r3, r5
 80058b0:	dcf2      	bgt.n	8005898 <_printf_i+0x1e8>
 80058b2:	e7eb      	b.n	800588c <_printf_i+0x1dc>
 80058b4:	2500      	movs	r5, #0
 80058b6:	f104 0919 	add.w	r9, r4, #25
 80058ba:	e7f5      	b.n	80058a8 <_printf_i+0x1f8>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ac      	bne.n	800581a <_printf_i+0x16a>
 80058c0:	7803      	ldrb	r3, [r0, #0]
 80058c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ca:	e76c      	b.n	80057a6 <_printf_i+0xf6>
 80058cc:	08005ed1 	.word	0x08005ed1
 80058d0:	08005ee2 	.word	0x08005ee2

080058d4 <__sread>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	460c      	mov	r4, r1
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	f000 fa46 	bl	8005d6c <_read_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	bfab      	itete	ge
 80058e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058e6:	89a3      	ldrhlt	r3, [r4, #12]
 80058e8:	181b      	addge	r3, r3, r0
 80058ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ee:	bfac      	ite	ge
 80058f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058f2:	81a3      	strhlt	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__swrite>:
 80058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	461f      	mov	r7, r3
 80058fc:	898b      	ldrh	r3, [r1, #12]
 80058fe:	05db      	lsls	r3, r3, #23
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	4616      	mov	r6, r2
 8005906:	d505      	bpl.n	8005914 <__swrite+0x1e>
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	f000 f9b6 	bl	8005c80 <_lseek_r>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800591a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	4632      	mov	r2, r6
 8005922:	463b      	mov	r3, r7
 8005924:	4628      	mov	r0, r5
 8005926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	f000 b869 	b.w	8005a00 <_write_r>

0800592e <__sseek>:
 800592e:	b510      	push	{r4, lr}
 8005930:	460c      	mov	r4, r1
 8005932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005936:	f000 f9a3 	bl	8005c80 <_lseek_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	bf15      	itete	ne
 8005940:	6560      	strne	r0, [r4, #84]	; 0x54
 8005942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800594a:	81a3      	strheq	r3, [r4, #12]
 800594c:	bf18      	it	ne
 800594e:	81a3      	strhne	r3, [r4, #12]
 8005950:	bd10      	pop	{r4, pc}

08005952 <__sclose>:
 8005952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005956:	f000 b8d3 	b.w	8005b00 <_close_r>
	...

0800595c <__swbuf_r>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	460e      	mov	r6, r1
 8005960:	4614      	mov	r4, r2
 8005962:	4605      	mov	r5, r0
 8005964:	b118      	cbz	r0, 800596e <__swbuf_r+0x12>
 8005966:	6983      	ldr	r3, [r0, #24]
 8005968:	b90b      	cbnz	r3, 800596e <__swbuf_r+0x12>
 800596a:	f7ff fc5f 	bl	800522c <__sinit>
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <__swbuf_r+0x98>)
 8005970:	429c      	cmp	r4, r3
 8005972:	d12a      	bne.n	80059ca <__swbuf_r+0x6e>
 8005974:	686c      	ldr	r4, [r5, #4]
 8005976:	69a3      	ldr	r3, [r4, #24]
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	071a      	lsls	r2, r3, #28
 800597e:	d52e      	bpl.n	80059de <__swbuf_r+0x82>
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	b363      	cbz	r3, 80059de <__swbuf_r+0x82>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	6963      	ldr	r3, [r4, #20]
 800598c:	b2f6      	uxtb	r6, r6
 800598e:	4283      	cmp	r3, r0
 8005990:	4637      	mov	r7, r6
 8005992:	dc04      	bgt.n	800599e <__swbuf_r+0x42>
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f948 	bl	8005c2c <_fflush_r>
 800599c:	bb28      	cbnz	r0, 80059ea <__swbuf_r+0x8e>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	60a3      	str	r3, [r4, #8]
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	701e      	strb	r6, [r3, #0]
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	3001      	adds	r0, #1
 80059b0:	4283      	cmp	r3, r0
 80059b2:	d004      	beq.n	80059be <__swbuf_r+0x62>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	07db      	lsls	r3, r3, #31
 80059b8:	d519      	bpl.n	80059ee <__swbuf_r+0x92>
 80059ba:	2e0a      	cmp	r6, #10
 80059bc:	d117      	bne.n	80059ee <__swbuf_r+0x92>
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f933 	bl	8005c2c <_fflush_r>
 80059c6:	b190      	cbz	r0, 80059ee <__swbuf_r+0x92>
 80059c8:	e00f      	b.n	80059ea <__swbuf_r+0x8e>
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <__swbuf_r+0x9c>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d101      	bne.n	80059d4 <__swbuf_r+0x78>
 80059d0:	68ac      	ldr	r4, [r5, #8]
 80059d2:	e7d0      	b.n	8005976 <__swbuf_r+0x1a>
 80059d4:	4b09      	ldr	r3, [pc, #36]	; (80059fc <__swbuf_r+0xa0>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	bf08      	it	eq
 80059da:	68ec      	ldreq	r4, [r5, #12]
 80059dc:	e7cb      	b.n	8005976 <__swbuf_r+0x1a>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f81f 	bl	8005a24 <__swsetup_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0cc      	beq.n	8005984 <__swbuf_r+0x28>
 80059ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059ee:	4638      	mov	r0, r7
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08005e80 	.word	0x08005e80
 80059f8:	08005ea0 	.word	0x08005ea0
 80059fc:	08005e60 	.word	0x08005e60

08005a00 <_write_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4c07      	ldr	r4, [pc, #28]	; (8005a20 <_write_r+0x20>)
 8005a04:	4605      	mov	r5, r0
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fb fac1 	bl	8000f96 <_write>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_write_r+0x1e>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_write_r+0x1e>
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	2000020c 	.word	0x2000020c

08005a24 <__swsetup_r>:
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <__swsetup_r+0xcc>)
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	b125      	cbz	r5, 8005a3a <__swsetup_r+0x16>
 8005a30:	69ab      	ldr	r3, [r5, #24]
 8005a32:	b913      	cbnz	r3, 8005a3a <__swsetup_r+0x16>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7ff fbf9 	bl	800522c <__sinit>
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <__swsetup_r+0xd0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d10f      	bne.n	8005a60 <__swsetup_r+0x3c>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	0715      	lsls	r5, r2, #28
 8005a4a:	d42c      	bmi.n	8005aa6 <__swsetup_r+0x82>
 8005a4c:	06d0      	lsls	r0, r2, #27
 8005a4e:	d411      	bmi.n	8005a74 <__swsetup_r+0x50>
 8005a50:	2209      	movs	r2, #9
 8005a52:	6032      	str	r2, [r6, #0]
 8005a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5e:	e03e      	b.n	8005ade <__swsetup_r+0xba>
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <__swsetup_r+0xd4>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d101      	bne.n	8005a6a <__swsetup_r+0x46>
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	e7eb      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <__swsetup_r+0xd8>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	bf08      	it	eq
 8005a70:	68ec      	ldreq	r4, [r5, #12]
 8005a72:	e7e6      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a74:	0751      	lsls	r1, r2, #29
 8005a76:	d512      	bpl.n	8005a9e <__swsetup_r+0x7a>
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	b141      	cbz	r1, 8005a8e <__swsetup_r+0x6a>
 8005a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a80:	4299      	cmp	r1, r3
 8005a82:	d002      	beq.n	8005a8a <__swsetup_r+0x66>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff fac1 	bl	800500c <_free_r>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f043 0308 	orr.w	r3, r3, #8
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b94b      	cbnz	r3, 8005abe <__swsetup_r+0x9a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d003      	beq.n	8005abe <__swsetup_r+0x9a>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 f917 	bl	8005cec <__smakebuf_r>
 8005abe:	89a2      	ldrh	r2, [r4, #12]
 8005ac0:	f012 0301 	ands.w	r3, r2, #1
 8005ac4:	d00c      	beq.n	8005ae0 <__swsetup_r+0xbc>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60a3      	str	r3, [r4, #8]
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	425b      	negs	r3, r3
 8005ace:	61a3      	str	r3, [r4, #24]
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	b953      	cbnz	r3, 8005aea <__swsetup_r+0xc6>
 8005ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005adc:	d1ba      	bne.n	8005a54 <__swsetup_r+0x30>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	0792      	lsls	r2, r2, #30
 8005ae2:	bf58      	it	pl
 8005ae4:	6963      	ldrpl	r3, [r4, #20]
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	e7f2      	b.n	8005ad0 <__swsetup_r+0xac>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e7f7      	b.n	8005ade <__swsetup_r+0xba>
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c
 8005af4:	08005e80 	.word	0x08005e80
 8005af8:	08005ea0 	.word	0x08005ea0
 8005afc:	08005e60 	.word	0x08005e60

08005b00 <_close_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4c06      	ldr	r4, [pc, #24]	; (8005b1c <_close_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4605      	mov	r5, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	f7fb fa5f 	bl	8000fce <_close>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_close_r+0x1a>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_close_r+0x1a>
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	2000020c 	.word	0x2000020c

08005b20 <__sflush_r>:
 8005b20:	898a      	ldrh	r2, [r1, #12]
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	0710      	lsls	r0, r2, #28
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	d458      	bmi.n	8005be0 <__sflush_r+0xc0>
 8005b2e:	684b      	ldr	r3, [r1, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dc05      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0f9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	d032      	beq.n	8005bba <__sflush_r+0x9a>
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	075a      	lsls	r2, r3, #29
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x48>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b62:	b10b      	cbz	r3, 8005b68 <__sflush_r+0x48>
 8005b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6e:	6a21      	ldr	r1, [r4, #32]
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b0      	blx	r6
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	d106      	bne.n	8005b88 <__sflush_r+0x68>
 8005b7a:	6829      	ldr	r1, [r5, #0]
 8005b7c:	291d      	cmp	r1, #29
 8005b7e:	d848      	bhi.n	8005c12 <__sflush_r+0xf2>
 8005b80:	4a29      	ldr	r2, [pc, #164]	; (8005c28 <__sflush_r+0x108>)
 8005b82:	40ca      	lsrs	r2, r1
 8005b84:	07d6      	lsls	r6, r2, #31
 8005b86:	d544      	bpl.n	8005c12 <__sflush_r+0xf2>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	6062      	str	r2, [r4, #4]
 8005b8c:	04d9      	lsls	r1, r3, #19
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	d504      	bpl.n	8005b9e <__sflush_r+0x7e>
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	d101      	bne.n	8005b9c <__sflush_r+0x7c>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b903      	cbnz	r3, 8005b9e <__sflush_r+0x7e>
 8005b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba0:	602f      	str	r7, [r5, #0]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d0c9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d002      	beq.n	8005bb4 <__sflush_r+0x94>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7ff fa2c 	bl	800500c <_free_r>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb8:	e7c0      	b.n	8005b3c <__sflush_r+0x1c>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b0      	blx	r6
 8005bc0:	1c41      	adds	r1, r0, #1
 8005bc2:	d1c8      	bne.n	8005b56 <__sflush_r+0x36>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c5      	beq.n	8005b56 <__sflush_r+0x36>
 8005bca:	2b1d      	cmp	r3, #29
 8005bcc:	d001      	beq.n	8005bd2 <__sflush_r+0xb2>
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d101      	bne.n	8005bd6 <__sflush_r+0xb6>
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	e7b1      	b.n	8005b3a <__sflush_r+0x1a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7ad      	b.n	8005b3c <__sflush_r+0x1c>
 8005be0:	690f      	ldr	r7, [r1, #16]
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d0a9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005be6:	0793      	lsls	r3, r2, #30
 8005be8:	680e      	ldr	r6, [r1, #0]
 8005bea:	bf08      	it	eq
 8005bec:	694b      	ldreq	r3, [r1, #20]
 8005bee:	600f      	str	r7, [r1, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	eba6 0807 	sub.w	r8, r6, r7
 8005bf8:	608b      	str	r3, [r1, #8]
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	dd9c      	ble.n	8005b3a <__sflush_r+0x1a>
 8005c00:	4643      	mov	r3, r8
 8005c02:	463a      	mov	r2, r7
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b0      	blx	r6
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dc06      	bgt.n	8005c1e <__sflush_r+0xfe>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c1c:	e78e      	b.n	8005b3c <__sflush_r+0x1c>
 8005c1e:	4407      	add	r7, r0
 8005c20:	eba8 0800 	sub.w	r8, r8, r0
 8005c24:	e7e9      	b.n	8005bfa <__sflush_r+0xda>
 8005c26:	bf00      	nop
 8005c28:	20400001 	.word	0x20400001

08005c2c <_fflush_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b1db      	cbz	r3, 8005c6e <_fflush_r+0x42>
 8005c36:	b118      	cbz	r0, 8005c40 <_fflush_r+0x14>
 8005c38:	6983      	ldr	r3, [r0, #24]
 8005c3a:	b90b      	cbnz	r3, 8005c40 <_fflush_r+0x14>
 8005c3c:	f7ff faf6 	bl	800522c <__sinit>
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <_fflush_r+0x48>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d109      	bne.n	8005c5a <_fflush_r+0x2e>
 8005c46:	686c      	ldr	r4, [r5, #4]
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	b17b      	cbz	r3, 8005c6e <_fflush_r+0x42>
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c56:	f7ff bf63 	b.w	8005b20 <__sflush_r>
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <_fflush_r+0x4c>)
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d101      	bne.n	8005c64 <_fflush_r+0x38>
 8005c60:	68ac      	ldr	r4, [r5, #8]
 8005c62:	e7f1      	b.n	8005c48 <_fflush_r+0x1c>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x50>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	bf08      	it	eq
 8005c6a:	68ec      	ldreq	r4, [r5, #12]
 8005c6c:	e7ec      	b.n	8005c48 <_fflush_r+0x1c>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	08005e80 	.word	0x08005e80
 8005c78:	08005ea0 	.word	0x08005ea0
 8005c7c:	08005e60 	.word	0x08005e60

08005c80 <_lseek_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4c07      	ldr	r4, [pc, #28]	; (8005ca0 <_lseek_r+0x20>)
 8005c84:	4605      	mov	r5, r0
 8005c86:	4608      	mov	r0, r1
 8005c88:	4611      	mov	r1, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f7fb f9c4 	bl	800101c <_lseek>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_lseek_r+0x1e>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_lseek_r+0x1e>
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	2000020c 	.word	0x2000020c

08005ca4 <__swhatbuf_r>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	460e      	mov	r6, r1
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	b096      	sub	sp, #88	; 0x58
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	da07      	bge.n	8005cc6 <__swhatbuf_r+0x22>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	89b3      	ldrh	r3, [r6, #12]
 8005cbc:	061a      	lsls	r2, r3, #24
 8005cbe:	d410      	bmi.n	8005ce2 <__swhatbuf_r+0x3e>
 8005cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc4:	e00e      	b.n	8005ce4 <__swhatbuf_r+0x40>
 8005cc6:	466a      	mov	r2, sp
 8005cc8:	f000 f862 	bl	8005d90 <_fstat_r>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dbf2      	blt.n	8005cb6 <__swhatbuf_r+0x12>
 8005cd0:	9a01      	ldr	r2, [sp, #4]
 8005cd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cda:	425a      	negs	r2, r3
 8005cdc:	415a      	adcs	r2, r3
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	e7ee      	b.n	8005cc0 <__swhatbuf_r+0x1c>
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	b016      	add	sp, #88	; 0x58
 8005cea:	bd70      	pop	{r4, r5, r6, pc}

08005cec <__smakebuf_r>:
 8005cec:	898b      	ldrh	r3, [r1, #12]
 8005cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf0:	079d      	lsls	r5, r3, #30
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	d507      	bpl.n	8005d08 <__smakebuf_r+0x1c>
 8005cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2301      	movs	r3, #1
 8005d02:	6163      	str	r3, [r4, #20]
 8005d04:	b002      	add	sp, #8
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	ab01      	add	r3, sp, #4
 8005d0a:	466a      	mov	r2, sp
 8005d0c:	f7ff ffca 	bl	8005ca4 <__swhatbuf_r>
 8005d10:	9900      	ldr	r1, [sp, #0]
 8005d12:	4605      	mov	r5, r0
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff f9c7 	bl	80050a8 <_malloc_r>
 8005d1a:	b948      	cbnz	r0, 8005d30 <__smakebuf_r+0x44>
 8005d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d20:	059a      	lsls	r2, r3, #22
 8005d22:	d4ef      	bmi.n	8005d04 <__smakebuf_r+0x18>
 8005d24:	f023 0303 	bic.w	r3, r3, #3
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	e7e3      	b.n	8005cf8 <__smakebuf_r+0xc>
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <__smakebuf_r+0x7c>)
 8005d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	6020      	str	r0, [r4, #0]
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	6163      	str	r3, [r4, #20]
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	6120      	str	r0, [r4, #16]
 8005d46:	b15b      	cbz	r3, 8005d60 <__smakebuf_r+0x74>
 8005d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 f831 	bl	8005db4 <_isatty_r>
 8005d52:	b128      	cbz	r0, 8005d60 <__smakebuf_r+0x74>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	431d      	orrs	r5, r3
 8005d64:	81a5      	strh	r5, [r4, #12]
 8005d66:	e7cd      	b.n	8005d04 <__smakebuf_r+0x18>
 8005d68:	080051f5 	.word	0x080051f5

08005d6c <_read_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4c07      	ldr	r4, [pc, #28]	; (8005d8c <_read_r+0x20>)
 8005d70:	4605      	mov	r5, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	6022      	str	r2, [r4, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb f8ee 	bl	8000f5c <_read>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_read_r+0x1e>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_read_r+0x1e>
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	2000020c 	.word	0x2000020c

08005d90 <_fstat_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4c07      	ldr	r4, [pc, #28]	; (8005db0 <_fstat_r+0x20>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4605      	mov	r5, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	f7fb f922 	bl	8000fe6 <_fstat>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_fstat_r+0x1c>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_fstat_r+0x1c>
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	2000020c 	.word	0x2000020c

08005db4 <_isatty_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4c06      	ldr	r4, [pc, #24]	; (8005dd0 <_isatty_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	f7fb f921 	bl	8001006 <_isatty>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_isatty_r+0x1a>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_isatty_r+0x1a>
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	2000020c 	.word	0x2000020c

08005dd4 <_init>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr

08005de0 <_fini>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr
